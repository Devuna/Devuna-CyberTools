[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:11:30'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================ 
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html) 
! 
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools) 
! 
!    Devuna-CyberTools is free software: you can redistribute it and/or modify 
!    it under the terms of the GNU General Public License as published by 
!    the Free Software Foundation, either version 3 of the License, or 
!    (at your option) any later version. 
! 
!    Devuna-CyberTools is distributed in the hope that it will be useful, 
!    but WITHOUT ANY WARRANTY; without even the implied warranty of 
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
!    GNU General Public License for more details. 
! 
!    You should have received a copy of the GNU General Public License 
!    along with this file.  If not, see <http://www.gnu.org/licenses/>. 
! ================================================================================ 
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME NumberToText
PROTOTYPE '(*DECIMAL pAmount, BYTE pFlag, *CSTRING TextAmount, <<*CSTRING pFormat>)'
PARAMETERS '(*DECIMAL pAmount, BYTE pFlag, *CSTRING TextAmount, <<*CSTRING pFormat>)'
[COMMON]
DESCRIPTION 'Number To Text Converter'
FROM ABC Source
MODIFIED '2017/06/09' '22:56:14'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================ 
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html) 
! 
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools) 
! 
!    Devuna-CyberTools is free software: you can redistribute it and/or modify 
!    it under the terms of the GNU General Public License as published by 
!    the Free Software Foundation, either version 3 of the License, or 
!    (at your option) any later version. 
! 
!    Devuna-CyberTools is distributed in the hope that it will be useful, 
!    but WITHOUT ANY WARRANTY; without even the implied warranty of 
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
!    GNU General Public License for more details. 
! 
!    You should have received a copy of the GNU General Public License 
!    along with this file.  If not, see <http://www.gnu.org/licenses/>. 
! ================================================================================ 
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
stringSlice     cstring(21)
intAmount       ulong   ! maximum amount of check to print is determined by ulong max val of 4,294,967,295
DecimalDigits   short   ! for non-currency numbers on the right of the decimal point
DecimalText     cstring(31)
tenths          cstring(4)  ! non-currency decimal string
hundredths      cstring(4)  ! non-currency decimal string
Thousandths     cstring(4)  ! non-currency decimal string
TenThousandths  cstring(4)  ! non-currency decimal string
Cents           byte
DollarText      cstring(31)
CentText        cstring(31)
DollarsAndCents decimal(19,2)
NonCurrencyAmount decimal(19,4)
tensTemp        cstring(4)
unit            cstring(4)
tens            cstring(4)
hundreds        cstring(4)
Thousands       cstring(4)
TenThousands    cstring(4)
HundredThousand cstring(4)
Million         cstring(4)
TenMillion      cstring(4)
HundredMillion  cstring(4)
Billion         cstring(4)
TenBillion      cstring(4)
HundredBillion  cstring(4)
count           short
Textlength      short
CaseValue       cstring(3)
ReturnedText    cstring(21)
loc:Format      cstring(8)
!------------------------------------------------------------------------
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 IF ~OMITTED(4)
    loc:format = pFormat
 ELSE
    loc:Format = 'Alpha'
 END

 IF loc:Format = 'Numeric'
    intAmount = 0
    Cents = 0
    DollarsAndCents = pAmount   ! the passed amount(a REAL) is assigned to a Decimal(13,2)
    intAmount = DollarsAndCents ! the integer amount is assigned here
    Cents = (DollarsAndCents-intAmount)*100  ! dollar amount is subtracted and cents assigned.
    IF Cents = 0
       CentText = 'NO/100'
    ELSE
       CentText = Cents & '/100'
    END
    TextAmount = FORMAT(intAmount,@N10.0)
    TextAmount = TextAmount & clip(DollarText) & ' DOLLARS AND ' & CLIP(CentText) !'This is the Amount in Text'
    Textlength = LEN(CLIP(LEFT(TextAmount)))
    IF Textlength < 80
       I# = 80 - Textlength
       TextAmount = ALL('*',I#) & CLIP(LEFT(TextAmount))
    END
 ELSE
    IF pFlag = TRUE  ! do currency
       intAmount = 0
       Cents = 0
       DollarsAndCents = pAmount   ! the passed amount(a REAL) is assigned to a Decimal(13,2)
       intAmount = DollarsAndCents ! the integer amount is assigned here
       Cents = (DollarsAndCents-intAmount)*100  ! dollar amount is subtracted and cents assigned.
       IF Cents = 0
          CentText = 'NO/100'
       ELSE
          CentText = Cents & '/100'
       END
       TextAmount = intAmount
       DO conversion
       TextAmount = TextAmount & CLIP(DollarText) & ' AND ' & CLIP(CentText) !'This is the Amount in Text'
    ELSE ! do non-currency
       intAmount = 0
       NonCurrencyAmount =  0
       DecimalDigits = 0
       DecimalText = ''
       NonCurrencyAmount = pAmount ! the REAL data is cast to decimal(19,4)
       intAmount = NonCurrencyAmount ! the integer amount is assigned here
       DecimalText = (NonCurrencyAmount-intAmount)!*10000  ! integer amount is subtracted and decimal assigned.
       TextAmount = intAmount
       DO conversion
       DO NonCurrencyDecimal
       IF (NonCurrencyAmount-intAmount)*10000 <> 0
          TextAmount = TextAmount & ' POINT' & CLIP(DecimalText)
       END
    END
 END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Conversion      routine
 count = 0
 unit = '0'
 tens = '0'
 hundreds = '0'
 Thousands = '0'
 TenThousands = '0'
 HundredThousand = '0'
 Million = '0'
 TenMillion = '0'
 HundredMillion = '0'
 Billion = '0'
 TenBillion = '0'
 HundredBillion = '0'
 Textlength = len(TextAmount)
 loop Textlength times
    count += 1
    execute count
      unit = TextAmount[Textlength]
      tens = TextAmount[(Textlength-count)+1]
      hundreds = TextAmount[(Textlength-count)+1]
      Thousands = TextAmount[(Textlength-count)+1]
      TenThousands = TextAmount[(Textlength-count)+1]
      HundredThousand = TextAmount[(Textlength-count)+1]
      Million = TextAmount[(Textlength-count)+1]
      TenMillion = TextAmount[(Textlength-count)+1]
      HundredMillion = TextAmount[(Textlength-count)+1]
      Billion = TextAmount[(Textlength-count)+1]    ! max value is 4 plus Billion
   !   TenBillion = TextAmount[(Textlength-count)+1]
   !   HundredBillion = TextAmount[(Textlength-count)+1]
    end
 end
 TextAmount = ''
 if intAmount <> 0
    Do Billions
    Do Millions
    Do Thousands
    Do Hundreds
 else
    TextAmount = 'ZERO'
 end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NonCurrencyDecimal        Routine
 count = 0
 Textlength = 0
 Tenths = '0'
 Hundredths = '0'
 Thousandths = '0'
 TenThousandths = '0'
 CaseValue = ''
 Textlength = len(clip(DecimalText))
 Textlength -= 2
! message('Textlength: ' & Textlength)
 loop Textlength times  ! works left to right from the decimal
    count += 1
    execute count
      Tenths = DecimalText[count+2]   ! add 2 to count in order to skip the '0.' of the number
      Hundredths = DecimalText[count+2]
      Thousandths = DecimalText[count+2]
      TenThousandths = DecimalText[count+2]
    end
 end
 DecimalText = ''
 if Tenths <> '' and Textlength >= 1
    CaseValue = clip(tenths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if Hundredths <> '' and Textlength >= 2
    CaseValue = clip(hundredths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if Thousandths <> '' and Textlength >= 3
    CaseValue = clip(Thousandths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if TenThousandths <> '' and Textlength >= 4
    CaseValue = clip(TenThousandths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
!----------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Billions        Routine
 if HundredBillion <> '0'
    CaseValue = clip(HundredBillion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenBillion <> '0'
    if TenBillion = '1'
       CaseValue = clip(TenBillion) & clip(Billion)
       Billion = '0'
    end
    if TenBillion <> '1' and TenBillion <> '0'
       CaseValue = clip(TenBillion) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Billion <> '0'
    CaseValue = clip(Billion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add Billion to text
  if HundredBillion <> '0' or TenBillion <> '0' or Billion <> '0'
     TextAmount = clip(TextAmount) & ' BILLION '
  end
!------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Millions        Routine
 if HundredMillion <> '0'
    CaseValue = clip(HundredMillion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenMillion <> '0'
    if TenMillion = '1'
       CaseValue = clip(TenMillion) & clip(Million)
       Million = '0'
    end
    if TenMillion <> '1' and TenMillion <> '0'
       CaseValue = clip(TenMillion) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Million <> '0'
    CaseValue = clip(Million)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add million to text
  if HundredMillion <> '0' or TenMillion <> '0' or Million <> '0'
     TextAmount = clip(TextAmount) & ' MILLION '
  end
!------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Thousands        Routine
 if HundredThousand <> '0'
    CaseValue = clip(HundredThousand)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenThousands <> '0'
    if TenThousands = '1'
       CaseValue = clip(TenThousands) & clip(Thousands)
       Thousands = '0'
    end
    if TenThousands <> '1' and TenThousands <> '0'
       CaseValue = clip(TenThousands) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Thousands <> '0'
    CaseValue = clip(Thousands)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add Thousand to text
 if HundredThousand <> '0' or TenThousands <> '0' or Thousands <> '0'
    TextAmount = clip(TextAmount) & ' THOUSAND '
 end
!-------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Hundreds        Routine
 if hundreds <> '0'
    CaseValue = clip(hundreds)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if tens <> '0'
    if tens = '1'
       CaseValue = clip(tens) & clip(unit)
       unit = '0'.
    if tens <> '1' and tens <> '0'
       CaseValue = clip(tens) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if unit <> '0'
    CaseValue = clip(Unit)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
TextRoutine         Routine
 ReturnedText = ''
 Case CaseValue
    of  '0'
        ReturnedText = 'ZERO'
    of  '1'
        ReturnedText = 'ONE'
    of  '2'
        ReturnedText = 'TWO'
    of  '3'
        ReturnedText = 'THREE'
    of  '4'
        ReturnedText = 'FOUR'
    of  '5'
        ReturnedText = 'FIVE'
    of  '6'
        ReturnedText = 'SIX'
    of  '7'
        ReturnedText = 'SEVEN'
    of  '8'
        ReturnedText = 'EIGHT'
    of  '9'
        ReturnedText = 'NINE'
    of  '10'
        ReturnedText = 'TEN'
    of  '11'
        ReturnedText = 'ELEVEN'
    of  '12'
        ReturnedText = 'TWELVE'
    of  '13'
        ReturnedText = 'THIRTEEN'
    of  '14'
        ReturnedText = 'FOURTEEN'
    of  '15'
        ReturnedText = 'FIFTEEN'
    of  '16'
        ReturnedText = 'SIXTEEN'
    of  '17'
        ReturnedText = 'SEVENTEEN'
    of  '18'
        ReturnedText = 'EIGHTEEN'
    of  '19'
        ReturnedText = 'NINETEEN'
    of  '20'
        ReturnedText = 'TWENTY'
    of  '30'
        ReturnedText = 'THIRTY'
    of  '40'
        ReturnedText = 'FORTY'
    of  '50'
        ReturnedText = 'FIFTY'
    of  '60'
        ReturnedText = 'SIXTY'
    of  '70'
        ReturnedText = 'SEVENTY'
    of  '80'
        ReturnedText = 'EIGHTY'
    of  '90'
        ReturnedText = 'NINETY'
 end
[END]
[END]
[END]
