[APPLICATION]
VERSION 34
TODO ABC ToDo
PROCEDURE Main
[COMMON]
FROM ABC
MODIFIED '2013/04/03' '14:04:19'
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('ErrorManager', 'ErrorStatusManager', 'FileManager:', |
  'FuzzyMatcher', 'INIManager', 'RelationManager:', 'Translator')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('ErrorClass')
WHEN  ('ErrorStatusManager') ('ErrorStatusClass')
WHEN  ('FuzzyMatcher') ('FuzzyClass')
WHEN  ('INIManager') ('kcrINIClass')
WHEN  ('Translator') ('TranslatorClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%ProgramAuthor DEFAULT  ('Clarion Computer Resources')
%Repository DEFAULT  ('')
%ProgramIcon DEFAULT  ('')
%MessageDescription LONG  (1)
%GlobalExternal LONG  (0)
%ExternalSource DEFAULT  ('Dynamic Link Library (DLL)')
%GenerateEmbedComments LONG  (0)
%INIType DEFAULT  ('NVD_INI')
%INIFile DEFAULT  ('Other')
%ININame DEFAULT  ('')
%INIProgramIniLocation DEFAULT  ('APPDIR')
%INICSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%CSIDLCompanyDir DEFAULT  ('')
%CSIDLProductDir DEFAULT  ('')
%CSIDLCreate LONG  (0)
%INIInAppDirectory LONG  (0)
%REGRoot DEFAULT  ('REG_CLASSES_ROOT')
%DisableINISaveWindow LONG  (1)
%PreserveVars MULTI LONG  ()
%PreserveVar DEPEND %PreserveVars DEFAULT TIMES 0

%EnableRunTimeTranslator LONG  (0)
%FuzzyMatchingEnabled LONG  (0)
%IgnoreCase LONG  (0)
%WordOnly LONG  (0)
%ButtonMarginsCompatibility LONG  (0)
%UseDefaultXPManifest LONG  (1)
%GenerateXPManifest LONG  (0)
%LinkGenerateXPManifest LONG  (0)
%AddVistaXPManifest LONG  (0)
%VistaManifestExecutionLevel DEFAULT  ('asInvoker')
%VistaManifestUIAccess LONG  (0)
%NoThemedControlsDependency LONG  (0)
%VistaManifestdpiAware LONG  (1)
%VistaManifestDependentAssembly MULTI LONG  ()
%VistaManifestDependentAssemblyName DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyVersion DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyType DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyPublicKeyToken DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyLanguage DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyProcessorArchitecture DEPEND %VistaManifestDependentAssembly LONG TIMES 0

%W7ManifestVista LONG  (0)
%W7ManifestW7 LONG  (1)
%W7ManifestW8 LONG  (1)
%W7ManifestW81 LONG  (1)
%W7ManifestW10 LONG  (1)
%ForceMakeTransparentXPManifest LONG  (0)
%ForceMakeColorXPManifest LONG  (0)
%ForceSHEETNoTheme LONG  (0)
%ExtUIXPMenuEnableGlobal LONG  (0)
%ExtUIXPMenuColorTypeGlobal DEFAULT  ('AUTONOBAR')
%ExtUIXPMenuDisableImageBar LONG  (1)
%ExtUIXPMenuEnableRuntime LONG  (0)
%ExtUIXPMenuRuntimeVar DEFAULT  ('')
%ExtUIXPMenuColorLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorRightGlobal LONG  (12560039)
%ExtUIXPMenuColorSelectionBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectionBarRightGlobal LONG  (15920364)
%ExtUIXPMenuSelVertical LONG  (1)
%ExtUIXPMenuColorSelectionBorderGlobal LONG  (15920364)
%ExtUIXPMenuColorHotLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorHotRightGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedRightGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarRightGlobal LONG  (15920364)
%ExtUIXPMenuColorItemBackgroundGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalText LONG  (0)
%ExtUIXPMenuColorSelectedText LONG  (0)
%ExtUIXPMenuColorHotText LONG  (0)
%ExtUIXPMenuFlat LONG  (1)
%ExtUIXPMenuShowImageBar LONG  (0)
%ExtUIXPMenuSeparator3D LONG  (1)
%ExtUIXPMenuSeparatorFull LONG  (0)
%ExtUIXPMenuVerticalLine LONG  (1)
%ExtUIMDITabGlobal DEFAULT  ('DISABLE')
%ExtUIMDITabStyleGlobal DEFAULT  ('Default')
%ExtUITabStyleGlobal DEFAULT  ('Default')
%WindowEnableEnhanceFocus LONG  (0)
%SelectedText LONG  (1)
%SelectedRadio LONG  (1)
%SelectedSpin LONG  (1)
%SelectedCheck LONG  (1)
%SelectedDropList LONG  (1)
%SelectedList LONG  (1)
%SelectedDisplayChangeColor LONG  (1)
%SelectedColor LONG  (65535)
%SelectedStyle LONG  (1)
%SelectedRequired LONG  (0)
%SelectedRequiredColor LONG  (65535)
%SelectedDisplayBox LONG  (1)
%SelectedDisplayBoxFillColor LONG  (65535)
%SelectedDisplayBoxBorderColor LONG  (0)
%SelectedDisplayBoxBorderSize DEFAULT  ('2')
%SelectedRequiredBox LONG  (0)
%SelectedRequiredDisplayBoxFillColor LONG  (255)
%SelectedRequiredDisplayBoxBorderColor LONG  (0)
%SelectedCaret LONG  (1)
%SelectedCaretColor LONG  (8421504)
%SelectedCaretCharacter DEFAULT  ('»')
%SelectedCaretCharacterSeparation DEFAULT  ('8')
%ExcludeSelectedDropList LONG  (1)
%EnableOSK DEFAULT  ('OFF')
%GlobalUseEnterInsteadTab LONG  (0)
%GlobalUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalUseEnterInsteadTabEnable DEFAULT  ('Enable')
%GlobalUseEnterInsteadTabEnableValue DEFAULT  ('True')
%GlobalInterLine DEFAULT  ('0')
%GlobalEnableAutoSizeColumn LONG  (0)
%GlobalEnableListFormatManager LONG  (0)
%GlobalUserFieldListFormatManager DEFAULT  ('1')
%TableOrigin DEFAULT  ('Application')
%FileEquate DEFAULT  ('LFM_CFile')
%ConfigFilePRE DEFAULT  ('CFG')
%ConfigFileOEM LONG  (0)
%ConfigFileTHREAD LONG  (1)
%ConfigFileENCRYPT LONG  (0)
%ConfigFilePASSWORD DEFAULT  ('')
%FormatNameSize DEFAULT  ('30')
%FormatBufferSize DEFAULT  ('5120')
%VariableBufferSize DEFAULT  ('2048')
%ConfigFilePath DEFAULT  ('')
%UseConfigFileName DEFAULT  ('Default')
%ConfigFileNAME DEFAULT  ('Formats.FDB')
%ColonCounter DEFAULT  ('')
%WrongSymbol DEFAULT  ('')
%DictionaryTableOrigin FILE  ()
%GlobalLFMSortOrderMenuText DEFAULT  ('SortOrder')
%GlobalEnableRebase LONG  (0)
%RBDMethod DEFAULT  ('Specify manually')
%RBDImageBase DEFAULT  ('10000000')
%DefaultGenerate LONG  (0)
%DefaultRILogout LONG  (1)
%LockRecoverTime DEFAULT  ('10')
%DefaultThreaded DEFAULT  ('Use File Setting')
%DefaultCreate DEFAULT  ('Use File Setting')
%DefaultExternal DEFAULT  ('None External')
%DefaultLocalExternal LONG  (0)
%DefaultExternalSource DEFAULT  ('')
%DefaultExternalAPP LONG  (0)
%DefaultExport LONG  (0)
%DefaultOpenMode DEFAULT  ('Share')
%DefaultUserAccess DEFAULT  ('Read/Write')
%DefaultOtherAccess DEFAULT  ('Deny None')
%DefaultLazyOpen LONG  (1)
%GeneratePropDataPath LONG  (0)
%PropDataPathLocation DEFAULT  ('Use same CSIDL value as set for INI file')
%DataPathCSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%DataPathCSIDLCompanyDir DEFAULT  ('')
%DataPathCSIDLProductDir DEFAULT  ('')
%DataPathCSIDLCreate LONG  (0)
%DataPathOtherDirectory DEFAULT  ('')
%DataPathOtherDirectoryCreate LONG  (0)
%OverrideGenerate DEPEND %File LONG TIMES 0

%OverrideRILogout DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('YES')
WHEN  ('ErrorStatusManager') ('YES')
WHEN  ('FuzzyMatcher') ('YES')
WHEN  ('INIManager') ('YES')
WHEN  ('Translator') ('YES')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('GlobalErrors')
WHEN  ('ErrorStatusManager') ('GlobalErrorsStatus')
WHEN  ('FuzzyMatcher') ('FuzzyMatcher')
WHEN  ('INIManager') ('INIMgr')
WHEN  ('Translator') ('Translator')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('AStringValue')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('AStringValue')
WHEN  ('INIManager') ('AStringValue')
WHEN  ('Translator') ('AStringValue')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (0)
WHEN  ('ErrorStatusManager') (0)
WHEN  ('FuzzyMatcher') (0)
WHEN  ('INIManager') (0)
WHEN  ('Translator') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%OverrideThreaded DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideCreate DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideExternal DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLocalExternal DEPEND %File LONG TIMES 0

%OverrideExternalSource DEPEND %File DEFAULT TIMES 0

%OverrideExternalAPP DEPEND %File LONG TIMES 0

%OverrideExport DEPEND %File LONG TIMES 0

%FileDeclarationMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use User Options')

%FileDeclarationType DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationThread DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationBindable DEPEND %File LONG TIMES 1
WHEN  ('') (1)

%FileDeclarationName DEPEND %File DEFAULT TIMES 0

%FileDeclarationOver DEPEND %File DEFAULT TIMES 0

%OverrideOpenMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideUserAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideOtherAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLazyOpen DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideDoNotAssertOnCloseMisuse DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%StandardExternalModule DEPEND %Module LONG TIMES 20
WHEN  ('') (1)
WHEN  ('CyberTools.clw') (1)
WHEN  ('CyberTools001.clw') (1)
WHEN  ('CyberTools002.clw') (1)
WHEN  ('CyberTools003.clw') (1)
WHEN  ('CyberTools004.clw') (1)
WHEN  ('CyberTools005.clw') (1)
WHEN  ('CyberTools006.clw') (1)
WHEN  ('CyberTools007.clw') (1)
WHEN  ('CyberTools008.clw') (1)
WHEN  ('CyberTools009.clw') (1)
WHEN  ('CyberTools010.clw') (1)
WHEN  ('CyberTools011.clw') (1)
WHEN  ('CyberTools012.clw') (1)
WHEN  ('CyberTools013.clw') (1)
WHEN  ('CyberTools014.clw') (1)
WHEN  ('CyberTools015.clw') (1)
WHEN  ('CyberTools016.clw') (1)
WHEN  ('CyberTools017.clw') (1)
WHEN  ('CyberTools018.clw') (1)

%NoGenerateGlobals LONG  (0)
%WindowManagerType DEFAULT  ('WindowManager')
%ResetOnGainFocus LONG  (0)
%AutoToolbar LONG  (1)
%AutoRefresh LONG  (1)
%ImageClass DEFAULT  ('ImageManager')
%ErrorStatusManagerType DEFAULT  ('ErrorStatusClass')
%ErrorManagerType DEFAULT  ('ErrorClass')
%DefaultErrorCategory DEFAULT  ('ABC')
%AllowSelectCopy LONG  (0)
%StoreErrorHistory LONG  (0)
%LimitStoredHistory LONG  (0)
%ErrorHistoryThreshold DEFAULT  ('300')
%HistoryViewTrigger DEFAULT  ('Level:Fatal')
%PopupClass DEFAULT  ('PopupClass')
%SelectFileClass DEFAULT  ('SelectFileClass')
%ResizerType DEFAULT  ('WindowResizeClass')
%ResizerDeFaultFindParents LONG  (1)
%ResizerDefaultOptimizeMoves LONG  (1)
%ResizerDefaultOptimizeRedraws LONG  (1)
%INIClass DEFAULT  ('kcrINIClass')
%RunTimeTranslatorType DEFAULT  ('TranslatorClass')
%ExtractionFilename DEFAULT  ('')
%TranslationGroups MULTI LONG  ()
%TranslationFile DEPEND %TranslationGroups DEFAULT TIMES 0

%TranslationGroup DEPEND %TranslationGroups DEFAULT TIMES 0

%CalendarManagerType DEFAULT  ('CalendarClass')
%GlobalChangeColor LONG  (0)
%GlobalColorSunday LONG  (255)
%GlobalColorSaturday LONG  (255)
%GlobalColorHoliday LONG  (32768)
%GlobalColorOther LONG  (0)
%GlobalSelectOnClose DEFAULT  ('Select')
%GlobalUseABCClasess LONG  (1)
%FileManagerType DEFAULT  ('FileManager')
%ViewManagerType DEFAULT  ('ViewManager')
%RelationManagerType DEFAULT  ('RelationManager')
%BrowserType DEFAULT  ('BrowseClass')
%ActiveInvisible LONG  (0)
%AllowUnfilled LONG  (0)
%RetainRow LONG  (1)
%FileDropManagerType DEFAULT  ('FileDropClass')
%FileDropComboManagerType DEFAULT  ('FileDropComboClass')
%FormVCRManagerType DEFAULT  ('FormVCRClass')
%BrowseEIPManagerType DEFAULT  ('BrowseEIPManager')
%EditInPlaceInterface DEFAULT  ('Original')
%EditInPlaceType DEFAULT  ('EditClass')
%EditInPlaceEntryType DEFAULT  ('EditEntryClass')
%EditInPlaceTextType DEFAULT  ('EditTextClass')
%EditInPlaceCheckType DEFAULT  ('EditCheckClass')
%EditInPlaceSpinType DEFAULT  ('EditSpinClass')
%EditInPlaceDropListType DEFAULT  ('EditDropListClass')
%EditInPlaceDropComboType DEFAULT  ('EditDropComboClass')
%EditInPlaceColorType DEFAULT  ('EditColorClass')
%EditInPlaceFileType DEFAULT  ('EditFileClass')
%EditInPlaceFontType DEFAULT  ('EditFontClass')
%EditInPlaceMultiSelectType DEFAULT  ('EditMultiSelectClass')
%EditInPlaceCalendarType DEFAULT  ('EditCalendarClass')
%EditInPlaceLookupType DEFAULT  ('EditLookupClass')
%EditInPlaceOtherType DEFAULT  ('EditEntryClass')
%QBEFormType DEFAULT  ('QueryFormClass')
%QBEFormVisualType DEFAULT  ('QueryFormVisual')
%QBEListType DEFAULT  ('QueryListClass')
%QBEListVisualType DEFAULT  ('QueryListVisual')
%StepManagerType DEFAULT  ('StepClass')
%StepManagerLongType DEFAULT  ('StepLongClass')
%StepManagerRealType DEFAULT  ('StepRealClass')
%StepManagerStringType DEFAULT  ('StepStringClass')
%StepManagerCustomType DEFAULT  ('StepCustomClass')
%StepLocatorType DEFAULT  ('StepLocatorClass')
%EntryLocatorType DEFAULT  ('EntryLocatorClass')
%IncrementalLocatorType DEFAULT  ('IncrementalLocatorClass')
%FilteredLocatorType DEFAULT  ('FilterLocatorClass')
%FuzzyMatcherClass DEFAULT  ('FuzzyClass')
%GridClass DEFAULT  ('GridClass')
%SidebarClass DEFAULT  ('SidebarClass')
%ProcessType DEFAULT  ('ProcessClass')
%PrintPreviewType DEFAULT  ('PrintPreviewClass')
%ReportManagerType DEFAULT  ('ReportManager')
%ReportTargetSelectorManagerType DEFAULT  ('ReportTargetSelectorClass')
%BreakManagerType DEFAULT  ('BreakManagerClass')
%AsciiViewerClass DEFAULT  ('AsciiViewerClass')
%AsciiSearchClass DEFAULT  ('AsciiSearchClass')
%AsciiPrintClass DEFAULT  ('AsciiPrintClass')
%AsciiFileManagerType DEFAULT  ('AsciiFileClass')
%ToolbarClass DEFAULT  ('ToolbarClass')
%ToolbarListBoxType DEFAULT  ('ToolbarListboxClass')
%ToolbarRelTreeType DEFAULT  ('ToolbarReltreeClass')
%ToolbarUpdateClassType DEFAULT  ('ToolbarUpdateClass')
%ToolbarFormVCRType DEFAULT  ('ToolbarFormVCRClass')
%OverrideAbcSettings LONG  (0)
%AbcSourceLocation DEFAULT  ('LINK')
%AbcLibraryName DEFAULT  ('')
%AppTemplateFamily DEFAULT  ('ABC')
%CWTemplateVersion DEFAULT  ('v10.0')
%ABCVersion DEFAULT  ('10000')
%INIActive LONG  (0)
%GlobalUseDefaultFileManager LONG  (1)
%GlobalFileManagerClass DEFAULT  ('')
%GlobalUseDefaultRelationManager LONG  (1)
%GlobalRelationManagerClass DEFAULT  ('')
%OverrideUseDefaultFileManager DEPEND %File LONG TIMES 0

%OverrideFileManagerClass DEPEND %File DEFAULT TIMES 0

%OverrideUseDefaultRelationManager DEPEND %File LONG TIMES 0

%OverrideRelationManagerClass DEPEND %File DEFAULT TIMES 0

%DefaultCloseFile DEFAULT  ('Close the File')
%WarnOnLogoutError LONG  (1)
%OverrideCloseFile DEPEND %File DEFAULT TIMES 0

%GenerateRICode LONG  (0)
%RIFunctionMax DEFAULT  ('4')
%RelationsForUpdatedFilesOnly LONG  (1)
%OverrideDictionaryFileDriver LONG  (0)
%OverrideFileDriver DEFAULT  ('ORACLE')
%OverrideFileOwner DEFAULT  ('')
%DateModifiedFlag LONG  (1)
%DateModifiedField DEFAULT  ('DateModified')
%DateModifiedFormat DEFAULT  ('@D2')
%TimeModifiedField DEFAULT  ('TimeModified')
%TimeModifiedFormat DEFAULT  ('@T3')
%DeleteFlag LONG  (0)
%DeleteFlagField DEFAULT  ('DeleteFlag')
%LimitedFiles LONG  (0)
%FromFileNumber DEFAULT  ('1')
%ToFileNumber DEFAULT  ('50')
%UseThreadManager LONG  (1)
%GlobalThreadQueueExternal LONG  (0)
%MessageLevel DEFAULT  ('1')
%SQLAutoIncrementOnAdd LONG  (0)
%OverrideExcludeFile MULTI DEFAULT  ()
%CHora DEFAULT  ('CHora')
%OSLFile DEFAULT  ('OSqrl')
%OSLField FIELD  ()
%SQLBrowse LONG  (0)
%OSCFile DEFAULT  ('OSqrc')
%OSCField FIELD  ()
%ConnectString FIELD  ()
%CodeLoadOption DEFAULT  ('PRELOAD')
%DataLoadOption DEFAULT  ('PRELOAD')
%SegmentLoadOption DEFAULT  ('PRELOAD')
%ClarionVersion DEFAULT  ('2.0')
%GlobalIncludeFile DEFAULT  ('Clarion.clw')
%DateStampOption DEFAULT  ('Simple')
%CreatedDateFlag LONG  (0)
%CreatedByField DEFAULT  ('CreatedBy')
%CreatedBySource DEFAULT  ('gUserName')
%CreatedDate DEFAULT  ('CreatedDate')
%CreatedDateFormat DEFAULT  ('@D2b')
%CreatedTime DEFAULT  ('CreatedTime')
%CreatedTimeFormat DEFAULT  ('@T3b')
%LastAccessDateFlag LONG  (0)
%AccessedByField DEFAULT  ('LastAccessBy')
%AccessedBySource DEFAULT  ('gUserName')
%LastAccessDate DEFAULT  ('LastAccessDate')
%LastAccessDateFormat DEFAULT  ('@D2b')
%LastAccessTime DEFAULT  ('LastAccessTime')
%LastAccessTimeFormat DEFAULT  ('@T3b')
%IncludeFileExtension DEFAULT  ('INC')
%GenerateModuleEnd LONG  (0)
%ShipListRequested LONG  (0)
%UseBugHelp LONG  (0)
%ExportFileRequested LONG  (1)
%UseSecurityOverride LONG  (1)
%DisableControlHelp LONG  (1)
%InternalDateModifiedField DEFAULT  ('InternalDateModified')
%InternalTimeModifiedField DEFAULT  ('InternalTimeModified')
%DefaultWindowIcon DEFAULT  ('')
%OverrideWindowIcon LONG  (0)
%BrowseBugsAllowed LONG  (0)
%UsePriorWindowIcon LONG  (1)
%UseGlobalWindowIcon LONG  (1)
%ForceSystemIcon LONG  (1)
%DisableStatusMessages LONG  (0)
%UseGlobalHelpFile LONG  (1)
%DisableSecurityLogging LONG  (0)
%ExportDataItems MULTI LONG  ()
%ExportDataItem DEPEND %ExportDataItems DEFAULT TIMES 0

%ExportDataType DEPEND %ExportDataItems DEFAULT TIMES 0

%UseCWT LONG  (0)
%GenerateGlobalData LONG  (0)
%WindowFrameDragging LONG  (1)
%EnableExceptionMessage LONG  (0)
[ADDITION]
NAME KCR KCR_CalendarClass
[INSTANCE]
INSTANCE 3
[PROMPTS]
%TplName DEFAULT  ('KCR_CalendarClass (Devuna)')
%TplDescription DEFAULT  ('Add Calendar Class')
[ADDITION]
NAME KCR KCR_GlobalClass
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_GlobalClass (Devuna)')
%TplDescription DEFAULT  ('Exclude Classes from Global Instantiation')
%ExcludeAllClasses LONG  (0)
%ExcludeAll LONG  (1)
%IncludeCapesoft LONG  (0)
%IncludeFileManager LONG  (1)
%IncludeMessage LONG  (1)
%IncludeNetTalk LONG  (0)
%IncludeKeystone LONG  (0)
%IncludeEdit LONG  (1)
%IncludeScintilla LONG  (0)
%IncludeTablet LONG  (0)
%IncludeUXTheme LONG  (0)
%IncludeMiscellaneous LONG  (0)
%IncludeProDomus LONG  (0)
%ExcludeClass MULTI DEFAULT  ()
%IncludeRADProfiler LONG  (0)
%ListClasses LONG  (0)
%IncludeImageEx LONG  (0)
%IncludeCOM LONG  (0)
[ADDITION]
NAME KCR KCR_GlobalDataExport
[INSTANCE]
INSTANCE 2
[PROMPTS]
%TplName DEFAULT  ('KCR_GlobalDataExport (Devuna)')
%TplDescription DEFAULT  ('Remove template globals and ABC libraries from EXP file')
%ExcludeExportedGlobalData LONG  (1)
[PERSIST]
%SaveCreateLocalMap DEFAULT  ('1')
%GenerationCompleted DEPEND %Module DEFAULT TIMES 19
WHEN  ('CyberTools.clw') ('1')
WHEN  ('CyberTools001.clw') ('1')
WHEN  ('CyberTools002.clw') ('1')
WHEN  ('CyberTools003.clw') ('1')
WHEN  ('CyberTools004.clw') ('1')
WHEN  ('CyberTools005.clw') ('1')
WHEN  ('CyberTools006.clw') ('1')
WHEN  ('CyberTools007.clw') ('1')
WHEN  ('CyberTools008.clw') ('1')
WHEN  ('CyberTools009.clw') ('1')
WHEN  ('CyberTools010.clw') ('1')
WHEN  ('CyberTools011.clw') ('1')
WHEN  ('CyberTools012.clw') ('1')
WHEN  ('CyberTools013.clw') ('1')
WHEN  ('CyberTools014.clw') ('1')
WHEN  ('CyberTools015.clw') ('1')
WHEN  ('CyberTools016.clw') ('1')
WHEN  ('CyberTools017.clw') ('1')
WHEN  ('CyberTools018.clw') ('1')

%LastTarget32 DEFAULT  ('1')
%LastProgramExtension DEFAULT  ('DLL')
%LastApplicationDebug DEFAULT  ('')
%LastApplicationLocalLibrary DEFAULT  ('')
[PROJECT]
#system win32 dll
#model clarion dll
#set RELEASE = on
#compile "CyberTools.clw" -- GENERATED
#compile "CyberTools001.clw" -- GENERATED
#compile "CyberTools002.clw" -- GENERATED
#compile "CyberTools003.clw" -- GENERATED
#compile "CyberTools004.clw" -- GENERATED
#compile "CyberTools005.clw" -- GENERATED
#compile "CyberTools006.clw" -- GENERATED
#compile "CyberTools007.clw" -- GENERATED
#compile "CyberTools008.clw" -- GENERATED
#compile "CyberTools009.clw" -- GENERATED
#compile "CyberTools010.clw" -- GENERATED
#compile "CyberTools011.clw" -- GENERATED
#compile "CyberTools012.clw" -- GENERATED
#compile "CyberTools013.clw" -- GENERATED
#compile "CyberTools014.clw" -- GENERATED
#compile "CyberTools015.clw" -- GENERATED
#compile "CyberTools016.clw" -- GENERATED
#compile "CyberTools017.clw" -- GENERATED
#compile "CyberTools018.clw" -- GENERATED
#pragma link("C%V%DOS%X%%L%.LIB")
#pragma link("C%V%TPS%X%%L%.LIB")
#link "CyberTools.DLL"
[PROGRAM]
[COMMON]
FROM ABC ABC
MODIFIED '2017/06/09' '22:42:32'
[EMBED]
EMBED %AfterGlobalIncludes
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
   INCLUDE('Devuna.CLW','equates'),ONCE

GlobalViewOnlyMode           BYTE(False)     !Keystone View Only Mode T/F
GlobalLookupOverride         BYTE(False)     !Keystone Override Secondary Lookups T/F
GlobalOracleTF               BYTE(False)     !Keystone ORACLE Flag T/F
GlobalUserName               CSTRING(41)     !Keystone user resource Id
GlobalVersion                CSTRING(26)     !Keystone program version
GlobalUserSysId              LONG            !Keystone user system id
GlobalSortOrder              BYTE            !Keystone sort order for vcr form
GlobalBrowseBugsAllowed      BYTE(True)      !Keystone bug database access flag
GlobalDefaultIcon            STRING(16)      !Keystone default program icon
GlobalSecurityLogging        BYTE            !Keystone security logging flag
ThreadQ    QUEUE,PRE(tq)
Record       GROUP,PRE()
Number         LONG(0)        !thread number         (returned by START)
Name           STRING(30)     !procedure name        (e.g., MasterList)
Instance       LONG(0)        !procedure instance
MaxInstance    LONG(0)        !maximum procedure instance
Param1         LONG(0)        !foreign key 1
Param2         LONG(0)        !foreign key 2
Param3         LONG(0)        !foreign key 3
Param4         LONG(0)        !foreign key 4
Buffer         STRING(256)    !data buffer
             END
           END
[END]
EMBED %GlobalMap
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
INCLUDE('KCRAPIFNC.INC'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
INCLUDE('Devuna.clw','map')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
   MODULE('RPCRT4.DLL')
      kcr_RpcStringFree(*LONG lpszString),RPC_STATUS,RAW,PASCAL,NAME('RpcStringFreeA')
      kcr_UuidCreate(*GUID Uuid),RPC_STATUS,RAW,PASCAL,NAME('UuidCreate')
      kcr_UuidToString(*GUID Uuid,*LONG lpszString),RPC_STATUS,RAW,PASCAL,NAME('UuidToStringA')
      kcr_UuidFromString(*CSTRING lpszString,*GUID Uuid),RPC_STATUS,RAW,PASCAL,NAME('UuidFromStringA')
   END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
    MODULE('Kernel32')
        RegSetValueEx(UNSIGNED,*CSTRING,ULONG,ULONG,*DWORD,ULONG),LONG,RAW,PASCAL,NAME('RegSetValueExA'),PROC
    END

[END]
EMBED %AfterFileDeclarations
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
REGISTRY            FILE,DRIVER('TOPSPEED'),NAME('REGISTRY.DAT'),CREATE,RECLAIM,PRE(REG)
K1                    KEY(+REG:USERNAME,+REG:SECTIONNAME,+REG:TOKENLABEL),OPT,NOCASE,PRIMARY
RECORD                RECORD
USERNAME                STRING(10)
SECTIONNAME             STRING(30)
TOKENLABEL              STRING(30)
TOKENVALUE              STRING(1000)
                      END
                    END

[END]
EMBED %BeforeGlobalIncludes
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
    INCLUDE('svapi.inc'),ONCE

!    INCLUDE('svcomdef.inc'),ONCE
! Copied from svcomdef.inc to prevent duplcicates of other equates with Devuna.clw
! KV 2008.03.17
_GUID                   group,type
Data1                     long
Data2                     short
Data3                     short
Data4                     byte,dim(8)
                        end

_GUIDL                  group,type
Data1                     long
Data2                     long
Data3                     long
Data4                     long
                        end

GUID                    group(_GUID),type.
_IID                    group(GUID),type.
_CLSID                  group(GUID),type.
!--------------------------------------------------------------------------------------

RPC_STATUS  EQUATE(LONG)
RPC_S_OK    EQUATE(0)

[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:09:56'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME Main
NOEXPORT
[COMMON]
DESCRIPTION 'Cyber Tools Demo Main Menu'
FROM ABC Frame
MODIFIED '2017/06/09' '22:15:16'
[DATA]
[SCREENCONTROLS]
! PROMPT('LocalRequest:'),USE(?LocalRequest:Prompt)
! ENTRY(@n-14),USE(LocalRequest)
[REPORTCONTROLS]
! STRING(@n-14),USE(LocalRequest)
LocalRequest             LONG
!!> GUID('69c52b44-5f9f-4292-ac76-752c4167b336'),PROMPT('LocalRequest:'),HEADER('LocalRequest'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('Date Holder:'),USE(?DateHolder:Prompt)
! ENTRY(@d2),USE(DateHolder)
[REPORTCONTROLS]
! STRING(@d2),USE(DateHolder)
DateHolder               DATE
!!> GUID('ead1f244-f7f3-48fe-ad85-551f03ff534d'),PROMPT('Date Holder:'),HEADER('Date Holder'),PICTURE(@d2)
[SCREENCONTROLS]
! PROMPT('CurrentTab:'),USE(?CurrentTab:Prompt)
! ENTRY(@s80),USE(CurrentTab)
[REPORTCONTROLS]
! STRING(@s80),USE(CurrentTab)
CurrentTab               STRING(80)
!!> GUID('ad658bd7-1acc-4996-b7cd-75910c02d2c2'),PROMPT('CurrentTab:'),HEADER('CurrentTab'),PICTURE(@s80)
[SCREENCONTROLS]
! PROMPT('NewThread:'),USE(?NewThread:Prompt)
! ENTRY(@n-14),USE(NewThread)
[REPORTCONTROLS]
! STRING(@n-14),USE(NewThread)
NewThread                LONG,AUTO
!!> GUID('2630b6c5-33c9-4c86-81b7-faf75036dccc'),PROMPT('NewThread:'),HEADER('NewThread'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('ThreadCount:'),USE(?ThreadCount:Prompt)
! ENTRY(@n-14),USE(ThreadCount)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadCount)
ThreadCount              LONG,AUTO
!!> GUID('35cc9a71-7b6f-4607-b20b-d03e87655c77'),PROMPT('ThreadCount:'),HEADER('ThreadCount'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Record:'),USE(?loc:tq:Record:Prompt)
! ENTRY(@s255),USE(loc:tq:Record)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:tq:Record)
loc:tq:Record            GROUP,PRE()
!!> GUID('1f43e29f-f1ca-4157-8695-a8cbabd04ac0'),PROMPT('loc:tq:Record:'),HEADER('loc:tq:Record'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('loc:tq:Number:'),USE(?loc:tq:Number:Prompt)
! ENTRY(@n-14),USE(loc:tq:Number)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Number)
loc:tq:Number              LONG !thread number         (returned by START)
!!> GUID('84796be6-8138-47e6-958f-05bae983dd4c'),INITIAL('0'),PROMPT('loc:tq:Number:'),HEADER('loc:tq:Number'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Name:'),USE(?loc:tq:Name:Prompt)
! ENTRY(@s30),USE(loc:tq:Name)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:tq:Name)
loc:tq:Name                STRING(30) !procedure name        (e.g., MasterList)
!!> GUID('96f1597e-d698-45cb-ace3-7a715ed32490'),PROMPT('loc:tq:Name:'),HEADER('loc:tq:Name'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('loc:tq:Instance:'),USE(?loc:tq:Instance:Prompt)
! ENTRY(@n-14),USE(loc:tq:Instance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Instance)
loc:tq:Instance            LONG !procedure instance
!!> GUID('fdcb7c06-0b48-4175-8bd6-6150eb16dcc7'),INITIAL('0'),PROMPT('loc:tq:Instance:'),HEADER('loc:tq:Instance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:MaxInstance:'),USE(?loc:tq:MaxInstance:Prompt)
! ENTRY(@n-14),USE(loc:tq:MaxInstance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:MaxInstance)
loc:tq:MaxInstance         LONG !maximum procedure instance
!!> GUID('ea9f3edf-dcfa-444f-8bc5-7af96ea3bb13'),INITIAL('0'),PROMPT('loc:tq:MaxInstance:'),HEADER('loc:tq:MaxInstance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param1:'),USE(?loc:tq:Param1:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param1)
loc:tq:Param1              LONG !foreign key 1
!!> GUID('0ccfa738-4966-4b46-93f4-4148deb9479b'),INITIAL('0'),PROMPT('loc:tq:Param1:'),HEADER('loc:tq:Param1'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param2:'),USE(?loc:tq:Param2:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param2)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param2)
loc:tq:Param2              LONG !foreign key 2
!!> GUID('3d636b5e-f4c3-4334-8d0e-619b59bbbd66'),INITIAL('0'),PROMPT('loc:tq:Param2:'),HEADER('loc:tq:Param2'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param3:'),USE(?loc:tq:Param3:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param3)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param3)
loc:tq:Param3              LONG !foreign key 3
!!> GUID('d51ada56-844f-4847-88a8-446637476426'),INITIAL('0'),PROMPT('loc:tq:Param3:'),HEADER('loc:tq:Param3'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param4:'),USE(?loc:tq:Param4:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param4)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param4)
loc:tq:Param4              LONG !foreign key 4
!!> GUID('abc086a8-6dc9-42db-986c-ec88adf9e3ed'),INITIAL('0'),PROMPT('loc:tq:Param4:'),HEADER('loc:tq:Param4'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Buffer:'),USE(?loc:tq:Buffer:Prompt)
! TEXT,USE(loc:tq:Buffer),BOXED
[REPORTCONTROLS]
! TEXT,USE(loc:tq:Buffer),BOXED
loc:tq:Buffer              STRING(256) !data buffer
!!> GUID('bb93dc80-5dbc-46e0-9c7a-285ca6d730ff'),PROMPT('loc:tq:Buffer:'),HEADER('loc:tq:Buffer'),PICTURE(@s255)
                         END
!!> GUID('28e72aff-ea61-4110-a1aa-a1b8b4314aed')
[SCREENCONTROLS]
! PROMPT('hWnd:'),USE(?hWnd:Prompt)
! ENTRY(@n6),USE(hWnd)
[REPORTCONTROLS]
! STRING(@n6),USE(hWnd)
hWnd                     USHORT,AUTO
!!> GUID('1963c2a9-ae42-45cb-9f90-8b6661438c26'),PROMPT('hWnd:'),HEADER('hWnd'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('FilesOpened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('ec9922ad-94e5-4d51-887a-077e3c394466'),PROMPT('FilesOpened:'),HEADER('FilesOpened'),PICTURE(@n3)
[PROMPTS]
%INISaveWindow LONG  (1)
%ButtonAction DEPEND %Control DEFAULT TIMES 17
WHEN  ('') ('No Special Action')
WHEN  ('?Arrange') ('No Special Action')
WHEN  ('?Calendar') ('No Special Action')
WHEN  ('?Cascade') ('No Special Action')
WHEN  ('?Copy') ('No Special Action')
WHEN  ('?Cut') ('No Special Action')
WHEN  ('?CyberTools') ('No Special Action')
WHEN  ('?EditMenu') ('No Special Action')
WHEN  ('?Exit') ('No Special Action')
WHEN  ('?FileMenu') ('No Special Action')
WHEN  ('?HelpOnHelp') ('No Special Action')
WHEN  ('?HelpSearch') ('No Special Action')
WHEN  ('?Helpindex') ('No Special Action')
WHEN  ('?Paste') ('No Special Action')
WHEN  ('?PrintSetup') ('No Special Action')
WHEN  ('?TestWAVControl') ('Call a Procedure')
WHEN  ('?Tile') ('No Special Action')

%MenuAction DEPEND %Control STRING TIMES 1
WHEN  ('?Exit') ('No Special Action')

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 17
WHEN  ('') ('25000')
WHEN  ('?Arrange') ('25000')
WHEN  ('?Calendar') ('25000')
WHEN  ('?Cascade') ('25000')
WHEN  ('?Copy') ('25000')
WHEN  ('?Cut') ('25000')
WHEN  ('?CyberTools') ('25000')
WHEN  ('?EditMenu') ('25000')
WHEN  ('?Exit') ('25000')
WHEN  ('?FileMenu') ('25000')
WHEN  ('?HelpOnHelp') ('25000')
WHEN  ('?HelpSearch') ('25000')
WHEN  ('?Helpindex') ('25000')
WHEN  ('?Paste') ('25000')
WHEN  ('?PrintSetup') ('25000')
WHEN  ('?TestWAVControl') ('25000')
WHEN  ('?Tile') ('25000')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 17
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?CyberTools') ()
WHEN  ('?EditMenu') ()
WHEN  ('?Exit') ()
WHEN  ('?FileMenu') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') (TestWAVControl)
WHEN  ('?Tile') ()

%ButtonThread DEPEND %Control LONG TIMES 17
WHEN  ('') (0)
WHEN  ('?Arrange') (0)
WHEN  ('?Calendar') (0)
WHEN  ('?Cascade') (0)
WHEN  ('?Copy') (0)
WHEN  ('?Cut') (0)
WHEN  ('?CyberTools') (0)
WHEN  ('?EditMenu') (0)
WHEN  ('?Exit') (0)
WHEN  ('?FileMenu') (0)
WHEN  ('?HelpOnHelp') (0)
WHEN  ('?HelpSearch') (0)
WHEN  ('?Helpindex') (0)
WHEN  ('?Paste') (0)
WHEN  ('?PrintSetup') (0)
WHEN  ('?TestWAVControl') (1)
WHEN  ('?Tile') (0)

%ReturnValue FIELD  ()
%ButtonRunName DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('')
WHEN  ('?Arrange') ('')
WHEN  ('?Calendar') ('')
WHEN  ('?Cascade') ('')
WHEN  ('?Copy') ('')
WHEN  ('?Cut') ('')
WHEN  ('?Exit') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?Helpindex') ('')
WHEN  ('?Paste') ('')
WHEN  ('?PrintSetup') ('')
WHEN  ('?TestWAVControl') ('')
WHEN  ('?Tile') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('')
WHEN  ('?Arrange') ('')
WHEN  ('?Calendar') ('')
WHEN  ('?Cascade') ('')
WHEN  ('?Copy') ('')
WHEN  ('?Cut') ('')
WHEN  ('?Exit') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?Helpindex') ('')
WHEN  ('?Paste') ('')
WHEN  ('?PrintSetup') ('')
WHEN  ('?TestWAVControl') ('')
WHEN  ('?Tile') ('')

%ButtonParameters DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('')
WHEN  ('?Arrange') ('')
WHEN  ('?Calendar') ('')
WHEN  ('?Cascade') ('')
WHEN  ('?Copy') ('')
WHEN  ('?Cut') ('')
WHEN  ('?Exit') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?Helpindex') ('')
WHEN  ('?Paste') ('')
WHEN  ('?PrintSetup') ('')
WHEN  ('?TestWAVControl') ('')
WHEN  ('?Tile') ('')

%ButtonRequest DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('None')
WHEN  ('?Arrange') ('None')
WHEN  ('?Calendar') ('None')
WHEN  ('?Cascade') ('None')
WHEN  ('?Copy') ('None')
WHEN  ('?Cut') ('None')
WHEN  ('?Exit') ('None')
WHEN  ('?HelpOnHelp') ('None')
WHEN  ('?HelpSearch') ('None')
WHEN  ('?Helpindex') ('None')
WHEN  ('?Paste') ('None')
WHEN  ('?PrintSetup') ('None')
WHEN  ('?TestWAVControl') ('None')
WHEN  ('?Tile') ('None')

%PreLookupKey DEPEND %Control KEY TIMES 1
WHEN  ('') ()

%PreLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('') ()

%PostLookupKey DEPEND %Control KEY TIMES 1
WHEN  ('') ()

%PostLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('') ()

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?HelpOnHelp') (1)

%PostLookupParams DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%ChildFile DEPEND %Control FILE TIMES 1
WHEN  ('') ()

%ForceWindowRefresh DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 1
WHEN  ('')TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 1
WHEN  ('')TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0

%ThreadKey1 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadKey2 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadKey3 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadKey4 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadBuffer DEPEND %Control FIELD TIMES 14
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?Exit') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') ()
WHEN  ('?Tile') ()

%ThreadMaxInstance DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('')
WHEN  ('?Arrange') ('')
WHEN  ('?Calendar') ('')
WHEN  ('?Cascade') ('')
WHEN  ('?Copy') ('')
WHEN  ('?Cut') ('')
WHEN  ('?Exit') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?Helpindex') ('')
WHEN  ('?Paste') ('')
WHEN  ('?PrintSetup') ('')
WHEN  ('?TestWAVControl') ('')
WHEN  ('?Tile') ('')

%ThreadRestoreInstance DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('First')
WHEN  ('?Arrange') ('First')
WHEN  ('?Calendar') ('First')
WHEN  ('?Cascade') ('First')
WHEN  ('?Copy') ('First')
WHEN  ('?Cut') ('First')
WHEN  ('?Exit') ('First')
WHEN  ('?HelpOnHelp') ('First')
WHEN  ('?HelpSearch') ('First')
WHEN  ('?Helpindex') ('First')
WHEN  ('?Paste') ('First')
WHEN  ('?PrintSetup') ('First')
WHEN  ('?TestWAVControl') ('First')
WHEN  ('?Tile') ('First')

%ThreadParameter1 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadParameter2 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadParameter3 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadParameter4 DEPEND %Control FIELD TIMES 1
WHEN  ('') ()

%ThreadParam1 DEPEND %Control FIELD TIMES 14
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?Exit') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') ()
WHEN  ('?Tile') ()

%ThreadParam2 DEPEND %Control FIELD TIMES 14
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?Exit') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') ()
WHEN  ('?Tile') ()

%ThreadParam3 DEPEND %Control FIELD TIMES 14
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?Exit') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') ()
WHEN  ('?Tile') ()

%ThreadParam4 DEPEND %Control FIELD TIMES 14
WHEN  ('') ()
WHEN  ('?Arrange') ()
WHEN  ('?Calendar') ()
WHEN  ('?Cascade') ()
WHEN  ('?Copy') ()
WHEN  ('?Cut') ()
WHEN  ('?Exit') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?Helpindex') ()
WHEN  ('?Paste') ()
WHEN  ('?PrintSetup') ()
WHEN  ('?TestWAVControl') ()
WHEN  ('?Tile') ()

%SplashProcedure PROCEDURE  ()
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Ask {20}PROCEDURE(),DERIVED', 'Init {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlPostEventHandling
[INSTANCES]
WHEN '?Calendar'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 DateHolder = today()                           !Fill Date Holder
 Calendar( DateHolder )                         !Call Calendar
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 90
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[ADDITION]
NAME ABC DateTimeDisplay
[INSTANCE]
INSTANCE 1
PROCPROP
[PROMPTS]
%DisplayDate LONG  (1)
%DatePicture DEFAULT  ('October 31, 1959')
%OtherDatePicture DEFAULT  ('')
%ShowDayOfWeek LONG  (1)
%DateDisplayLocation DEFAULT  ('Status Bar')
%DateStatusSection DEFAULT  ('3')
%DateControl DEFAULT  ('')
%DisplayTime LONG  (1)
%TimePicture DEFAULT  ('5:30PM')
%OtherTimePicture DEFAULT  ('')
%TimeDisplayLocation DEFAULT  ('Status Bar')
%TimeStatusSection DEFAULT  ('4')
%TimeControl DEFAULT  ('')
[CALLS]
CalendarOLD
WordWrapText
FullName
WAVControl
TestWAVControl
C3ResizeControls
CopyFile
ProperString
RemoveCharacter
[WINDOW]
AppFrame APPLICATION('Cyber Tools Demo'),AT(-1,0,310,190),FONT('MS Sans Serif',8,COLOR:Black, |
          FONT:bold),RESIZE,MAXIMIZE,MAX,STATUS(-1,80,120,45),SYSTEM
          MENUBAR
            MENU('&Cyber Tools'),USE(?CyberTools),MSG('Cyber Tools')
              ITEM('&Calendar'),USE(?Calendar),MSG('Calendar')
              ITEM('&Test WAV Control'),USE(?TestWAVControl),MSG('Test WAV Control')
            END
            MENU('&File'),USE(?FileMenu)
              ITEM('P&rint Setup...'),USE(?PrintSetup),MSG('Setup Printer'),STD(STD:PrintSetup)
              ITEM,SEPARATOR
              ITEM('E&xit'),USE(?Exit),MSG('Exit this application'),STD(STD:Close)
            END
            MENU('&Edit'),USE(?EditMenu)
              ITEM('Cu&t'),USE(?Cut),MSG('Remove item to Windows Clipboard'),STD(STD:Cut)
              ITEM('&Copy'),USE(?Copy),MSG('Copy item to Windows Clipboard'),STD(STD:Copy)
              ITEM('&Paste'),USE(?Paste),MSG('Paste contents of Windows Clipboard'),STD(STD:Paste)
            END
            MENU('&Window'),MSG('Create and Arrange windows')
              ITEM('T&ile'),USE(?Tile),MSG('Make all open windows visible'),STD(STD:TileWindow)
              ITEM('&Cascade'),USE(?Cascade),MSG('Stack all open windows'),STD(STD:CascadeWindow)
              ITEM('&Arrange Icons'),USE(?Arrange),MSG('Align all window icons'),STD(STD:ArrangeIcons)
            END
            MENU('&Help'),MSG('Windows Help')
              ITEM('&Contents'),USE(?Helpindex),MSG('View the contents of the help file'), |
                STD(STD:HelpIndex)
              ITEM('&Search for Help On...'),USE(?HelpSearch),MSG('Search for help on a subject'), |
                STD(STD:HelpSearch)
              ITEM('&How to Use Help'),USE(?HelpOnHelp),MSG('How to use Windows Help'),STD(STD:HelpOnHelp)
            END
          END
        END

[PROCEDURE]
NAME TestWAVControl
NOEXPORT
[COMMON]
DESCRIPTION 'Test WAV Control Procedure'
FROM ABC Window
MODIFIED '2017/06/09' '22:15:29'
[DATA]
[SCREENCONTROLS]
! PROMPT('LocalRequest:'),USE(?LocalRequest:Prompt)
! ENTRY(@n-14),USE(LocalRequest)
[REPORTCONTROLS]
! STRING(@n-14),USE(LocalRequest)
LocalRequest             LONG
!!> GUID('e69c5b79-0449-4247-ac54-7f53211e7e6b'),PROMPT('LocalRequest:'),HEADER('LocalRequest'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('NewThread:'),USE(?NewThread:Prompt)
! ENTRY(@n-14),USE(NewThread)
[REPORTCONTROLS]
! STRING(@n-14),USE(NewThread)
NewThread                LONG,AUTO
!!> GUID('c63f45af-f11d-444e-bcf3-cf9f77f384c4'),PROMPT('NewThread:'),HEADER('NewThread'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('hWnd:'),USE(?hWnd:Prompt)
! ENTRY(@n6),USE(hWnd)
[REPORTCONTROLS]
! STRING(@n6),USE(hWnd)
hWnd                     USHORT,AUTO
!!> GUID('b7a39883-3d9a-4a97-bd54-af1dc64e146b'),PROMPT('hWnd:'),HEADER('hWnd'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('ThreadCount:'),USE(?ThreadCount:Prompt)
! ENTRY(@n-14),USE(ThreadCount)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadCount)
ThreadCount              LONG,AUTO
!!> GUID('4b7d5234-f954-456c-8a7f-f34605f7b500'),PROMPT('ThreadCount:'),HEADER('ThreadCount'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Record:'),USE(?loc:tq:Record:Prompt)
! ENTRY(@s255),USE(loc:tq:Record)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:tq:Record)
loc:tq:Record            GROUP,PRE()
!!> GUID('0fb564ce-045e-401b-89f4-937ca8ab91d3'),PROMPT('loc:tq:Record:'),HEADER('loc:tq:Record'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('loc:tq:Number:'),USE(?loc:tq:Number:Prompt)
! ENTRY(@n-14),USE(loc:tq:Number)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Number)
loc:tq:Number              LONG !thread number         (returned by START)
!!> GUID('56ce427c-eb4a-434c-bfd2-0953a73adadb'),INITIAL('0'),PROMPT('loc:tq:Number:'),HEADER('loc:tq:Number'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Name:'),USE(?loc:tq:Name:Prompt)
! ENTRY(@s30),USE(loc:tq:Name)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:tq:Name)
loc:tq:Name                STRING(30) !procedure name        (e.g., MasterList)
!!> GUID('5322c926-dde4-4a7f-b0b5-8a561e5207ff'),PROMPT('loc:tq:Name:'),HEADER('loc:tq:Name'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('loc:tq:Instance:'),USE(?loc:tq:Instance:Prompt)
! ENTRY(@n-14),USE(loc:tq:Instance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Instance)
loc:tq:Instance            LONG !procedure instance
!!> GUID('4a635722-0b25-4664-b994-159b0f548e64'),INITIAL('0'),PROMPT('loc:tq:Instance:'),HEADER('loc:tq:Instance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:MaxInstance:'),USE(?loc:tq:MaxInstance:Prompt)
! ENTRY(@n-14),USE(loc:tq:MaxInstance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:MaxInstance)
loc:tq:MaxInstance         LONG !maximum procedure instance
!!> GUID('d03a39ed-54dc-42c7-a2dd-eaeea80d8627'),INITIAL('0'),PROMPT('loc:tq:MaxInstance:'),HEADER('loc:tq:MaxInstance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param1:'),USE(?loc:tq:Param1:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param1)
loc:tq:Param1              LONG !foreign key 1
!!> GUID('772c6db5-103b-4de6-afe5-92bd20d344fa'),INITIAL('0'),PROMPT('loc:tq:Param1:'),HEADER('loc:tq:Param1'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param2:'),USE(?loc:tq:Param2:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param2)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param2)
loc:tq:Param2              LONG !foreign key 2
!!> GUID('d737d7e2-9172-446c-aa82-b9a9fd48e4b9'),INITIAL('0'),PROMPT('loc:tq:Param2:'),HEADER('loc:tq:Param2'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param3:'),USE(?loc:tq:Param3:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param3)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param3)
loc:tq:Param3              LONG !foreign key 3
!!> GUID('2066ce1e-79d0-42d5-b9e1-64565b46a378'),INITIAL('0'),PROMPT('loc:tq:Param3:'),HEADER('loc:tq:Param3'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param4:'),USE(?loc:tq:Param4:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param4)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param4)
loc:tq:Param4              LONG !foreign key 4
!!> GUID('b1921289-4ffb-4e59-a135-ec6093e5cb75'),INITIAL('0'),PROMPT('loc:tq:Param4:'),HEADER('loc:tq:Param4'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Buffer:'),USE(?loc:tq:Buffer:Prompt)
! TEXT,USE(loc:tq:Buffer),BOXED
[REPORTCONTROLS]
! TEXT,USE(loc:tq:Buffer),BOXED
loc:tq:Buffer              STRING(256) !data buffer
!!> GUID('69b19d97-3eae-457d-9c94-c1db8eaf6e06'),PROMPT('loc:tq:Buffer:'),HEADER('loc:tq:Buffer'),PICTURE(@s255)
                         END
!!> GUID('b6549369-6a91-49f0-acc9-9a6e72e9c2a7')
[SCREENCONTROLS]
! PROMPT('FilesOpened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('dc3dcb7e-6fa3-407f-9f89-de98f7dfd566'),PROMPT('FilesOpened:'),HEADER('FilesOpened'),PICTURE(@n3)
[PROMPTS]
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ButtonAction DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('No Special Action')
WHEN  ('?CloseButton') ('No Special Action')
WHEN  ('?FastForward') ('No Special Action')
WHEN  ('?Pause') ('No Special Action')
WHEN  ('?Play') ('No Special Action')
WHEN  ('?Position') ('No Special Action')
WHEN  ('?Record') ('No Special Action')
WHEN  ('?Resume') ('No Special Action')
WHEN  ('?Rewind') ('No Special Action')
WHEN  ('?Save') ('No Special Action')
WHEN  ('?Stop') ('No Special Action')
WHEN  ('?ToEnd') ('No Special Action')
WHEN  ('?ToTop') ('No Special Action')

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('25000')
WHEN  ('?CloseButton') ('25000')
WHEN  ('?FastForward') ('25000')
WHEN  ('?Pause') ('25000')
WHEN  ('?Play') ('25000')
WHEN  ('?Position') ('25000')
WHEN  ('?Record') ('25000')
WHEN  ('?Resume') ('25000')
WHEN  ('?Rewind') ('25000')
WHEN  ('?Save') ('25000')
WHEN  ('?Stop') ('25000')
WHEN  ('?ToEnd') ('25000')
WHEN  ('?ToTop') ('25000')

%ReturnValue FIELD  ()
%ButtonRunName DEPEND %Control DEFAULT TIMES 12
WHEN  ('?CloseButton') ('')
WHEN  ('?FastForward') ('')
WHEN  ('?Pause') ('')
WHEN  ('?Play') ('')
WHEN  ('?Position') ('')
WHEN  ('?Record') ('')
WHEN  ('?Resume') ('')
WHEN  ('?Rewind') ('')
WHEN  ('?Save') ('')
WHEN  ('?Stop') ('')
WHEN  ('?ToEnd') ('')
WHEN  ('?ToTop') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 12
WHEN  ('?CloseButton') ('')
WHEN  ('?FastForward') ('')
WHEN  ('?Pause') ('')
WHEN  ('?Play') ('')
WHEN  ('?Position') ('')
WHEN  ('?Record') ('')
WHEN  ('?Resume') ('')
WHEN  ('?Rewind') ('')
WHEN  ('?Save') ('')
WHEN  ('?Stop') ('')
WHEN  ('?ToEnd') ('')
WHEN  ('?ToTop') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ButtonThread DEPEND %Control LONG TIMES 12
WHEN  ('?CloseButton') (0)
WHEN  ('?FastForward') (0)
WHEN  ('?Pause') (0)
WHEN  ('?Play') (0)
WHEN  ('?Position') (0)
WHEN  ('?Record') (0)
WHEN  ('?Resume') (0)
WHEN  ('?Rewind') (0)
WHEN  ('?Save') (0)
WHEN  ('?Stop') (0)
WHEN  ('?ToEnd') (0)
WHEN  ('?ToTop') (0)

%ButtonParameters DEPEND %Control DEFAULT TIMES 12
WHEN  ('?CloseButton') ('')
WHEN  ('?FastForward') ('')
WHEN  ('?Pause') ('')
WHEN  ('?Play') ('')
WHEN  ('?Position') ('')
WHEN  ('?Record') ('')
WHEN  ('?Resume') ('')
WHEN  ('?Rewind') ('')
WHEN  ('?Save') ('')
WHEN  ('?Stop') ('')
WHEN  ('?ToEnd') ('')
WHEN  ('?ToTop') ('')

%ButtonRequest DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('None')
WHEN  ('?CloseButton') ('None')
WHEN  ('?FastForward') ('None')
WHEN  ('?Pause') ('None')
WHEN  ('?Play') ('None')
WHEN  ('?Position') ('None')
WHEN  ('?Record') ('None')
WHEN  ('?Resume') ('None')
WHEN  ('?Rewind') ('None')
WHEN  ('?Save') ('None')
WHEN  ('?Stop') ('None')
WHEN  ('?ToEnd') ('None')
WHEN  ('?ToTop') ('None')

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%PostLookupParams DEPEND %Control DEFAULT TIMES 0

%ChildFile DEPEND %Control FILE TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ThreadKey1 DEPEND %Control FIELD TIMES 0

%ThreadKey2 DEPEND %Control FIELD TIMES 0

%ThreadKey3 DEPEND %Control FIELD TIMES 0

%ThreadKey4 DEPEND %Control FIELD TIMES 0

%ThreadBuffer DEPEND %Control FIELD TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ThreadMaxInstance DEPEND %Control DEFAULT TIMES 12
WHEN  ('?CloseButton') ('')
WHEN  ('?FastForward') ('')
WHEN  ('?Pause') ('')
WHEN  ('?Play') ('')
WHEN  ('?Position') ('')
WHEN  ('?Record') ('')
WHEN  ('?Resume') ('')
WHEN  ('?Rewind') ('')
WHEN  ('?Save') ('')
WHEN  ('?Stop') ('')
WHEN  ('?ToEnd') ('')
WHEN  ('?ToTop') ('')

%ThreadRestoreInstance DEPEND %Control DEFAULT TIMES 12
WHEN  ('?CloseButton') ('First')
WHEN  ('?FastForward') ('First')
WHEN  ('?Pause') ('First')
WHEN  ('?Play') ('First')
WHEN  ('?Position') ('First')
WHEN  ('?Record') ('First')
WHEN  ('?Resume') ('First')
WHEN  ('?Rewind') ('First')
WHEN  ('?Save') ('First')
WHEN  ('?Stop') ('First')
WHEN  ('?ToEnd') ('First')
WHEN  ('?ToTop') ('First')

%ThreadParameter1 DEPEND %Control FIELD TIMES 0

%ThreadParameter2 DEPEND %Control FIELD TIMES 0

%ThreadParameter3 DEPEND %Control FIELD TIMES 0

%ThreadParameter4 DEPEND %Control FIELD TIMES 0

%ThreadParam1 DEPEND %Control FIELD TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ThreadParam2 DEPEND %Control FIELD TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ThreadParam3 DEPEND %Control FIELD TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ThreadParam4 DEPEND %Control FIELD TIMES 12
WHEN  ('?CloseButton') ()
WHEN  ('?FastForward') ()
WHEN  ('?Pause') ()
WHEN  ('?Play') ()
WHEN  ('?Position') ()
WHEN  ('?Record') ()
WHEN  ('?Resume') ()
WHEN  ('?Rewind') ()
WHEN  ('?Save') ()
WHEN  ('?Stop') ()
WHEN  ('?ToEnd') ()
WHEN  ('?ToTop') ()

%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Ask {20}PROCEDURE(),DERIVED', 'Init {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Save')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSectionBeforeWindow
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MCIDeviceId                  ushort(0)          !MCI Device Handle
MCIPromptName                cstring(50)        !Prompt Name
MciWindowHandle              ulong(0)           !Global Window Handle
MciPosition                  ulong(0)           !Global MCI File Position
[END]
EMBED %BeforeAccept
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIPromptName = 'test.wav'
 MCIDeviceId = WAVControl( 'Open', 0, MCIWindowHandle, MCIPromptName )
 MCIPosition = 1
[END]
EMBED %ControlPostEventHandling
[INSTANCES]
WHEN '?Save'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Save', MCIDeviceId, MCIWindowHandle, MCIPromptName, MCIPosition )
[END]
[END]
WHEN '?Record'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Record', MCIDeviceId, MCIWindowHandle, MCIPromptName, MCIPosition )
[END]
[END]
WHEN '?FastForward'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Fast Forward', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?Rewind'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Rewind', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?Position'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Position', MCIDeviceId, MCIWindowHandle, MCIPromptName, MCIPosition )
 x# = message( 'Position was: ' & mciPosition, 'Position Status', icon:Hand, button:Ok, button:Ok )
[END]
[END]
WHEN '?ToEnd'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'To End', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?ToTop'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'To Top', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?Resume'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Resume', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?Pause'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Pause', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?Stop'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Stop', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
WHEN '?CloseButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MCIDeviceId = WAVControl( 'Close', MCIDeviceId, MCIWindowHandle, MCIPromptName )
 post( EVENT:CloseWindow )
[END]
[END]
WHEN '?Play'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
! MCIDeviceId = WAVControl( 'Seek', MCIDeviceId, MCIWindowHandle, MCIPromptName, MCIPosition )
 MCIDeviceId = WAVControl( 'Play', MCIDeviceId, MCIWindowHandle, MCIPromptName )
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 90
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
WAVControl
[WINDOW]
window  WINDOW('Test WAV Control'),AT(,,295,81),FONT('MS Sans Serif',8,COLOR:Black),DOUBLE, |
          GRAY
          BUTTON('&Save'),AT(196,39),USE(?Save),#ORIG(?Record)
          BUTTON('Re&cord'),AT(152,39),USE(?Record),#ORIG(?Position)
          BUTTON('&Fast Forward'),AT(92,39),USE(?FastForward),#ORIG(?Rewind)
          BUTTON('Re&wind'),AT(48,39),USE(?Rewind),#ORIG(?Position)
          BUTTON('Po&sition'),AT(4,39),USE(?Position),#ORIG(?Resume)
          BUTTON('To E&nd'),AT(204,18),USE(?ToEnd),#ORIG(?ToTop)
          BUTTON('&To Top'),AT(160,18),USE(?ToTop),#ORIG(?Resume)
          BUTTON('&Resume'),AT(116,18),USE(?Resume),#ORIG(?Pause)
          BUTTON('P&ause'),AT(76,18),USE(?Pause),#ORIG(?Play)
          BUTTON('&Stop'),AT(40,18),USE(?Stop),#ORIG(?Play)
          BUTTON('Cl&ose'),AT(116,65,44,12),USE(?CloseButton),DEFAULT
          BUTTON('&Play'),AT(4,18),USE(?Play),#ORIG(?Button2)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:06'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME CalendarOLD
PROTOTYPE '(*? pDate)'
PARAMETERS '(*? pDate)'
[COMMON]
DESCRIPTION 'Three Month Calendar'
FROM ABC Window
MODIFIED '2017/06/12' '17:13:07'
[DATA]
[SCREENCONTROLS]
! PROMPT('LocalRequest:'),USE(?LocalRequest:Prompt)
! ENTRY(@n-14),USE(LocalRequest)
[REPORTCONTROLS]
! STRING(@n-14),USE(LocalRequest)
LocalRequest             LONG
!!> GUID('6a556be2-ed53-41e1-b0c7-0ef0c9ca978c'),PROMPT('LocalRequest:'),HEADER('LocalRequest'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('Scrn Month String:'),USE(?ScrnMonthString:Prompt)
! ENTRY(@s17),USE(ScrnMonthString),MSG('Month 1 name'),UPR,READONLY
[REPORTCONTROLS]
! STRING(@s17),USE(ScrnMonthString)
ScrnMonthString          STRING(17) !Month 1 name
!!> GUID('1357dbf2-9fc0-4577-9c9d-1cc60734a252'),PROMPT('Scrn Month String:'),HEADER('Scrn Month String'),MESSAGE('Month 1 name'),PICTURE(@s17),CASE(UPPER),READONLY
[SCREENCONTROLS]
! PROMPT('Scrn Month String 2:'),USE(?ScrnMonthString2:Prompt)
! ENTRY(@s17),USE(ScrnMonthString2),MSG('Month 2 Name'),UPR,READONLY
[REPORTCONTROLS]
! STRING(@s17),USE(ScrnMonthString2)
ScrnMonthString2         STRING(17) !Month 2 Name
!!> GUID('7eab51d4-dfd3-4d86-b958-376375bc236b'),PROMPT('Scrn Month String 2:'),HEADER('Scrn Month String 2'),MESSAGE('Month 2 Name'),PICTURE(@s17),CASE(UPPER),READONLY
[SCREENCONTROLS]
! PROMPT('Scrn Month String 3:'),USE(?ScrnMonthString3:Prompt)
! ENTRY(@s17),USE(ScrnMonthString3),UPR,READONLY
[REPORTCONTROLS]
! STRING(@s17),USE(ScrnMonthString3)
ScrnMonthString3         STRING(17)
!!> GUID('2b4f0a3b-46d9-42f4-9d5b-97aa5e2eb964'),PROMPT('Scrn Month String 3:'),HEADER('Scrn Month String 3'),PICTURE(@s17),CASE(UPPER),READONLY
[SCREENCONTROLS]
! PROMPT('Jump String:'),USE(?JumpString:Prompt)
! ENTRY(@s7),USE(JumpString),MSG('Jump STring'),CAP
[REPORTCONTROLS]
! STRING(@s7),USE(JumpString)
JumpString               STRING(7) !Jump STring
!!> GUID('edc15f7b-7b38-4c43-9d16-b5b39d8915ba'),PROMPT('Jump String:'),HEADER('Jump String'),MESSAGE('Jump STring'),PICTURE(@s7),CASE(CAPS)
[SCREENCONTROLS]
! PROMPT('Message Date:'),USE(?MessageDate:Prompt)
! ENTRY(@s20),USE(MessageDate),MSG('Display the date on screen')
[REPORTCONTROLS]
! STRING(@s20),USE(MessageDate)
MessageDate              STRING(20) !Display the date on screen
!!> GUID('928db999-5e45-46eb-9c23-011cf55ef66d'),PROMPT('Message Date:'),HEADER('Message Date'),MESSAGE('Display the date on screen'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT('NewThread:'),USE(?NewThread:Prompt)
! ENTRY(@n-14),USE(NewThread)
[REPORTCONTROLS]
! STRING(@n-14),USE(NewThread)
NewThread                LONG,AUTO
!!> GUID('adced6c1-1661-4b2e-b5e8-38600f38692a'),PROMPT('NewThread:'),HEADER('NewThread'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('ThreadCount:'),USE(?ThreadCount:Prompt)
! ENTRY(@n-14),USE(ThreadCount)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadCount)
ThreadCount              LONG,AUTO
!!> GUID('cc09010e-664d-4ef5-88a2-e782b0f5a32d'),PROMPT('ThreadCount:'),HEADER('ThreadCount'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Record:'),USE(?loc:tq:Record:Prompt)
! ENTRY(@s255),USE(loc:tq:Record)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:tq:Record)
loc:tq:Record            GROUP,PRE()
!!> GUID('9de5f9d0-a33b-4e63-bc73-52778307f234'),PROMPT('loc:tq:Record:'),HEADER('loc:tq:Record'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('loc:tq:Number:'),USE(?loc:tq:Number:Prompt)
! ENTRY(@n-14),USE(loc:tq:Number)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Number)
loc:tq:Number              LONG !thread number         (returned by START)
!!> GUID('1385e8f2-788c-4012-9daf-f36481be38c8'),INITIAL('0'),PROMPT('loc:tq:Number:'),HEADER('loc:tq:Number'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Name:'),USE(?loc:tq:Name:Prompt)
! ENTRY(@s30),USE(loc:tq:Name)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:tq:Name)
loc:tq:Name                STRING(30) !procedure name        (e.g., MasterList)
!!> GUID('ed410f18-9e8d-4683-8263-b1784ae45d8d'),PROMPT('loc:tq:Name:'),HEADER('loc:tq:Name'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('loc:tq:Instance:'),USE(?loc:tq:Instance:Prompt)
! ENTRY(@n-14),USE(loc:tq:Instance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Instance)
loc:tq:Instance            LONG !procedure instance
!!> GUID('9e2da0d0-ad55-426e-8508-6c64035f881c'),INITIAL('0'),PROMPT('loc:tq:Instance:'),HEADER('loc:tq:Instance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:MaxInstance:'),USE(?loc:tq:MaxInstance:Prompt)
! ENTRY(@n-14),USE(loc:tq:MaxInstance)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:MaxInstance)
loc:tq:MaxInstance         LONG !maximum procedure instance
!!> GUID('a01026ca-3324-4fbe-b54d-3aca2e05d46c'),INITIAL('0'),PROMPT('loc:tq:MaxInstance:'),HEADER('loc:tq:MaxInstance'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param1:'),USE(?loc:tq:Param1:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param1)
loc:tq:Param1              LONG !foreign key 1
!!> GUID('44ead85a-e7d1-4ee0-bfa0-4cc9d2c64c6a'),INITIAL('0'),PROMPT('loc:tq:Param1:'),HEADER('loc:tq:Param1'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param2:'),USE(?loc:tq:Param2:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param2)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param2)
loc:tq:Param2              LONG !foreign key 2
!!> GUID('3ad8c255-e282-43b0-8a02-b896a8eda7a4'),INITIAL('0'),PROMPT('loc:tq:Param2:'),HEADER('loc:tq:Param2'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param3:'),USE(?loc:tq:Param3:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param3)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param3)
loc:tq:Param3              LONG !foreign key 3
!!> GUID('c98e7204-cf44-48b4-8b01-d60ab4049cb1'),INITIAL('0'),PROMPT('loc:tq:Param3:'),HEADER('loc:tq:Param3'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Param4:'),USE(?loc:tq:Param4:Prompt)
! ENTRY(@n-14),USE(loc:tq:Param4)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:tq:Param4)
loc:tq:Param4              LONG !foreign key 4
!!> GUID('2efdebb3-f6b1-4774-96c3-ab2a9f89c43a'),INITIAL('0'),PROMPT('loc:tq:Param4:'),HEADER('loc:tq:Param4'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc:tq:Buffer:'),USE(?loc:tq:Buffer:Prompt)
! TEXT,USE(loc:tq:Buffer),BOXED
[REPORTCONTROLS]
! TEXT,USE(loc:tq:Buffer),BOXED
loc:tq:Buffer              STRING(256) !data buffer
!!> GUID('98e6f2d8-a220-47dd-8b66-b2dadefeb80c'),PROMPT('loc:tq:Buffer:'),HEADER('loc:tq:Buffer'),PICTURE(@s255)
                         END
!!> GUID('67bb17de-baa7-46aa-80b2-5f6ea753d0a7')
[SCREENCONTROLS]
! PROMPT('hWnd:'),USE(?hWnd:Prompt)
! ENTRY(@n6),USE(hWnd)
[REPORTCONTROLS]
! STRING(@n6),USE(hWnd)
hWnd                     USHORT,AUTO
!!> GUID('5a7d73e4-da2e-4c6f-84ab-e2f34fe534b9'),PROMPT('hWnd:'),HEADER('hWnd'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('FilesOpened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('ece1f949-66f7-4cc0-ba02-3298e3a85ecd'),PROMPT('FilesOpened:'),HEADER('FilesOpened'),PICTURE(@n3)
[PROMPTS]
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ButtonAction DEPEND %Control DEFAULT TIMES 85
WHEN  ('') ('No Special Action')
WHEN  ('?Button1_1') ('No Special Action')
WHEN  ('?Button1_10') ('No Special Action')
WHEN  ('?Button1_11') ('No Special Action')
WHEN  ('?Button1_12') ('No Special Action')
WHEN  ('?Button1_13') ('No Special Action')
WHEN  ('?Button1_14') ('No Special Action')
WHEN  ('?Button1_15') ('No Special Action')
WHEN  ('?Button1_16') ('No Special Action')
WHEN  ('?Button1_17') ('No Special Action')
WHEN  ('?Button1_18') ('No Special Action')
WHEN  ('?Button1_19') ('No Special Action')
WHEN  ('?Button1_2') ('No Special Action')
WHEN  ('?Button1_20') ('No Special Action')
WHEN  ('?Button1_21') ('No Special Action')
WHEN  ('?Button1_22') ('No Special Action')
WHEN  ('?Button1_23') ('No Special Action')
WHEN  ('?Button1_24') ('No Special Action')
WHEN  ('?Button1_25') ('No Special Action')
WHEN  ('?Button1_26') ('No Special Action')
WHEN  ('?Button1_27') ('No Special Action')
WHEN  ('?Button1_28') ('No Special Action')
WHEN  ('?Button1_29') ('No Special Action')
WHEN  ('?Button1_3') ('No Special Action')
WHEN  ('?Button1_30') ('No Special Action')
WHEN  ('?Button1_31') ('No Special Action')
WHEN  ('?Button1_32') ('No Special Action')
WHEN  ('?Button1_33') ('No Special Action')
WHEN  ('?Button1_34') ('No Special Action')
WHEN  ('?Button1_35') ('No Special Action')
WHEN  ('?Button1_36') ('No Special Action')
WHEN  ('?Button1_37') ('No Special Action')
WHEN  ('?Button1_4') ('No Special Action')
WHEN  ('?Button1_5') ('No Special Action')
WHEN  ('?Button1_6') ('No Special Action')
WHEN  ('?Button1_7') ('No Special Action')
WHEN  ('?Button1_8') ('No Special Action')
WHEN  ('?Button1_9') ('No Special Action')
WHEN  ('?Button2_1') ('No Special Action')
WHEN  ('?Button2_10') ('No Special Action')
WHEN  ('?Button2_11') ('No Special Action')
WHEN  ('?Button2_12') ('No Special Action')
WHEN  ('?Button2_13') ('No Special Action')
WHEN  ('?Button2_14') ('No Special Action')
WHEN  ('?Button2_15') ('No Special Action')
WHEN  ('?Button2_16') ('No Special Action')
WHEN  ('?Button2_17') ('No Special Action')
WHEN  ('?Button2_18') ('No Special Action')
WHEN  ('?Button2_19') ('No Special Action')
WHEN  ('?Button2_2') ('No Special Action')
WHEN  ('?Button2_20') ('No Special Action')
WHEN  ('?Button2_21') ('No Special Action')
WHEN  ('?Button2_22') ('No Special Action')
WHEN  ('?Button2_23') ('No Special Action')
WHEN  ('?Button2_24') ('No Special Action')
WHEN  ('?Button2_25') ('No Special Action')
WHEN  ('?Button2_26') ('No Special Action')
WHEN  ('?Button2_27') ('No Special Action')
WHEN  ('?Button2_28') ('No Special Action')
WHEN  ('?Button2_29') ('No Special Action')
WHEN  ('?Button2_3') ('No Special Action')
WHEN  ('?Button2_30') ('No Special Action')
WHEN  ('?Button2_31') ('No Special Action')
WHEN  ('?Button2_32') ('No Special Action')
WHEN  ('?Button2_33') ('No Special Action')
WHEN  ('?Button2_34') ('No Special Action')
WHEN  ('?Button2_35') ('No Special Action')
WHEN  ('?Button2_36') ('No Special Action')
WHEN  ('?Button2_37') ('No Special Action')
WHEN  ('?Button2_4') ('No Special Action')
WHEN  ('?Button2_5') ('No Special Action')
WHEN  ('?Button2_6') ('No Special Action')
WHEN  ('?Button2_7') ('No Special Action')
WHEN  ('?Button2_8') ('No Special Action')
WHEN  ('?Button2_9') ('No Special Action')
WHEN  ('?CloseWindow') ('No Special Action')
WHEN  ('?Group2') ('No Special Action')
WHEN  ('?JumpString') ('No Special Action')
WHEN  ('?MinusOneMonth') ('No Special Action')
WHEN  ('?MinusOneWeek') ('No Special Action')
WHEN  ('?MinusOneYear') ('No Special Action')
WHEN  ('?PlusOneMonth') ('No Special Action')
WHEN  ('?PlusOneWeek') ('No Special Action')
WHEN  ('?PlusOneYear') ('No Special Action')
WHEN  ('?Select') ('No Special Action')

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 85
WHEN  ('') ('25000')
WHEN  ('?Button1_1') ('25000')
WHEN  ('?Button1_10') ('25000')
WHEN  ('?Button1_11') ('25000')
WHEN  ('?Button1_12') ('25000')
WHEN  ('?Button1_13') ('25000')
WHEN  ('?Button1_14') ('25000')
WHEN  ('?Button1_15') ('25000')
WHEN  ('?Button1_16') ('25000')
WHEN  ('?Button1_17') ('25000')
WHEN  ('?Button1_18') ('25000')
WHEN  ('?Button1_19') ('25000')
WHEN  ('?Button1_2') ('25000')
WHEN  ('?Button1_20') ('25000')
WHEN  ('?Button1_21') ('25000')
WHEN  ('?Button1_22') ('25000')
WHEN  ('?Button1_23') ('25000')
WHEN  ('?Button1_24') ('25000')
WHEN  ('?Button1_25') ('25000')
WHEN  ('?Button1_26') ('25000')
WHEN  ('?Button1_27') ('25000')
WHEN  ('?Button1_28') ('25000')
WHEN  ('?Button1_29') ('25000')
WHEN  ('?Button1_3') ('25000')
WHEN  ('?Button1_30') ('25000')
WHEN  ('?Button1_31') ('25000')
WHEN  ('?Button1_32') ('25000')
WHEN  ('?Button1_33') ('25000')
WHEN  ('?Button1_34') ('25000')
WHEN  ('?Button1_35') ('25000')
WHEN  ('?Button1_36') ('25000')
WHEN  ('?Button1_37') ('25000')
WHEN  ('?Button1_4') ('25000')
WHEN  ('?Button1_5') ('25000')
WHEN  ('?Button1_6') ('25000')
WHEN  ('?Button1_7') ('25000')
WHEN  ('?Button1_8') ('25000')
WHEN  ('?Button1_9') ('25000')
WHEN  ('?Button2_1') ('25000')
WHEN  ('?Button2_10') ('25000')
WHEN  ('?Button2_11') ('25000')
WHEN  ('?Button2_12') ('25000')
WHEN  ('?Button2_13') ('25000')
WHEN  ('?Button2_14') ('25000')
WHEN  ('?Button2_15') ('25000')
WHEN  ('?Button2_16') ('25000')
WHEN  ('?Button2_17') ('25000')
WHEN  ('?Button2_18') ('25000')
WHEN  ('?Button2_19') ('25000')
WHEN  ('?Button2_2') ('25000')
WHEN  ('?Button2_20') ('25000')
WHEN  ('?Button2_21') ('25000')
WHEN  ('?Button2_22') ('25000')
WHEN  ('?Button2_23') ('25000')
WHEN  ('?Button2_24') ('25000')
WHEN  ('?Button2_25') ('25000')
WHEN  ('?Button2_26') ('25000')
WHEN  ('?Button2_27') ('25000')
WHEN  ('?Button2_28') ('25000')
WHEN  ('?Button2_29') ('25000')
WHEN  ('?Button2_3') ('25000')
WHEN  ('?Button2_30') ('25000')
WHEN  ('?Button2_31') ('25000')
WHEN  ('?Button2_32') ('25000')
WHEN  ('?Button2_33') ('25000')
WHEN  ('?Button2_34') ('25000')
WHEN  ('?Button2_35') ('25000')
WHEN  ('?Button2_36') ('25000')
WHEN  ('?Button2_37') ('25000')
WHEN  ('?Button2_4') ('25000')
WHEN  ('?Button2_5') ('25000')
WHEN  ('?Button2_6') ('25000')
WHEN  ('?Button2_7') ('25000')
WHEN  ('?Button2_8') ('25000')
WHEN  ('?Button2_9') ('25000')
WHEN  ('?CloseWindow') ('25000')
WHEN  ('?Group2') ('25000')
WHEN  ('?JumpString') ('25000')
WHEN  ('?MinusOneMonth') ('25000')
WHEN  ('?MinusOneWeek') ('25000')
WHEN  ('?MinusOneYear') ('25000')
WHEN  ('?PlusOneMonth') ('25000')
WHEN  ('?PlusOneWeek') ('25000')
WHEN  ('?PlusOneYear') ('25000')
WHEN  ('?Select') ('25000')

%ReturnValue FIELD  ()
%ButtonRunName DEPEND %Control DEFAULT TIMES 83
WHEN  ('?Button1_1') ('')
WHEN  ('?Button1_10') ('')
WHEN  ('?Button1_11') ('')
WHEN  ('?Button1_12') ('')
WHEN  ('?Button1_13') ('')
WHEN  ('?Button1_14') ('')
WHEN  ('?Button1_15') ('')
WHEN  ('?Button1_16') ('')
WHEN  ('?Button1_17') ('')
WHEN  ('?Button1_18') ('')
WHEN  ('?Button1_19') ('')
WHEN  ('?Button1_2') ('')
WHEN  ('?Button1_20') ('')
WHEN  ('?Button1_21') ('')
WHEN  ('?Button1_22') ('')
WHEN  ('?Button1_23') ('')
WHEN  ('?Button1_24') ('')
WHEN  ('?Button1_25') ('')
WHEN  ('?Button1_26') ('')
WHEN  ('?Button1_27') ('')
WHEN  ('?Button1_28') ('')
WHEN  ('?Button1_29') ('')
WHEN  ('?Button1_3') ('')
WHEN  ('?Button1_30') ('')
WHEN  ('?Button1_31') ('')
WHEN  ('?Button1_32') ('')
WHEN  ('?Button1_33') ('')
WHEN  ('?Button1_34') ('')
WHEN  ('?Button1_35') ('')
WHEN  ('?Button1_36') ('')
WHEN  ('?Button1_37') ('')
WHEN  ('?Button1_4') ('')
WHEN  ('?Button1_5') ('')
WHEN  ('?Button1_6') ('')
WHEN  ('?Button1_7') ('')
WHEN  ('?Button1_8') ('')
WHEN  ('?Button1_9') ('')
WHEN  ('?Button2_1') ('')
WHEN  ('?Button2_10') ('')
WHEN  ('?Button2_11') ('')
WHEN  ('?Button2_12') ('')
WHEN  ('?Button2_13') ('')
WHEN  ('?Button2_14') ('')
WHEN  ('?Button2_15') ('')
WHEN  ('?Button2_16') ('')
WHEN  ('?Button2_17') ('')
WHEN  ('?Button2_18') ('')
WHEN  ('?Button2_19') ('')
WHEN  ('?Button2_2') ('')
WHEN  ('?Button2_20') ('')
WHEN  ('?Button2_21') ('')
WHEN  ('?Button2_22') ('')
WHEN  ('?Button2_23') ('')
WHEN  ('?Button2_24') ('')
WHEN  ('?Button2_25') ('')
WHEN  ('?Button2_26') ('')
WHEN  ('?Button2_27') ('')
WHEN  ('?Button2_28') ('')
WHEN  ('?Button2_29') ('')
WHEN  ('?Button2_3') ('')
WHEN  ('?Button2_30') ('')
WHEN  ('?Button2_31') ('')
WHEN  ('?Button2_32') ('')
WHEN  ('?Button2_33') ('')
WHEN  ('?Button2_34') ('')
WHEN  ('?Button2_35') ('')
WHEN  ('?Button2_36') ('')
WHEN  ('?Button2_37') ('')
WHEN  ('?Button2_4') ('')
WHEN  ('?Button2_5') ('')
WHEN  ('?Button2_6') ('')
WHEN  ('?Button2_7') ('')
WHEN  ('?Button2_8') ('')
WHEN  ('?Button2_9') ('')
WHEN  ('?CloseWindow') ('')
WHEN  ('?JumpString') ('')
WHEN  ('?MinusOneMonth') ('')
WHEN  ('?MinusOneWeek') ('')
WHEN  ('?MinusOneYear') ('')
WHEN  ('?PlusOneMonth') ('')
WHEN  ('?PlusOneWeek') ('')
WHEN  ('?PlusOneYear') ('')
WHEN  ('?Select') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 83
WHEN  ('?Button1_1') ('')
WHEN  ('?Button1_10') ('')
WHEN  ('?Button1_11') ('')
WHEN  ('?Button1_12') ('')
WHEN  ('?Button1_13') ('')
WHEN  ('?Button1_14') ('')
WHEN  ('?Button1_15') ('')
WHEN  ('?Button1_16') ('')
WHEN  ('?Button1_17') ('')
WHEN  ('?Button1_18') ('')
WHEN  ('?Button1_19') ('')
WHEN  ('?Button1_2') ('')
WHEN  ('?Button1_20') ('')
WHEN  ('?Button1_21') ('')
WHEN  ('?Button1_22') ('')
WHEN  ('?Button1_23') ('')
WHEN  ('?Button1_24') ('')
WHEN  ('?Button1_25') ('')
WHEN  ('?Button1_26') ('')
WHEN  ('?Button1_27') ('')
WHEN  ('?Button1_28') ('')
WHEN  ('?Button1_29') ('')
WHEN  ('?Button1_3') ('')
WHEN  ('?Button1_30') ('')
WHEN  ('?Button1_31') ('')
WHEN  ('?Button1_32') ('')
WHEN  ('?Button1_33') ('')
WHEN  ('?Button1_34') ('')
WHEN  ('?Button1_35') ('')
WHEN  ('?Button1_36') ('')
WHEN  ('?Button1_37') ('')
WHEN  ('?Button1_4') ('')
WHEN  ('?Button1_5') ('')
WHEN  ('?Button1_6') ('')
WHEN  ('?Button1_7') ('')
WHEN  ('?Button1_8') ('')
WHEN  ('?Button1_9') ('')
WHEN  ('?Button2_1') ('')
WHEN  ('?Button2_10') ('')
WHEN  ('?Button2_11') ('')
WHEN  ('?Button2_12') ('')
WHEN  ('?Button2_13') ('')
WHEN  ('?Button2_14') ('')
WHEN  ('?Button2_15') ('')
WHEN  ('?Button2_16') ('')
WHEN  ('?Button2_17') ('')
WHEN  ('?Button2_18') ('')
WHEN  ('?Button2_19') ('')
WHEN  ('?Button2_2') ('')
WHEN  ('?Button2_20') ('')
WHEN  ('?Button2_21') ('')
WHEN  ('?Button2_22') ('')
WHEN  ('?Button2_23') ('')
WHEN  ('?Button2_24') ('')
WHEN  ('?Button2_25') ('')
WHEN  ('?Button2_26') ('')
WHEN  ('?Button2_27') ('')
WHEN  ('?Button2_28') ('')
WHEN  ('?Button2_29') ('')
WHEN  ('?Button2_3') ('')
WHEN  ('?Button2_30') ('')
WHEN  ('?Button2_31') ('')
WHEN  ('?Button2_32') ('')
WHEN  ('?Button2_33') ('')
WHEN  ('?Button2_34') ('')
WHEN  ('?Button2_35') ('')
WHEN  ('?Button2_36') ('')
WHEN  ('?Button2_37') ('')
WHEN  ('?Button2_4') ('')
WHEN  ('?Button2_5') ('')
WHEN  ('?Button2_6') ('')
WHEN  ('?Button2_7') ('')
WHEN  ('?Button2_8') ('')
WHEN  ('?Button2_9') ('')
WHEN  ('?CloseWindow') ('')
WHEN  ('?JumpString') ('')
WHEN  ('?MinusOneMonth') ('')
WHEN  ('?MinusOneWeek') ('')
WHEN  ('?MinusOneYear') ('')
WHEN  ('?PlusOneMonth') ('')
WHEN  ('?PlusOneWeek') ('')
WHEN  ('?PlusOneYear') ('')
WHEN  ('?Select') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ButtonThread DEPEND %Control LONG TIMES 83
WHEN  ('?Button1_1') (0)
WHEN  ('?Button1_10') (0)
WHEN  ('?Button1_11') (0)
WHEN  ('?Button1_12') (0)
WHEN  ('?Button1_13') (0)
WHEN  ('?Button1_14') (0)
WHEN  ('?Button1_15') (0)
WHEN  ('?Button1_16') (0)
WHEN  ('?Button1_17') (0)
WHEN  ('?Button1_18') (0)
WHEN  ('?Button1_19') (0)
WHEN  ('?Button1_2') (0)
WHEN  ('?Button1_20') (0)
WHEN  ('?Button1_21') (0)
WHEN  ('?Button1_22') (0)
WHEN  ('?Button1_23') (0)
WHEN  ('?Button1_24') (0)
WHEN  ('?Button1_25') (0)
WHEN  ('?Button1_26') (0)
WHEN  ('?Button1_27') (0)
WHEN  ('?Button1_28') (0)
WHEN  ('?Button1_29') (0)
WHEN  ('?Button1_3') (0)
WHEN  ('?Button1_30') (0)
WHEN  ('?Button1_31') (0)
WHEN  ('?Button1_32') (0)
WHEN  ('?Button1_33') (0)
WHEN  ('?Button1_34') (0)
WHEN  ('?Button1_35') (0)
WHEN  ('?Button1_36') (0)
WHEN  ('?Button1_37') (0)
WHEN  ('?Button1_4') (0)
WHEN  ('?Button1_5') (0)
WHEN  ('?Button1_6') (0)
WHEN  ('?Button1_7') (0)
WHEN  ('?Button1_8') (0)
WHEN  ('?Button1_9') (0)
WHEN  ('?Button2_1') (0)
WHEN  ('?Button2_10') (0)
WHEN  ('?Button2_11') (0)
WHEN  ('?Button2_12') (0)
WHEN  ('?Button2_13') (0)
WHEN  ('?Button2_14') (0)
WHEN  ('?Button2_15') (0)
WHEN  ('?Button2_16') (0)
WHEN  ('?Button2_17') (0)
WHEN  ('?Button2_18') (0)
WHEN  ('?Button2_19') (0)
WHEN  ('?Button2_2') (0)
WHEN  ('?Button2_20') (0)
WHEN  ('?Button2_21') (0)
WHEN  ('?Button2_22') (0)
WHEN  ('?Button2_23') (0)
WHEN  ('?Button2_24') (0)
WHEN  ('?Button2_25') (0)
WHEN  ('?Button2_26') (0)
WHEN  ('?Button2_27') (0)
WHEN  ('?Button2_28') (0)
WHEN  ('?Button2_29') (0)
WHEN  ('?Button2_3') (0)
WHEN  ('?Button2_30') (0)
WHEN  ('?Button2_31') (0)
WHEN  ('?Button2_32') (0)
WHEN  ('?Button2_33') (0)
WHEN  ('?Button2_34') (0)
WHEN  ('?Button2_35') (0)
WHEN  ('?Button2_36') (0)
WHEN  ('?Button2_37') (0)
WHEN  ('?Button2_4') (0)
WHEN  ('?Button2_5') (0)
WHEN  ('?Button2_6') (0)
WHEN  ('?Button2_7') (0)
WHEN  ('?Button2_8') (0)
WHEN  ('?Button2_9') (0)
WHEN  ('?CloseWindow') (0)
WHEN  ('?JumpString') (0)
WHEN  ('?MinusOneMonth') (0)
WHEN  ('?MinusOneWeek') (0)
WHEN  ('?MinusOneYear') (0)
WHEN  ('?PlusOneMonth') (0)
WHEN  ('?PlusOneWeek') (0)
WHEN  ('?PlusOneYear') (0)
WHEN  ('?Select') (0)

%ButtonParameters DEPEND %Control DEFAULT TIMES 83
WHEN  ('?Button1_1') ('')
WHEN  ('?Button1_10') ('')
WHEN  ('?Button1_11') ('')
WHEN  ('?Button1_12') ('')
WHEN  ('?Button1_13') ('')
WHEN  ('?Button1_14') ('')
WHEN  ('?Button1_15') ('')
WHEN  ('?Button1_16') ('')
WHEN  ('?Button1_17') ('')
WHEN  ('?Button1_18') ('')
WHEN  ('?Button1_19') ('')
WHEN  ('?Button1_2') ('')
WHEN  ('?Button1_20') ('')
WHEN  ('?Button1_21') ('')
WHEN  ('?Button1_22') ('')
WHEN  ('?Button1_23') ('')
WHEN  ('?Button1_24') ('')
WHEN  ('?Button1_25') ('')
WHEN  ('?Button1_26') ('')
WHEN  ('?Button1_27') ('')
WHEN  ('?Button1_28') ('')
WHEN  ('?Button1_29') ('')
WHEN  ('?Button1_3') ('')
WHEN  ('?Button1_30') ('')
WHEN  ('?Button1_31') ('')
WHEN  ('?Button1_32') ('')
WHEN  ('?Button1_33') ('')
WHEN  ('?Button1_34') ('')
WHEN  ('?Button1_35') ('')
WHEN  ('?Button1_36') ('')
WHEN  ('?Button1_37') ('')
WHEN  ('?Button1_4') ('')
WHEN  ('?Button1_5') ('')
WHEN  ('?Button1_6') ('')
WHEN  ('?Button1_7') ('')
WHEN  ('?Button1_8') ('')
WHEN  ('?Button1_9') ('')
WHEN  ('?Button2_1') ('')
WHEN  ('?Button2_10') ('')
WHEN  ('?Button2_11') ('')
WHEN  ('?Button2_12') ('')
WHEN  ('?Button2_13') ('')
WHEN  ('?Button2_14') ('')
WHEN  ('?Button2_15') ('')
WHEN  ('?Button2_16') ('')
WHEN  ('?Button2_17') ('')
WHEN  ('?Button2_18') ('')
WHEN  ('?Button2_19') ('')
WHEN  ('?Button2_2') ('')
WHEN  ('?Button2_20') ('')
WHEN  ('?Button2_21') ('')
WHEN  ('?Button2_22') ('')
WHEN  ('?Button2_23') ('')
WHEN  ('?Button2_24') ('')
WHEN  ('?Button2_25') ('')
WHEN  ('?Button2_26') ('')
WHEN  ('?Button2_27') ('')
WHEN  ('?Button2_28') ('')
WHEN  ('?Button2_29') ('')
WHEN  ('?Button2_3') ('')
WHEN  ('?Button2_30') ('')
WHEN  ('?Button2_31') ('')
WHEN  ('?Button2_32') ('')
WHEN  ('?Button2_33') ('')
WHEN  ('?Button2_34') ('')
WHEN  ('?Button2_35') ('')
WHEN  ('?Button2_36') ('')
WHEN  ('?Button2_37') ('')
WHEN  ('?Button2_4') ('')
WHEN  ('?Button2_5') ('')
WHEN  ('?Button2_6') ('')
WHEN  ('?Button2_7') ('')
WHEN  ('?Button2_8') ('')
WHEN  ('?Button2_9') ('')
WHEN  ('?CloseWindow') ('')
WHEN  ('?JumpString') ('')
WHEN  ('?MinusOneMonth') ('')
WHEN  ('?MinusOneWeek') ('')
WHEN  ('?MinusOneYear') ('')
WHEN  ('?PlusOneMonth') ('')
WHEN  ('?PlusOneWeek') ('')
WHEN  ('?PlusOneYear') ('')
WHEN  ('?Select') ('')

%ButtonRequest DEPEND %Control DEFAULT TIMES 84
WHEN  ('') ('None')
WHEN  ('?Button1_1') ('None')
WHEN  ('?Button1_10') ('None')
WHEN  ('?Button1_11') ('None')
WHEN  ('?Button1_12') ('None')
WHEN  ('?Button1_13') ('None')
WHEN  ('?Button1_14') ('None')
WHEN  ('?Button1_15') ('None')
WHEN  ('?Button1_16') ('None')
WHEN  ('?Button1_17') ('None')
WHEN  ('?Button1_18') ('None')
WHEN  ('?Button1_19') ('None')
WHEN  ('?Button1_2') ('None')
WHEN  ('?Button1_20') ('None')
WHEN  ('?Button1_21') ('None')
WHEN  ('?Button1_22') ('None')
WHEN  ('?Button1_23') ('None')
WHEN  ('?Button1_24') ('None')
WHEN  ('?Button1_25') ('None')
WHEN  ('?Button1_26') ('None')
WHEN  ('?Button1_27') ('None')
WHEN  ('?Button1_28') ('None')
WHEN  ('?Button1_29') ('None')
WHEN  ('?Button1_3') ('None')
WHEN  ('?Button1_30') ('None')
WHEN  ('?Button1_31') ('None')
WHEN  ('?Button1_32') ('None')
WHEN  ('?Button1_33') ('None')
WHEN  ('?Button1_34') ('None')
WHEN  ('?Button1_35') ('None')
WHEN  ('?Button1_36') ('None')
WHEN  ('?Button1_37') ('None')
WHEN  ('?Button1_4') ('None')
WHEN  ('?Button1_5') ('None')
WHEN  ('?Button1_6') ('None')
WHEN  ('?Button1_7') ('None')
WHEN  ('?Button1_8') ('None')
WHEN  ('?Button1_9') ('None')
WHEN  ('?Button2_1') ('None')
WHEN  ('?Button2_10') ('None')
WHEN  ('?Button2_11') ('None')
WHEN  ('?Button2_12') ('None')
WHEN  ('?Button2_13') ('None')
WHEN  ('?Button2_14') ('None')
WHEN  ('?Button2_15') ('None')
WHEN  ('?Button2_16') ('None')
WHEN  ('?Button2_17') ('None')
WHEN  ('?Button2_18') ('None')
WHEN  ('?Button2_19') ('None')
WHEN  ('?Button2_2') ('None')
WHEN  ('?Button2_20') ('None')
WHEN  ('?Button2_21') ('None')
WHEN  ('?Button2_22') ('None')
WHEN  ('?Button2_23') ('None')
WHEN  ('?Button2_24') ('None')
WHEN  ('?Button2_25') ('None')
WHEN  ('?Button2_26') ('None')
WHEN  ('?Button2_27') ('None')
WHEN  ('?Button2_28') ('None')
WHEN  ('?Button2_29') ('None')
WHEN  ('?Button2_3') ('None')
WHEN  ('?Button2_30') ('None')
WHEN  ('?Button2_31') ('None')
WHEN  ('?Button2_32') ('None')
WHEN  ('?Button2_33') ('None')
WHEN  ('?Button2_34') ('None')
WHEN  ('?Button2_35') ('None')
WHEN  ('?Button2_36') ('None')
WHEN  ('?Button2_37') ('None')
WHEN  ('?Button2_4') ('None')
WHEN  ('?Button2_5') ('None')
WHEN  ('?Button2_6') ('None')
WHEN  ('?Button2_7') ('None')
WHEN  ('?Button2_8') ('None')
WHEN  ('?Button2_9') ('None')
WHEN  ('?CloseWindow') ('None')
WHEN  ('?JumpString') ('None')
WHEN  ('?MinusOneMonth') ('None')
WHEN  ('?MinusOneWeek') ('None')
WHEN  ('?MinusOneYear') ('None')
WHEN  ('?PlusOneMonth') ('None')
WHEN  ('?PlusOneWeek') ('None')
WHEN  ('?PlusOneYear') ('None')
WHEN  ('?Select') ('None')

%PreLookupKey DEPEND %Control KEY TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PreLookupField DEPEND %Control COMPONENT TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PostLookupKey DEPEND %Control KEY TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PostLookupField DEPEND %Control COMPONENT TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%PostLookupDuringValidate DEPEND %Control LONG TIMES 5
WHEN  ('') (1)
WHEN  ('?CloseWindow') (1)
WHEN  ('?JumpString') (0)
WHEN  ('?MinusOneWeek') (1)
WHEN  ('?Select') (1)

%PostLookupParams DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CloseWindow') ('')
WHEN  ('?JumpString') ('')
WHEN  ('?MinusOneWeek') ('')
WHEN  ('?Select') ('')

%ChildFile DEPEND %Control FILE TIMES 4
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?Select') ()

%ForceWindowRefresh DEPEND %Control LONG TIMES 4
WHEN  ('?CloseWindow') (0)
WHEN  ('?JumpString') (0)
WHEN  ('?MinusOneWeek') (0)
WHEN  ('?Select') (0)

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 4
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?CloseWindow')TIMES 0
WHEN  ('?JumpString')TIMES 0
WHEN  ('?MinusOneWeek')TIMES 0
WHEN  ('?Select')TIMES 0

%ThreadKey1 DEPEND %Control FIELD TIMES 0

%ThreadKey2 DEPEND %Control FIELD TIMES 0

%ThreadKey3 DEPEND %Control FIELD TIMES 0

%ThreadKey4 DEPEND %Control FIELD TIMES 0

%ThreadBuffer DEPEND %Control FIELD TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ThreadMaxInstance DEPEND %Control DEFAULT TIMES 83
WHEN  ('?Button1_1') ('')
WHEN  ('?Button1_10') ('')
WHEN  ('?Button1_11') ('')
WHEN  ('?Button1_12') ('')
WHEN  ('?Button1_13') ('')
WHEN  ('?Button1_14') ('')
WHEN  ('?Button1_15') ('')
WHEN  ('?Button1_16') ('')
WHEN  ('?Button1_17') ('')
WHEN  ('?Button1_18') ('')
WHEN  ('?Button1_19') ('')
WHEN  ('?Button1_2') ('')
WHEN  ('?Button1_20') ('')
WHEN  ('?Button1_21') ('')
WHEN  ('?Button1_22') ('')
WHEN  ('?Button1_23') ('')
WHEN  ('?Button1_24') ('')
WHEN  ('?Button1_25') ('')
WHEN  ('?Button1_26') ('')
WHEN  ('?Button1_27') ('')
WHEN  ('?Button1_28') ('')
WHEN  ('?Button1_29') ('')
WHEN  ('?Button1_3') ('')
WHEN  ('?Button1_30') ('')
WHEN  ('?Button1_31') ('')
WHEN  ('?Button1_32') ('')
WHEN  ('?Button1_33') ('')
WHEN  ('?Button1_34') ('')
WHEN  ('?Button1_35') ('')
WHEN  ('?Button1_36') ('')
WHEN  ('?Button1_37') ('')
WHEN  ('?Button1_4') ('')
WHEN  ('?Button1_5') ('')
WHEN  ('?Button1_6') ('')
WHEN  ('?Button1_7') ('')
WHEN  ('?Button1_8') ('')
WHEN  ('?Button1_9') ('')
WHEN  ('?Button2_1') ('')
WHEN  ('?Button2_10') ('')
WHEN  ('?Button2_11') ('')
WHEN  ('?Button2_12') ('')
WHEN  ('?Button2_13') ('')
WHEN  ('?Button2_14') ('')
WHEN  ('?Button2_15') ('')
WHEN  ('?Button2_16') ('')
WHEN  ('?Button2_17') ('')
WHEN  ('?Button2_18') ('')
WHEN  ('?Button2_19') ('')
WHEN  ('?Button2_2') ('')
WHEN  ('?Button2_20') ('')
WHEN  ('?Button2_21') ('')
WHEN  ('?Button2_22') ('')
WHEN  ('?Button2_23') ('')
WHEN  ('?Button2_24') ('')
WHEN  ('?Button2_25') ('')
WHEN  ('?Button2_26') ('')
WHEN  ('?Button2_27') ('')
WHEN  ('?Button2_28') ('')
WHEN  ('?Button2_29') ('')
WHEN  ('?Button2_3') ('')
WHEN  ('?Button2_30') ('')
WHEN  ('?Button2_31') ('')
WHEN  ('?Button2_32') ('')
WHEN  ('?Button2_33') ('')
WHEN  ('?Button2_34') ('')
WHEN  ('?Button2_35') ('')
WHEN  ('?Button2_36') ('')
WHEN  ('?Button2_37') ('')
WHEN  ('?Button2_4') ('')
WHEN  ('?Button2_5') ('')
WHEN  ('?Button2_6') ('')
WHEN  ('?Button2_7') ('')
WHEN  ('?Button2_8') ('')
WHEN  ('?Button2_9') ('')
WHEN  ('?CloseWindow') ('')
WHEN  ('?JumpString') ('')
WHEN  ('?MinusOneMonth') ('')
WHEN  ('?MinusOneWeek') ('')
WHEN  ('?MinusOneYear') ('')
WHEN  ('?PlusOneMonth') ('')
WHEN  ('?PlusOneWeek') ('')
WHEN  ('?PlusOneYear') ('')
WHEN  ('?Select') ('')

%ThreadRestoreInstance DEPEND %Control DEFAULT TIMES 83
WHEN  ('?Button1_1') ('First')
WHEN  ('?Button1_10') ('First')
WHEN  ('?Button1_11') ('First')
WHEN  ('?Button1_12') ('First')
WHEN  ('?Button1_13') ('First')
WHEN  ('?Button1_14') ('First')
WHEN  ('?Button1_15') ('First')
WHEN  ('?Button1_16') ('First')
WHEN  ('?Button1_17') ('First')
WHEN  ('?Button1_18') ('First')
WHEN  ('?Button1_19') ('First')
WHEN  ('?Button1_2') ('First')
WHEN  ('?Button1_20') ('First')
WHEN  ('?Button1_21') ('First')
WHEN  ('?Button1_22') ('First')
WHEN  ('?Button1_23') ('First')
WHEN  ('?Button1_24') ('First')
WHEN  ('?Button1_25') ('First')
WHEN  ('?Button1_26') ('First')
WHEN  ('?Button1_27') ('First')
WHEN  ('?Button1_28') ('First')
WHEN  ('?Button1_29') ('First')
WHEN  ('?Button1_3') ('First')
WHEN  ('?Button1_30') ('First')
WHEN  ('?Button1_31') ('First')
WHEN  ('?Button1_32') ('First')
WHEN  ('?Button1_33') ('First')
WHEN  ('?Button1_34') ('First')
WHEN  ('?Button1_35') ('First')
WHEN  ('?Button1_36') ('First')
WHEN  ('?Button1_37') ('First')
WHEN  ('?Button1_4') ('First')
WHEN  ('?Button1_5') ('First')
WHEN  ('?Button1_6') ('First')
WHEN  ('?Button1_7') ('First')
WHEN  ('?Button1_8') ('First')
WHEN  ('?Button1_9') ('First')
WHEN  ('?Button2_1') ('First')
WHEN  ('?Button2_10') ('First')
WHEN  ('?Button2_11') ('First')
WHEN  ('?Button2_12') ('First')
WHEN  ('?Button2_13') ('First')
WHEN  ('?Button2_14') ('First')
WHEN  ('?Button2_15') ('First')
WHEN  ('?Button2_16') ('First')
WHEN  ('?Button2_17') ('First')
WHEN  ('?Button2_18') ('First')
WHEN  ('?Button2_19') ('First')
WHEN  ('?Button2_2') ('First')
WHEN  ('?Button2_20') ('First')
WHEN  ('?Button2_21') ('First')
WHEN  ('?Button2_22') ('First')
WHEN  ('?Button2_23') ('First')
WHEN  ('?Button2_24') ('First')
WHEN  ('?Button2_25') ('First')
WHEN  ('?Button2_26') ('First')
WHEN  ('?Button2_27') ('First')
WHEN  ('?Button2_28') ('First')
WHEN  ('?Button2_29') ('First')
WHEN  ('?Button2_3') ('First')
WHEN  ('?Button2_30') ('First')
WHEN  ('?Button2_31') ('First')
WHEN  ('?Button2_32') ('First')
WHEN  ('?Button2_33') ('First')
WHEN  ('?Button2_34') ('First')
WHEN  ('?Button2_35') ('First')
WHEN  ('?Button2_36') ('First')
WHEN  ('?Button2_37') ('First')
WHEN  ('?Button2_4') ('First')
WHEN  ('?Button2_5') ('First')
WHEN  ('?Button2_6') ('First')
WHEN  ('?Button2_7') ('First')
WHEN  ('?Button2_8') ('First')
WHEN  ('?Button2_9') ('First')
WHEN  ('?CloseWindow') ('First')
WHEN  ('?JumpString') ('First')
WHEN  ('?MinusOneMonth') ('First')
WHEN  ('?MinusOneWeek') ('First')
WHEN  ('?MinusOneYear') ('First')
WHEN  ('?PlusOneMonth') ('First')
WHEN  ('?PlusOneWeek') ('First')
WHEN  ('?PlusOneYear') ('First')
WHEN  ('?Select') ('First')

%ThreadParameter1 DEPEND %Control FIELD TIMES 0

%ThreadParameter2 DEPEND %Control FIELD TIMES 0

%ThreadParameter3 DEPEND %Control FIELD TIMES 0

%ThreadParameter4 DEPEND %Control FIELD TIMES 0

%ThreadParam1 DEPEND %Control FIELD TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ThreadParam2 DEPEND %Control FIELD TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ThreadParam3 DEPEND %Control FIELD TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ThreadParam4 DEPEND %Control FIELD TIMES 83
WHEN  ('?Button1_1') ()
WHEN  ('?Button1_10') ()
WHEN  ('?Button1_11') ()
WHEN  ('?Button1_12') ()
WHEN  ('?Button1_13') ()
WHEN  ('?Button1_14') ()
WHEN  ('?Button1_15') ()
WHEN  ('?Button1_16') ()
WHEN  ('?Button1_17') ()
WHEN  ('?Button1_18') ()
WHEN  ('?Button1_19') ()
WHEN  ('?Button1_2') ()
WHEN  ('?Button1_20') ()
WHEN  ('?Button1_21') ()
WHEN  ('?Button1_22') ()
WHEN  ('?Button1_23') ()
WHEN  ('?Button1_24') ()
WHEN  ('?Button1_25') ()
WHEN  ('?Button1_26') ()
WHEN  ('?Button1_27') ()
WHEN  ('?Button1_28') ()
WHEN  ('?Button1_29') ()
WHEN  ('?Button1_3') ()
WHEN  ('?Button1_30') ()
WHEN  ('?Button1_31') ()
WHEN  ('?Button1_32') ()
WHEN  ('?Button1_33') ()
WHEN  ('?Button1_34') ()
WHEN  ('?Button1_35') ()
WHEN  ('?Button1_36') ()
WHEN  ('?Button1_37') ()
WHEN  ('?Button1_4') ()
WHEN  ('?Button1_5') ()
WHEN  ('?Button1_6') ()
WHEN  ('?Button1_7') ()
WHEN  ('?Button1_8') ()
WHEN  ('?Button1_9') ()
WHEN  ('?Button2_1') ()
WHEN  ('?Button2_10') ()
WHEN  ('?Button2_11') ()
WHEN  ('?Button2_12') ()
WHEN  ('?Button2_13') ()
WHEN  ('?Button2_14') ()
WHEN  ('?Button2_15') ()
WHEN  ('?Button2_16') ()
WHEN  ('?Button2_17') ()
WHEN  ('?Button2_18') ()
WHEN  ('?Button2_19') ()
WHEN  ('?Button2_2') ()
WHEN  ('?Button2_20') ()
WHEN  ('?Button2_21') ()
WHEN  ('?Button2_22') ()
WHEN  ('?Button2_23') ()
WHEN  ('?Button2_24') ()
WHEN  ('?Button2_25') ()
WHEN  ('?Button2_26') ()
WHEN  ('?Button2_27') ()
WHEN  ('?Button2_28') ()
WHEN  ('?Button2_29') ()
WHEN  ('?Button2_3') ()
WHEN  ('?Button2_30') ()
WHEN  ('?Button2_31') ()
WHEN  ('?Button2_32') ()
WHEN  ('?Button2_33') ()
WHEN  ('?Button2_34') ()
WHEN  ('?Button2_35') ()
WHEN  ('?Button2_36') ()
WHEN  ('?Button2_37') ()
WHEN  ('?Button2_4') ()
WHEN  ('?Button2_5') ()
WHEN  ('?Button2_6') ()
WHEN  ('?Button2_7') ()
WHEN  ('?Button2_8') ()
WHEN  ('?Button2_9') ()
WHEN  ('?CloseWindow') ()
WHEN  ('?JumpString') ()
WHEN  ('?MinusOneMonth') ()
WHEN  ('?MinusOneWeek') ()
WHEN  ('?MinusOneYear') ()
WHEN  ('?PlusOneMonth') ()
WHEN  ('?PlusOneWeek') ()
WHEN  ('?PlusOneYear') ()
WHEN  ('?Select') ()

%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?CloseWindow')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?CloseWindow')TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?DateJumpString:Prompt')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupProc ROUTINE
 clear(IndexMonth)                               !fill the days in the month
 DaysInTheMonth[1] = 31                          ! array... used in the
                                                 ! setupcalendar routines
 leaptest = deformat('02/28/' & year(PassedDate),@d2) + 1
 if month(LeapTest) = 3
    DaysInTheMonth[2] = 28
 else
    DaysInTheMonth[2] = 29
 end
 DaysInTheMonth[3] = 31
 DaysInTheMonth[4] = 30
 DaysInTheMonth[5] = 31
 DaysInTheMonth[6] = 30
 DaysInTheMonth[7] = 31
 DaysInTheMonth[8] = 31
 DaysInTheMonth[9] = 30
 DaysInTheMonth[10] = 31
 DaysInTheMonth[11] = 30
 DaysInTheMonth[12] = 31
                                                 !if user is beginning a cal
 if not SaveThisMonth                            ! session... do the initial
    SaveThisMonth = month(PassedDate)            ! calendar entry data setup
 .                                               ! set middle month to passed
                                                 ! date's month
 clear(DayString1)
 MonthByte = month(PassedDate)
 ShortYear = year(PassedDate)
 IndexMonth[1] = MonthByte
 do SetupCalendar1
 clear(DayString2)
! if Month(PassedDate) = 1
!   MonthByte = 12
!   ShortYear = year(PassedDate) - 1
 if Month(PassedDate) = 12
   MonthByte = 1
   ShortYear = year(PassedDate) + 1
 else
!   MonthByte = month(PassedDate) - 1
   MonthByte = month(PassedDate) + 1
   ShortYear = year(PassedDate)
 .
 IndexMonth[2] = MonthByte
 do SetupCalendar2
 ScrnMonthString  = MonthString1
 ScrnMonthString2 = MonthString2
 display
 exit  !** Check EXIT allowed here **
!----------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SelectCode routine
 if keycode() = CtrlRight
    clear(DateConverter)
    DateConverter = PassedDate
    DateConverter += (DaysIntheMonth[IndexMonth[2]] - 1)
    PassedDate = DateConverter
    SaveThisMonth = IndexMonth[3] + 1
    do SetupProc
 elsif keycode() = CtrlLeft
    clear(DateConverter)
    DateConverter = PassedDate
    DateConverter -= (DaysIntheMonth[IndexMonth[2]] + 1)
    PassedDate = DateConverter
    SaveThisMonth = IndexMonth[1] - 1
    do SetupProc
 .
 if selected() < 43 and selected() >= 4
   Index1 = selected() - 3
   if keycode() = RightKey
     if Index1 = 8 or Index1 = 15 |
     or Index1 = 22 or Index1 = 29 |
     or Index1 = 36 or DayString1[Index1] = 1
        clear(DateConverter)
        DateConverter = PassedDate
        DateConverter += (DaysIntheMonth[IndexMonth[2]] - 1)
        PassedDate = DateConverter
        SaveThisMonth = IndexMonth[3] + 1
        do SetupProc
     .
   else
     WorkingDate = DisplayDate1[Index1]
     PassedDate = WorkingDate
  .
  MessageDate = format(DisplayDate1[Index1],@d4)
 elsif Selected() > 40 and Selected() < 94
   Index1 = Selected() - 49
   MessageDate = format(DisplayDate2[Index1],@d4)
   WorkingDate = DisplayDate2[Index1]
   PassedDate = WorkingDate
 .
 window{prop:text} = 'Calendar - [' & MessageDate & ']'
 display()
 exit  !** Check EXIT allowed here **
!----------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupCalendar1 routine
 EXECUTE DATE(MonthByte,1,ShortYear) % 7 + 1     !
   DayOfTheWeek = 1                              !this code sets the start box for
   DayOfTheWeek = 2                              ! filling the calendar based on
   DayOfTheWeek = 3                              ! passed month and year
   DayOfTheWeek = 4                              !
   DayOfTheWeek = 5                              !
   DayOfTheWeek = 6                              !
   DayOfTheWeek = 7                              !
 END
 case DayOfTheWeek
   of 2
    ?Button1_1{PROP:Hide} = True
   of 3
    ?Button1_1{PROP:Hide} = True
    ?Button1_2{PROP:Hide} = True
   of 4
    ?Button1_1{PROP:Hide} = True
    ?Button1_2{PROP:Hide} = True
    ?Button1_3{PROP:Hide} = True
   of 5
    ?Button1_1{PROP:Hide} = True
    ?Button1_2{PROP:Hide} = True
    ?Button1_3{PROP:Hide} = True
    ?Button1_4{PROP:Hide} = True
   of 6
    ?Button1_1{PROP:Hide} = True
    ?Button1_2{PROP:Hide} = True
    ?Button1_3{PROP:Hide} = True
    ?Button1_4{PROP:Hide} = True
    ?Button1_5{PROP:Hide} = True
   of 7
    ?Button1_1{PROP:Hide} = True
    ?Button1_2{PROP:Hide} = True
    ?Button1_3{PROP:Hide} = True
    ?Button1_4{PROP:Hide} = True
    ?Button1_5{PROP:Hide} = True
    ?Button1_6{PROP:Hide} = True
 .
  ?Button1_29{PROP:Hide} = True
  ?Button1_30{PROP:Hide} = True
  ?Button1_31{PROP:Hide} = True
  ?Button1_32{PROP:Hide} = True
  ?Button1_33{PROP:Hide} = True
  ?Button1_34{PROP:Hide} = True
  ?Button1_35{PROP:Hide} = True
  ?Button1_36{PROP:Hide} = True
  ?Button1_37{PROP:Hide} = True
                                         !
 loop DayByte = 1 to DaysInTheMonth[MonthByte]   !this code fills the box text
      DisplayDate1[DayOfTheWeek] = DATE(MonthByte,DayByte,ShortYear)!fill date
      case DayOfTheWeek
        of 1
           ?Button1_1{PROP:Text} = DayByte
           ?Button1_1{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_1,,,000FFFFH)
             select(?Button1_1)
           .
        of 2
           ?Button1_2{PROP:Text} = Daybyte
           ?Button1_2{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_2,,,000FFFFH)
             select(?Button1_2)
           .
        of 3
           ?Button1_3{PROP:Text} = Daybyte
           ?Button1_3{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_3,,,000FFFFH)
             select(?Button1_3)
           .
        of 4
           ?Button1_4{PROP:Text} = DayByte
           ?Button1_4{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_4,,,000FFFFH)
             select(?Button1_4)
           .
        of 5
           ?Button1_5{PROP:Text} = DayByte
           ?Button1_5{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_5,,,000FFFFH)
             select(?Button1_5)
           .
        of 6
           ?Button1_6{PROP:Text} = DayByte
           ?Button1_6{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_6,,,000FFFFH)
             select(?Button1_6)
           .
        of 7
           ?Button1_7{PROP:Text} = DayByte
           ?Button1_7{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_7,,,000FFFFH)
             select(?Button1_7)
           .
        of 8
           ?Button1_8{PROP:Text} = DayByte
           ?Button1_8{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_8,,,000FFFFH)
             select(?Button1_8)
           .
        of 9
           ?Button1_9{PROP:Text} = DayByte
           ?Button1_9{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_9,,,000FFFFH)
             select(?Button1_9)
           .
        of 10
           ?Button1_10{PROP:Text} = DayByte
           ?Button1_10{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_10,,,000FFFFH)
             select(?Button1_10)
           .
        of 11
           ?Button1_11{PROP:Text} = DayByte
           ?Button1_11{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_11,,,000FFFFH)
             select(?Button1_11)
           .
        of 12
           ?Button1_12{PROP:Text} = DayByte
           ?Button1_12{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_12,,,000FFFFH)
             select(?Button1_12)
           .
        of 13
           ?Button1_13{PROP:Text} = DayByte
           ?Button1_13{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_13,,,000FFFFH)
             select(?Button1_13)
           .
        of 14
           ?Button1_14{PROP:Text} = DayByte
           ?Button1_14{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_14,,,000FFFFH)
             select(?Button1_14)
           .
        of 15
           ?Button1_15{PROP:Text} = DayByte
           ?Button1_15{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_15,,,000FFFFH)
             select(?Button1_15)
           .
        of 16
           ?Button1_16{PROP:Text} = DayByte
           ?Button1_16{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_16,,,000FFFFH)
             select(?Button1_16)
           .
        of 17
           ?Button1_17{PROP:Text} = DayByte
           ?Button1_17{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_17,,,000FFFFH)
             select(?Button1_17)
           .
        of 18
           ?Button1_18{PROP:Text} = DayByte
           ?Button1_18{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_18,,,000FFFFH)
             select(?Button1_18)
           .
        of 19
           ?Button1_19{PROP:Text} = DayByte
           ?Button1_19{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_19,,,000FFFFH)
             select(?Button1_19)
           .
        of 20
           ?Button1_20{PROP:Text} = DayByte
           ?Button1_20{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_20,,,000FFFFH)
             select(?Button1_20)
           .
        of 21
           ?Button1_21{PROP:Text} = DayByte
           ?Button1_21{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_21,,,000FFFFH)
             select(?Button1_21)
           .
        of 22
           ?Button1_22{PROP:Text} = DayByte
           ?Button1_22{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_22,,,000FFFFH)
             select(?Button1_22)
           .
        of 23
           ?Button1_23{PROP:Text} = DayByte
           ?Button1_23{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_23,,,000FFFFH)
             select(?Button1_23)
           .
        of 24
           ?Button1_24{PROP:Text} = DayByte
           ?Button1_24{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_24,,,000FFFFH)
             select(?Button1_24)
           .
        of 25
           ?Button1_25{PROP:Text} = DayByte
           ?Button1_25{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_25,,,000FFFFH)
             select(?Button1_25)
           .
        of 26
           ?Button1_26{PROP:Text} = DayByte
           ?Button1_26{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_26,,,000FFFFH)
             select(?Button1_26)
           .
        of 27
           ?Button1_27{PROP:Text} = DayByte
           ?Button1_27{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_27,,,000FFFFH)
             select(?Button1_27)
           .
        of 28
           ?Button1_28{PROP:Text} = DayByte
           ?Button1_28{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_28,,,000FFFFH)
             select(?Button1_28)
           .
        of 29
           ?Button1_29{PROP:Text} = DayByte
           ?Button1_29{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_29,,,000FFFFH)
             select(?Button1_29)
           .
        of 30
           ?Button1_30{PROP:Text} = DayByte
           ?Button1_30{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_30,,,000FFFFH)
             select(?Button1_30)
           .
        of 31
           ?Button1_31{PROP:Text} = DayByte
           ?Button1_31{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_31,,,000FFFFH)
             select(?Button1_31)
           .
        of 32
           ?Button1_32{PROP:Text} = DayByte
           ?Button1_32{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_32,,,000FFFFH)
             select(?Button1_32)
           .
        of 33
           ?Button1_33{PROP:Text} = DayByte
           ?Button1_33{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_33,,,000FFFFH)
             select(?Button1_33)
           .
        of 34
           ?Button1_34{PROP:Text} = DayByte
           ?Button1_34{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_34,,,000FFFFH)
             select(?Button1_34)
           .
        of 35
           ?Button1_35{PROP:Text} = DayByte
           ?Button1_35{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_35,,,000FFFFH)
             select(?Button1_35)
           .
        of 36
           ?Button1_36{PROP:Text} = DayByte
           ?Button1_36{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_36,,,000FFFFH)
             select(?Button1_36)
           .
        of 37
           ?Button1_37{PROP:Text} = DayByte
           ?Button1_37{PROP:Hide} = False
           if DisplayDate1[DayOfTheWeek] = passeddate
             setfont(?Button1_37,,,000FFFFH)
             select(?Button1_37)
           .
      .
      DayOfTheWeek += 1                             ! increment the box
                                                 ! array with the date
 .                                               !end loop
 EXECUTE MonthByte                               !
   MonthString1 = center('January '&ShortYear,17)!
   MonthString1 = center('February '&ShortYear,17)
   MonthString1 = center('March '&ShortYear,17)  !
   MonthString1 = center('April '&ShortYear,17)  !
   MonthString1 = center('May '&ShortYear,17)    !
   MonthString1 = center('June '&ShortYear,17)   !
   MonthString1 = center('July '&ShortYear,17)   !
   MonthString1 = center('August '&ShortYear,17) !
   MonthString1 = center('September '&ShortYear,17)
   MonthString1 = center('October '&ShortYear,17)!
   MonthString1 = center('November '&ShortYear,17)
   MonthString1 = center('December '&ShortYear,17)
 END                                             !
 exit  !** Check EXIT allowed here **
!----------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupCalendar2 routine
 EXECUTE DATE(MonthByte,1,ShortYear) % 7 + 1     !
   DayOfTheWeek = 1                              !this code sets the start box for
   DayOfTheWeek = 2                              ! filling the calendar based on
   DayOfTheWeek = 3                              ! passed month and year
   DayOfTheWeek = 4                              !
   DayOfTheWeek = 5                              !
   DayOfTheWeek = 6                              !
   DayOfTheWeek = 7                              !
 END
 case DayOfTheWeek
   of 2
    ?Button2_1{PROP:Hide} = True
   of 3
    ?Button2_1{PROP:Hide} = True
    ?Button2_2{PROP:Hide} = True
   of 4
    ?Button2_1{PROP:Hide} = True
    ?Button2_2{PROP:Hide} = True
    ?Button2_3{PROP:Hide} = True
   of 5
    ?Button2_1{PROP:Hide} = True
    ?Button2_2{PROP:Hide} = True
    ?Button2_3{PROP:Hide} = True
    ?Button2_4{PROP:Hide} = True
   of 6
    ?Button2_1{PROP:Hide} = True
    ?Button2_2{PROP:Hide} = True
    ?Button2_3{PROP:Hide} = True
    ?Button2_4{PROP:Hide} = True
    ?Button2_5{PROP:Hide} = True
   of 7
    ?Button2_1{PROP:Hide} = True
    ?Button2_2{PROP:Hide} = True
    ?Button2_3{PROP:Hide} = True
    ?Button2_4{PROP:Hide} = True
    ?Button2_5{PROP:Hide} = True
    ?Button2_6{PROP:Hide} = True
 end
 ?Button2_29{PROP:Hide} = True
 ?Button2_30{PROP:Hide} = True
 ?Button2_31{PROP:Hide} = True
 ?Button2_32{PROP:Hide} = True
 ?Button2_33{PROP:Hide} = True
 ?Button2_34{PROP:Hide} = True
 ?Button2_35{PROP:Hide} = True
 ?Button2_36{PROP:Hide} = True
 ?Button2_37{PROP:Hide} = True
 loop DayByte = 1 to DaysInTheMonth[MonthByte]   !this code fills the box text
      DisplayDate2[DayOfTheWeek] = DATE(MonthByte,DayByte,ShortYear)!fill date
      case DayOfTheWeek
        of 1
           ?Button2_1{PROP:Text} = DayByte
           ?Button2_1{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_1,,,000FFFFH)
             select(?Button2_1)
           .
        of 2
           ?Button2_2{PROP:Text} = Daybyte
           ?Button2_2{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_2,,,000FFFFH)
             select(?Button2_2)
           .
        of 3
           ?Button2_3{PROP:Text} = Daybyte
           ?Button2_3{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_3,,,000FFFFH)
             select(?Button2_3)
           .
        of 4
           ?Button2_4{PROP:Text} = DayByte
           ?Button2_4{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_4,,,000FFFFH)
             select(?Button2_4)
           .
        of 5
           ?Button2_5{PROP:Text} = DayByte
           ?Button2_5{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_5,,,000FFFFH)
             select(?Button2_5)
           .
        of 6
           ?Button2_6{PROP:Text} = DayByte
           ?Button2_6{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_6,,,000FFFFH)
             select(?Button2_6)
           .
        of 7
           ?Button2_7{PROP:Text} = DayByte
           ?Button2_7{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_7,,,000FFFFH)
             select(?Button2_7)
           .
        of 8
           ?Button2_8{PROP:Text} = DayByte
           ?Button2_8{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_8,,,000FFFFH)
             select(?Button2_8)
           .
        of 9
           ?Button2_9{PROP:Text} = DayByte
           ?Button2_9{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_9,,,000FFFFH)
             select(?Button2_9)
           .
        of 10
           ?Button2_10{PROP:Text} = DayByte
           ?Button2_10{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_10,,,000FFFFH)
             select(?Button2_10)
           .
        of 11
           ?Button2_11{PROP:Text} = DayByte
           ?Button2_11{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_11,,,000FFFFH)
             select(?Button2_11)
           .
        of 12
           ?Button2_12{PROP:Text} = DayByte
           ?Button2_12{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_12,,,000FFFFH)
             select(?Button2_12)
           .
        of 13
           ?Button2_13{PROP:Text} = DayByte
           ?Button2_13{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_13,,,000FFFFH)
             select(?Button2_13)
           .
        of 14
           ?Button2_14{PROP:Text} = DayByte
           ?Button2_14{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_14,,,000FFFFH)
             select(?Button2_14)
           .
        of 15
           ?Button2_15{PROP:Text} = DayByte
           ?Button2_15{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_15,,,000FFFFH)
             select(?Button2_15)
           .
        of 16
           ?Button2_16{PROP:Text} = DayByte
           ?Button2_16{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_16,,,000FFFFH)
             select(?Button2_16)
           .
        of 17
           ?Button2_17{PROP:Text} = DayByte
           ?Button2_17{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_17,,,000FFFFH)
             select(?Button2_17)
           .
        of 18
           ?Button2_18{PROP:Text} = DayByte
           ?Button2_18{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_18,,,000FFFFH)
             select(?Button2_18)
           .
        of 19
           ?Button2_19{PROP:Text} = DayByte
           ?Button2_19{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_19,,,000FFFFH)
             select(?Button2_19)
           .
        of 20
           ?Button2_20{PROP:Text} = DayByte
           ?Button2_20{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_20,,,000FFFFH)
             select(?Button2_20)
           .
        of 21
           ?Button2_21{PROP:Text} = DayByte
           ?Button2_21{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_21,,,000FFFFH)
             select(?Button2_21)
           .
        of 22
           ?Button2_22{PROP:Text} = DayByte
           ?Button2_22{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_22,,,000FFFFH)
             select(?Button2_22)
           .
        of 23
           ?Button2_23{PROP:Text} = DayByte
           ?Button2_23{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_23,,,000FFFFH)
             select(?Button2_23)
           .
        of 24
           ?Button2_24{PROP:Text} = DayByte
           ?Button2_24{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_24,,,000FFFFH)
             select(?Button2_24)
           .
        of 25
           ?Button2_25{PROP:Text} = DayByte
           ?Button2_25{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_25,,,000FFFFH)
             select(?Button2_25)
           .
        of 26
           ?Button2_26{PROP:Text} = DayByte
           ?Button2_26{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_26,,,000FFFFH)
             select(?Button2_26)
           .
        of 27
           ?Button2_27{PROP:Text} = DayByte
           ?Button2_27{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_27,,,000FFFFH)
             select(?Button2_27)
           .
        of 28
           ?Button2_28{PROP:Text} = DayByte
           ?Button2_28{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_28,,,000FFFFH)
             select(?Button2_28)
           .
        of 29
           ?Button2_29{PROP:Text} = DayByte
           ?Button2_29{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_29,,,000FFFFH)
             select(?Button2_29)
           .
        of 30
           ?Button2_30{PROP:Text} = DayByte
           ?Button2_30{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_30,,,000FFFFH)
             select(?Button2_30)
           .
        of 31
           ?Button2_31{PROP:Text} = DayByte
           ?Button2_31{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_31,,,000FFFFH)
             select(?Button2_31)
           .
        of 32
           ?Button2_32{PROP:Text} = DayByte
           ?Button2_32{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_32,,,000FFFFH)
             select(?Button2_32)
           .
        of 33
           ?Button2_33{PROP:Text} = DayByte
           ?Button2_33{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_33,,,000FFFFH)
             select(?Button2_33)
           .
        of 34
           ?Button2_34{PROP:Text} = DayByte
           ?Button2_34{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_34,,,000FFFFH)
             select(?Button2_34)
           .
        of 35
           ?Button2_35{PROP:Text} = DayByte
           ?Button2_35{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_35,,,000FFFFH)
             select(?Button2_35)
           .
        of 36
           ?Button2_36{PROP:Text} = DayByte
           ?Button2_36{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_36,,,000FFFFH)
             select(?Button2_36)
           .
        of 37
           ?Button2_37{PROP:Text} = DayByte
           ?Button2_37{PROP:Hide} = False
           if DisplayDate2[DayOfTheWeek] = passeddate
             setfont(?Button2_37,,,000FFFFH)
             select(?Button2_37)
           .
      .
      DayOfTheWeek += 1                          ! increment the box
                                                 ! array with the date
 .                                               !end loop
 EXECUTE MonthByte                               !
   MonthString2 = center('January '&ShortYear,17)!
   MonthString2 = center('February '&ShortYear,17)
   MonthString2 = center('March '&ShortYear,17)  !
   MonthString2 = center('April '&ShortYear,17)  !
   MonthString2 = center('May '&ShortYear,17)    !
   MonthString2 = center('June '&ShortYear,17)   !
   MonthString2 = center('July '&ShortYear,17)   !
   MonthString2 = center('August '&ShortYear,17) !
   MonthString2 = center('September '&ShortYear,17)
   MonthString2 = center('October '&ShortYear,17)!
   MonthString2 = center('November '&ShortYear,17)
   MonthString2 = center('December '&ShortYear,17)
 END                                             !
 exit  !** Check EXIT allowed here **
!----------------------------------------------------------------------
[END]
EMBED %AcceptLoopBeforeEventHandling
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
case event()
  of EVENT:AlertKey
     case keycode()
       of MouseLeft2
          do SelectCode
          pDate = PassedDate
          !IslBreak = True
          break
     end
end
[END]
EMBED %ControlPostEventHandling
[INSTANCES]
WHEN '?JumpString'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode(JumpString, PassedDate)
clear(JumpString)
select(?JumpString)
do SetupProc
clear(JumpString)
[END]
[END]
WHEN '?MinusOneWeek'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('-1w', PassedDate)                     !Move the date
clear(JumpString)                               !Clear the screen var
do setupproc
[END]
[END]
WHEN '?PlusOneWeek'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('1w', PassedDate)                     !Move the date
clear(JumpString)                               !Clear the screen var
do setupproc
[END]
[END]
WHEN '?MinusOneMonth'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('-1m', PassedDate)                     !Move the date
clear(JumpString)                               !Clear the screen var
do setupproc
[END]
[END]
WHEN '?PlusOneMonth'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('1m', PassedDate)                      !Move the date
clear(JumpString)                               !Clear the screen var
do SetupProc                                    !Redraw the windows
[END]
[END]
WHEN '?MinusOneYear'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('-1y', PassedDate)                     !Move the date
clear(JumpString)                               !Clear the screen var
do SetupProc                                    !Redraw the windows
[END]
[END]
WHEN '?PlusOneYear'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
JumpCode('1y', PassedDate)                     !Move the date
clear(JumpString)                               !Clear the screen var
do SetupProc                                    !Redraw the windows
[END]
[END]
WHEN '?Select'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
pDate = PassedDate
DO SelectCode
[GROUP]
PRIORITY 4000
INSTANCE 2
[END]
[END]
WHEN '?CloseWindow'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 pDate = OriginalPassedDate
[GROUP]
PRIORITY 4000
INSTANCE 1
[END]
[END]
[END]
EMBED %AcceptLoopAfterFieldHandling
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HoldField = selected()
DO SelectCode
[END]
EMBED %EndOfProcedure
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ALIAS()
[END]
EMBED %AcceptLoopAfterEventHandling
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
if not RedrawButtonsFlag            !this code is here rather than in window-
   RedrawButtonsFlag = 1            ! event handling ( open window ) because
   clear(SaveThisMonth)             ! the template puts a 'select first field'
   alias(RightKey,TabKey)           ! after this code which selects the correct
 ! alias(LeftKey,ShftTab)           ! button.  This embed point runs within the
   alert(CtrlRight)                 ! accept structure and needs a flag to tell
   alert(CtrlLeft)                  ! it when to run.  The flag is cleared when
   do SetupProc                     ! the user press the +/- month, year, week
end
[END]
EMBED %DataSectionBeforeWindow
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LeapTest                long
Holdfield               short
DayString1              STRING(2),DIM(37)
DayString2              STRING(2),DIM(37)
DisplayDate1            DATE,DIM(37)
DisplayDate2            DATE,DIM(37)
MonthString1            STRING(17)
MonthString2            STRING(17)
RedrawButtonsFlag       byte(0)
DateConverter           long
Index1                  short
Index2                  short
CheckDate               short
LeftMonth               byte
RightMonth              byte
Monthbyte               byte                     !
ShortYear               short
IndexMonth              byte,dim(3)
SaveThisMonth           byte
DayByte                 byte
DayOfTheWeek            byte                     !
DaysInTheMonth          short,dim(12)            !
DateArray               date,dim(31)             !
WorkingDate             date
OriginalPassedDate      date
PassedDate              date
SelectedField           short
ArrayIndex              short
[END]
EMBED %ProcedureSetup
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 PassedDate = pDate                 !convert to date field
 OriginalPassedDate = PassedDate    !original passed date is put into
                                    ! passed date field if user escapes without
                                    ! selecting date
 if PassedDate = 0 then             !Default passed date
    PassedDate = today()
 .
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 90
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[INSTANCE]
INSTANCE 2
[CALLS]
JumpCode
[WINDOW]
window  WINDOW(' '),AT(,,264,158),FONT('MS Sans Serif',8,COLOR:Black,FONT:regular),DOUBLE, |
          ALRT(MouseLeft2),CENTER,GRAY,MASK,MSG('Calendar'),SYSTEM
          PROMPT('Date &Jump String:'),AT(4,6,,9),USE(?DateJumpString:Prompt),#LINK(?JumpString), |
            #ORIG(?JumpString:Prompt)
          ENTRY(@s7),AT(66,6,,9),USE(JumpString),UPR,MSG('Jump String'),#LINK(?DateJumpString:Prompt), |
            #ORIG(JumpString)
          GROUP,AT(4,16,96,126),USE(?Group1),BOXED,#ORIG(?Group1)
            BUTTON(' '),AT(11,50,11,11),USE(?Button1_1),#ORIG(?Button1)
            BUTTON(' '),AT(23,50,11,11),USE(?Button1_2),#ORIG(?Button2)
            BUTTON(' '),AT(35,50,11,11),USE(?Button1_3),#ORIG(?Button3)
            BUTTON(' '),AT(47,50,11,11),USE(?Button1_4),#ORIG(?Button4)
            BUTTON(' '),AT(59,50,11,11),USE(?Button1_5),#ORIG(?Button5)
            BUTTON(' '),AT(71,50,11,11),USE(?Button1_6),#ORIG(?Button6)
            BUTTON(' '),AT(83,50,11,11),USE(?Button1_7),#ORIG(?Button7)
            BUTTON(' '),AT(11,65,11,11),USE(?Button1_8),#ORIG(?Button8)
            BUTTON(' '),AT(23,65,11,11),USE(?Button1_9),#ORIG(?Button9)
            BUTTON(' '),AT(35,65,11,11),USE(?Button1_10),#ORIG(?Button10)
            BUTTON(' '),AT(47,65,11,11),USE(?Button1_11),#ORIG(?Button11)
            BUTTON(' '),AT(59,65,11,11),USE(?Button1_12),#ORIG(?Button12)
            BUTTON(' '),AT(71,65,11,11),USE(?Button1_13),#ORIG(?Button13)
            BUTTON(' '),AT(83,65,11,11),USE(?Button1_14),#ORIG(?Button14)
            BUTTON(' '),AT(11,80,11,11),USE(?Button1_15),#ORIG(?Button15)
            BUTTON(' '),AT(23,80,11,11),USE(?Button1_16),#ORIG(?Button16)
            BUTTON(' '),AT(35,80,11,11),USE(?Button1_17),#ORIG(?Button17)
            BUTTON(' '),AT(47,80,11,11),USE(?Button1_18),#ORIG(?Button18)
            BUTTON(' '),AT(59,80,11,11),USE(?Button1_19),#ORIG(?Button19)
            BUTTON(' '),AT(71,80,11,11),USE(?Button1_20),#ORIG(?Button20)
            BUTTON(' '),AT(83,80,11,11),USE(?Button1_21),#ORIG(?Button21)
            BUTTON(' '),AT(11,95,11,11),USE(?Button1_22),#ORIG(?Button22)
            BUTTON(' '),AT(23,95,11,11),USE(?Button1_23),#ORIG(?Button23)
            BUTTON(' '),AT(35,95,11,11),USE(?Button1_24),#ORIG(?Button24)
            BUTTON(' '),AT(47,95,11,11),USE(?Button1_25),#ORIG(?Button25)
            BUTTON(' '),AT(59,95,11,11),USE(?Button1_26),#ORIG(?Button26)
            BUTTON(' '),AT(71,95,11,11),USE(?Button1_27),#ORIG(?Button27)
            BUTTON(' '),AT(83,95,11,11),USE(?Button1_28),#ORIG(?Button28)
            BUTTON(' '),AT(11,110,11,11),USE(?Button1_29),#ORIG(?Button29)
            BUTTON(' '),AT(23,110,11,11),USE(?Button1_30),#ORIG(?Button30)
            BUTTON(' '),AT(35,110,11,11),USE(?Button1_31),#ORIG(?Button31)
            BUTTON(' '),AT(47,110,11,11),USE(?Button1_32),#ORIG(?Button32)
            BUTTON(' '),AT(59,110,11,11),USE(?Button1_33),#ORIG(?Button33)
            BUTTON(' '),AT(71,110,11,11),USE(?Button1_34),#ORIG(?Button34)
            BUTTON(' '),AT(83,110,11,11),USE(?Button1_35),#ORIG(?Button35)
            BUTTON(' '),AT(11,125,11,11),USE(?Button1_36),#ORIG(?Button36)
            BUTTON(' '),AT(23,125,11,11),USE(?Button1_37),#ORIG(?Button37)
            STRING(@s17),AT(8,28),USE(ScrnMonthString),#ORIG(?String1)
            STRING('Su'),AT(12,40),USE(?String3),#ORIG(?String3)
            STRING('Mo'),AT(24,40),USE(?String4),#ORIG(?String4)
            STRING('Tu'),AT(36,40),USE(?String5),#ORIG(?String5)
            STRING('We'),AT(48,40),USE(?String6),#ORIG(?String6)
            STRING('Fr'),AT(73,40),USE(?String8),#ORIG(?String8)
            STRING('Th'),AT(60,40),USE(?String7),#ORIG(?String7)
            STRING('Sa'),AT(84,40),USE(?String9),#ORIG(?String9)
          END
          GROUP,AT(109,16,96,126),USE(?Group2),BOXED,#ORIG(?Group2)
            BUTTON(' '),AT(116,50,11,11),USE(?Button2_1),#ORIG(?Button38)
            BUTTON(' '),AT(128,50,11,11),USE(?Button2_2),#ORIG(?Button39)
            BUTTON(' '),AT(140,50,11,11),USE(?Button2_3),#ORIG(?Button40)
            BUTTON(' '),AT(152,50,11,11),USE(?Button2_4),#ORIG(?Button41)
            BUTTON(' '),AT(164,50,11,11),USE(?Button2_5),#ORIG(?Button42)
            BUTTON(' '),AT(176,50,11,11),USE(?Button2_6),#ORIG(?Button43)
            BUTTON(' '),AT(188,50,11,11),USE(?Button2_7),#ORIG(?Button45)
            BUTTON(' '),AT(116,65,11,11),USE(?Button2_8),#ORIG(?Button44)
            BUTTON(' '),AT(128,65,11,11),USE(?Button2_9),#ORIG(?Button46)
            BUTTON(' '),AT(140,65,11,11),USE(?Button2_10),#ORIG(?Button47)
            BUTTON(' '),AT(152,65,11,11),USE(?Button2_11),#ORIG(?Button48)
            BUTTON(' '),AT(164,65,11,11),USE(?Button2_12),#ORIG(?Button49)
            BUTTON(' '),AT(176,65,11,11),USE(?Button2_13),#ORIG(?Button74)
            BUTTON(' '),AT(188,65,11,11),USE(?Button2_14),#ORIG(?Button50)
            BUTTON(' '),AT(116,80,11,11),USE(?Button2_15),#ORIG(?Button51)
            BUTTON(' '),AT(128,80,11,11),USE(?Button2_16),#ORIG(?Button52)
            BUTTON(' '),AT(140,80,11,11),USE(?Button2_17),#ORIG(?Button53)
            BUTTON(' '),AT(152,80,11,11),USE(?Button2_18),#ORIG(?Button54)
            BUTTON(' '),AT(164,80,11,11),USE(?Button2_19),#ORIG(?Button55)
            BUTTON(' '),AT(176,80,11,11),USE(?Button2_20),#ORIG(?Button56)
            BUTTON(' '),AT(188,80,11,11),USE(?Button2_21),#ORIG(?Button57)
            BUTTON(' '),AT(116,95,11,11),USE(?Button2_22),#ORIG(?Button58)
            BUTTON(' '),AT(128,95,11,11),USE(?Button2_23),#ORIG(?Button59)
            BUTTON(' '),AT(140,95,11,11),USE(?Button2_24),#ORIG(?Button60)
            BUTTON(' '),AT(152,95,11,11),USE(?Button2_25),#ORIG(?Button61)
            BUTTON(' '),AT(164,95,11,11),USE(?Button2_26),#ORIG(?Button62)
            BUTTON(' '),AT(176,95,11,11),USE(?Button2_27),#ORIG(?Button63)
            BUTTON(' '),AT(188,95,11,11),USE(?Button2_28),#ORIG(?Button64)
            BUTTON(' '),AT(116,110,11,11),USE(?Button2_29),#ORIG(?Button65)
            BUTTON(' '),AT(128,110,11,11),USE(?Button2_30),#ORIG(?Button66)
            BUTTON(' '),AT(140,110,11,11),USE(?Button2_31),#ORIG(?Button67)
            BUTTON(' '),AT(152,110,11,11),USE(?Button2_32),#ORIG(?Button68)
            BUTTON(' '),AT(164,110,11,11),USE(?Button2_33),#ORIG(?Button69)
            BUTTON(' '),AT(176,110,11,11),USE(?Button2_34),#ORIG(?Button70)
            BUTTON(' '),AT(188,110,11,11),USE(?Button2_35),#ORIG(?Button71)
            BUTTON(' '),AT(116,125,11,11),USE(?Button2_36),#ORIG(?Button72)
            BUTTON(' '),AT(128,125,11,11),USE(?Button2_37),#ORIG(?Button73)
            STRING(@s17),AT(116,28),USE(ScrnMonthString2),#ORIG(?String2)
            STRING('Su'),AT(116,40),USE(?String10),#ORIG(?String10)
            STRING('Mo'),AT(128,40),USE(?String11),#ORIG(?String11)
            STRING('Tu'),AT(140,40),USE(?String12),#ORIG(?String12)
            STRING('We'),AT(152,40),USE(?String13),#ORIG(?String13)
            STRING('Th'),AT(164,40),USE(?String14),#ORIG(?String14)
            STRING('Fr'),AT(177,40),USE(?String15),#ORIG(?String15)
            STRING('Sa'),AT(188,40),USE(?String16),#ORIG(?String16)
          END
          BUTTON('- Week'),AT(214,18,40,12),USE(?MinusOneWeek),MSG('Minus One Week'),#ORIG(?Button79)
          BUTTON('+ Week'),AT(214,34,40,12),USE(?PlusOneWeek),MSG('Plus One Week'),#ORIG(?Button80)
          BUTTON('- Month'),AT(214,49,40,12),USE(?MinusOneMonth),MSG('Minus One Month'),#ORIG(?Button75)
          BUTTON('+ Month'),AT(214,65,40,12),USE(?PlusOneMonth),MSG('Plus One Month'),#ORIG(?Button76)
          BUTTON('- Year'),AT(214,80,40,12),USE(?MinusOneYear),MSG('Minus One Year'),#ORIG(?Button78)
          BUTTON('+ Year'),AT(214,95,40,12),USE(?PlusOneYear),MSG('Plus One Year'),#ORIG(?Button77)
          BUTTON('Se&lect'),AT(214,117,40,12),USE(?Select),ALRT(EnterKey),KEY(EnterKey),DEFAULT, |
            MSG('Select highlighted date'),#ORIG(?Button82)
          BUTTON('Cl&ose'),AT(214,138,40,12),USE(?CloseWindow),STD(STD:Close),#ORIG(?Button81)
        END

[PROCEDURE]
NAME JumpCode
PROTOTYPE '(STRING JumpString, *DATE ParamDate)'
PARAMETERS '(STRING JumpString, *DATE ParamDate)'
NOEXPORT
[COMMON]
DESCRIPTION 'Date Jump Code'
FROM ABC Source
MODIFIED '2017/06/09' '22:55:41'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Alpha                   string(1)
NextAlpha               string(1)
SecondNegative          byte
FirstNegative           byte
ShortHolder             short
ShortHolderB            short
OneString               string(1)
OneStringB              string(1)
EightString             string(8)
Counter                 byte
OkOne                   byte
OkTwo                   byte
StartMonth              byte
StartYear               short
SaveDate                byte
SaveMonth               byte
SaveYear                short
SaveDay                 date
ReturnDate              date
MonthDays               byte
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 clear(MonthDays)
 clear(Alpha)                                    !clear the local variables
 clear(NextAlpha)
 clear(SecondNegative)
 clear(FirstNegative)
 clear(ShortHolder)
 clear(ShortHolderB)
 clear(OneString)
 clear(OneStringB)
 clear(OkOne)
 clear(Oktwo)
 StartMonth = Month(ParamDate)                  !fill these vars with passed
 StartYear  = year(ParamDate)                   ! date
 ReturnDate = ParamDate
 execute StartMonth
   MonthDays = 31
   MonthDays = 28
   MonthDays = 31
   MonthDays = 30
   MonthDays = 31
   MonthDays = 30
   MonthDays = 31
   MonthDays = 31
   MonthDays = 30
   MonthDays = 31
   MonthDays = 30
   MonthDays = 31
 .                                               !end execute
 if inrange(val(sub(JumpString,1,1)),65,90)      !parse jump parameters into
   Alpha = 1                                     ! local vars if a letter
 .
 Counter = 1
 if Alpha = 1                                    !if the first character was
   loop 8 times                                  ! a letter
       if inrange(val(sub(JumpString,Counter,1)),48,57) !-if a number
          if NextAlpha = 2
             ShortHolderB = clip(left(ShortHolderB)) & sub(JumpString,Counter,1)
          elsif NextAlpha = 1
             ShortHolder = clip(left(ShortHolder)) & sub(JumpString,Counter,1)
          .
       elsif inrange(val(upper(sub(JumpString,Counter,1))),65,90)!if a letter
          if NextAlpha = 0
             OneString = sub(JumpString,Counter,1) !fill the second number
             NextAlpha = 1
          elsif NextAlpha = 1
             OneStringB = sub(JumpString,Counter,1)!fill the second number
             NextAlpha = 2
          .
       elsif sub(JumpString,Counter,1) = '-'
         if NextAlpha = 1
            FirstNegative = 1
         elsif NextAlpha = 2
            SecondNegative = 1
         .
       .
       Counter += 1
   .
 elsif Alpha = 0                                 !if the first character was a number
   loop 8 times
    !  STOP('LONG '&ShortHolder&' LONGB '&ShortHolderB&' S1 '&OneString&' S2 '&OneStringB)
       if inrange(val(sub(JumpString,Counter,1)),48,57)!if a number
          if NextAlpha = 0
             ShortHolder = clip(left(ShortHolder)) & sub(JumpString,Counter,1)
          elsif NextAlpha = 1
             ShortHolderB = clip(left(ShortHolderB)) & sub(JumpString,Counter,1)
          .
       elsif inrange(val(upper(sub(JumpString,Counter,1))),65,90)!if a letter
          if NextAlpha = 0
             OneString = sub(JumpString,Counter,1) !fill the second number
             NextAlpha = 1
          elsif NextAlpha = 1
             OneStringB = sub(JumpString,Counter,1)!fill the second number
             NextAlpha += 1
          .
       elsif sub(JumpString,Counter,1) = '-'
         if NextAlpha = 0
            FirstNegative = 1
         elsif NextAlpha = 1 and len(clip(left(sub(JumpString,Counter + 1,1)))) = 0
            FirstNegative = 1
         elsif NextAlpha = 1 and len(clip(left(sub(JumpString,Counter + 1,1)))) = 1
            SecondNegative = 1
         elsif NextAlpha = 2 and len(clip(left(sub(JumpString,Counter + 1,1)))) = 0
            SecondNegative = 1
         .
       .
       Counter += 1
   .
 .
 if FirstNegative = 1
    ShortHolder = ShortHolder * -1
 .
 if SecondNegative = 1
    ShortHolderB = ShortHolderB * -1
 .
                                                 !
 if len(clip(left(OneString))) > 0               !
   case upper(OneString)                         !
       of 'D'                                    !if the user is jumping days
         ParamDate = ParamDate + ShortHolder   ! add the days to the date
         if ShortHolder < 0                      ! if the jump is - and the
            if StartMonth = 1 and day(ParamDate) = 1!date is 01/01/XX
               StartMonth = 12                   ! change month to december
               StartYear -= 1                    ! and sub 1 from year
            elsif StartMonth > 1 and Day(ParamDate) = 1! if any other month
               StartMonth -= 1                   ! sub 1 from month
            .                                    !
         elsif ShortHolder > 0                   ! if adding days and at the
            if StartMonth = 12 and day(ParamDate) = 31! last day of december
               StartMonth = 1                    ! make month jan and add 1 to
               StartYear += 1                    ! year
            elsif StartMonth <> 12               !if month is not dec or jan
               if MonthDays = day(ParamDate)!if on the last day of the
                  StartMonth += 1                ! month, add 1 to month
               .                                 !endif days...
            .                                    !endif startmonth =
         .                                       !endif shortholder <0
       of 'W'                                    !
         ParamDate = ParamDate + (7 * ShortHolder)
         if StartMonth = 1                       !if month is january
            if ShortHolder < 0                   ! if subt a week, subt a
               if day(ParamDate) < 7            ! year if in 1st week of jan.
                 StartMonth = 12                 !
                 StartYear -= 1                  !
               .                                 !
            elsif ShortHolder > 0 and |          ! elsif add a week, add a
            day(ParamDate) >= 25                ! month if in last week of
               StartMonth += 1                   ! january
            .                                    !endif shortholder > ...
         elsif StarTMonth = 12                   !elsif in december and subt.
            if ShortHolder < 0 and day(ParamDate) <= 7! a week, if in first
               StartMonth -= 1                   ! week, subtract a month
            elsif ShortHolder > 0 and |          ! elsif adding a week and
            day(ParamDate) <= 25                ! in last week, set month to
               StartMonth = 1                    ! january and add year.
               StartYear += 1                    !
            .                                    !
         else                                    !
            if ShortHolder < 0 and day(ParamDate) > 7
               StartMonth -= 1                   !
            elsif ShortHolder > 0                !
               case MonthDays               !
                 of 28                           !
                   if day(ParamDate) >= 22      !
                     StartMonth += 1             !
                   .
                 of 30                           !
                   if day(ParamDate) >= 24      !
                     StartMonth += 1             !
                   .
                 of 31                           !
                   if day(ParamDate) >= 25      !
                     StartMonth += 1             !
                   .
               .                                 !endcase
            .                                    !endif shortholder > ...
         .                                       !endif starmonth =
      of 'M'                                     !
        SaveDate = day(ParamDate)               !
        SaveMonth = month(ParamDate)            !
        SaveYear = year(ParamDate)              !
        if ShortHolder > 0                       !
          if (SaveMonth + ShortHolder) <= 12 and|!
          (SaveMonth + ShortHolder) > 0          !
            SaveDay = date(SaveMonth + ShortHolder,SaveDate,SaveYear)
          elsif SaveMonth + ShortHolder > 12     !
            SaveDay = date(SaveMonth+(ShortHolder - 12),SaveDate,SaveYear+1)
          .                                      !
        else                                     !
           if SaveMonth + ShortHolder <= 0       !
             SaveDay = date(12+(SaveMonth+ShortHolder),SaveDate,SaveYear-1)
           elsif SaveMonth + ShortHolder > 0     !
             SaveDay = date(SaveMonth+ShortHolder,SaveDate,SaveYear)
           .                                     !
        .                                        !
        ParamDate = SaveDay                     !
        if ShortHolder < 0                       !if subtracting
            if StartMonth = 1                    !
               StartMonth = 13 + ShortHolder     !
               StartYear -= 1                    !
            else                                 !
               if StartMonth + ShortHolder >= 1  !if after sub, in same year...
                 StartMonth = StartMonth + ShortHolder
               elsif StartMonth + ShortHolder <= 0
                 StartMonth = 12 + (StartMonth + ShortHolder)
                 StartYear -= 1                  !
               .                                 !startmonth sub the movement
            .                                    !
        elsif ShortHolder > 0                    !
            if StartMonth = 12                   !
               StartMonth = ShortHolder          !
               StartYear += 1                    !
            else                                 !
               if StartMonth + ShortHolder <= 12 !
                 StartMonth = StartMonth + ShortHolder
               elsif StartMonth + ShortHolder > 12
                 StartYear += 1                  !
                 StartMonth = StartMonth + (ShortHolder - 12)
               .                                 !startmonth sub the movement
            .                                    !
        .                                        !
        ParamDate = SaveDay                     !
       of 'Y'                                    !
         ParamDate = ParamDate + (365 * ShortHolder)
         StartYear = StartYear + ShortHolder     !
   .                                             !
 .                                               !
 if len(clip(left(OneStringB))) > 0              !
     case upper(OneStringB)                      !
         of 'D'                                  !
           ParamDate = ParamDate + ShortHolderB!
           if ShortHolderB < 0                   ! if the jump is - and the
              if StartMonth = 1 and day(ParamDate) = 1!date is 01/01/XX
                 StartMonth = 12                 ! change month to december
                 StartYear -= 1                  ! and sub 1 from year
              elsif StartMonth > 1 and Day(ParamDate) = 1! if any other month
                 StartMonth -= 1                 ! sub 1 from month
              .                                  !
           elsif ShortHolderB > 0                ! if adding days and at the
              if StartMonth = 12 and day(ParamDate) = 31! last day of december
                 StartMonth = 1                  ! make month jan and add 1 to
                 StartYear += 1                  ! year
              elsif StartMonth <> 12             !if month is not dec or jan
                 if MonthDays = day(ParamDate)!if on the last day of the
                    StartMonth += 1              ! month, add 1 to month
                 .                               !endif days...
              .                                  !endif startmonth =
           .                                     !endif shortholder <0
         OF 'W'                                  !
           ParamDate = ParamDate + (7 * ShortHolderB)
           if StartMonth = 1                     !if month is january
              if ShortHolder < 0                 ! if subt a week, subt a
                 if day(ParamDate) < 7          ! year if in 1st week of jan.
                   StartMonth = 12               !
                   StartYear -= 1                !
                 .                               !
              elsif ShortHolder > 0 and |        ! elsif add a week, add a
              day(ParamDate) >= 25              ! month if in last week of
                 StartMonth += 1                 ! january
              .                                  !endif shortholder > ...
           elsif StartMonth = 12                 !elsif in december and subt.
              if ShortHolder < 0 and day(ParamDate) <= 7! a week, if in first
                 StartMonth -= 1                 ! week, subtract a month
              elsif ShortHolder > 0 and |        ! elsif adding a week and
              day(ParamDate) <= 25              ! in last week, set month to
                 StartMonth = 1                  ! january and add year.
                 StartYear += 1                  !
              .                                  !
           else                                  !
              if ShortHolder < 0 and day(ParamDate) > 7
                 StartMonth -= 1                 !
              elsif ShortHolder > 0              !
                 case MonthDays             !
                   of 28                         !
                     if day(ParamDate) >= 22    !
                       StartMonth += 1           !
                     .
                   of 30                         !
                     if day(ParamDate) >= 24    !
                       StartMonth += 1           !
                     .
                   of 31                         !
                     if day(ParamDate) >= 25    !
                       StartMonth += 1           !
                     .
                 .                               !endcase
              .                                  !endif shortholder > ...
           .                                     !endif starmonth =
         of 'M'                                  !
          SaveDate = day( ParamDate )           !
          SaveMonth = month( ParamDate )        !
          SaveYear = year( ParamDate )          !
          if ShortHolderB > 0                    !
            if (SaveMonth + ShortHolderB) <= 12 |!
            and (SaveMonth + ShortHolderB) > 0   !
              SaveDay = date(SaveMonth + ShortHolderB,SaveDate,SaveYear)
            elsif SaveMonth + ShortHolderB > 12  !
              SaveDay = date(SaveMonth+(ShortHolderB - 12),SaveDate,SaveYear+1)
            .                                    !
          else                                   !
             if SaveMonth + ShortHolderB <= 0    !
               SaveDay = date(12+(SaveMonth+ShortHolderB),SaveDate,SaveYear-1)
             elsif SaveMonth + ShortHolderB > 0  !
               SaveDay = date(SaveMonth+ShortHolderB,SaveDate,SaveYear)
             .                                   !
          .                                      !
          ParamDate = SaveDay                   !
          if ShortHolderB < 0                    !if subtracting
              if StartMonth = 1                  !
                 StartMonth = 13 + ShortHolderB  !
                 StartYear -= 1                  !
              else                               !
                 if StartMonth + ShortHolderB >= 1!if after sub, in same year...
                   StartMonth = StartMonth + ShortHolderB
                 elsif StartMonth + ShortHolderB <= 0
                   StartMonth = 12 + (StartMonth + ShortHolderB)
                   StartYear -= 1                !
                 .                               !startmonth sub the movement
              .                                  !
          elsif ShortHolderB > 0                 !
            if StartMonth = 12                   !
               StartMonth = ShortHolderB         !
               StartYear += 1                    !
            else                                 !
               if StartMonth + ShortHolderB <= 12!
                 StartMonth = StartMonth + ShortHolderB
               elsif StartMonth + ShortHolderB > 12
                 StartYear += 1                  !
                 StartMonth = StartMonth + (ShortHolderB - 12)
               .                                 !startmonth sub the movement
            .                                    !
          .                                      !
         of 'Y'                                  !
          ParamDate = ParamDate + (365 * ShortHolderB)
          StartYear = StartYear + ShortHolderB   !
     .                                           !
 .
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:14'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME WordWrapText
PROTOTYPE '(*CSTRING TextToWrap, *QUEUE TextQueue, *STRING TextQueueField, BYTE TextLength, BYTE TextLines)'
PARAMETERS '(*CSTRING TextToWrap, *QUEUE TextQueue, *STRING TextQueueField, BYTE TextLength, BYTE TextLines)'
[COMMON]
DESCRIPTION 'Word Wrap Text'
FROM ABC Source
MODIFIED '2017/06/09' '23:00:10'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
StartOfLine          LONG
EndOfLine            LONG
CRLF                 LONG
LineNo               LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 free( TextQueue )
 StartOfLine = 1
 loop LineNo = 1 to TextLines
   EndOfLine = StartOfLine + TextLength
   CRLF = instring('<13,10>',TextToWrap,1,StartOfLine)
   IF CRLF
      TextQueueField = sub(TextToWrap,StartOfLine,CRLF-StartOfLine)
      StartOfLine = CRLF + 2
   ELSE
      IF TextToWrap[StartOfLine+TextLength] = ' '
         TextQueueField = left(sub(TextToWrap,StartOfLine,TextLength))
         StartOfLine += TextLength
      ELSE
         LOOP EndOfLine = StartOfLine+TextLength TO StartOfLine BY -1
            IF TextToWrap[EndOfLine] = '<0>' |
            OR TextToWrap[EndOfLine] = ' '
               BREAK
            END
         END
         IF EndOfLine = StartOfLine
            EndOfLine = StartOfLine+TextLength
         END
         TextQueueField = left(sub(TextToWrap,StartOfLine,EndOfLine-StartOfLine))
         StartOfLine = EndOfLine+1
      END
   END
   add( TextQueue )
 END
[END]
[END]
[PROCEDURE]
NAME FullName
PROTOTYPE '(*CSTRING FName, *CSTRING MI, *CSTRING LName, *CSTRING FullName)'
PARAMETERS '(*CSTRING FName, *CSTRING MI, *CSTRING LName, *CSTRING FullName)'
[COMMON]
DESCRIPTION 'Full Name'
FROM ABC Source
MODIFIED '2017/06/09' '22:53:18'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 if len(clip(left( MI ))) > 0
    FullName = clip(left(FName)) & ' ' & clip(left(MI)) & '. ' & clip(left(LName))
 else
    FullName = clip(left(FName)) & ' ' & clip(left(LName))
 .
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
FullName
[PROCEDURE]
NAME ProperString
PROTOTYPE '(*CSTRING PassedString)'
PARAMETERS '(*CSTRING PassedString)'
[COMMON]
DESCRIPTION 'Proper Passed String'
FROM ABC Source
MODIFIED '2017/06/09' '22:56:40'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
StringPosition              short               !String Position
StringLength                short               !String Length
StringHolder                string(255)         !String Holder
UpperFlag                   byte                !Upper Flag
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 StringHolder = PassedString
 StringLength = len(clip(left( StringHolder )))
 StringPosition = 1
 UpperFlag = True
 loop
    if StringHolder[StringPosition] <> ' ' then
       if UpperFlag = True then
          UpperFlag = False
          StringHolder[StringPosition] = upper( StringHolder[StringPosition] )
       else
          StringHolder[StringPosition] = lower( StringHolder[StringPosition] )
       .
    else
       UpperFlag = True
    .
    StringPosition += 1
    if StringPosition > StringLength then
       break
    .
 .
 PassedString = StringHolder[1 : len(PassedString)]
! RETURN Level:Fatal
[END]
[END]
[CALLS]
FullName
[PROCEDURE]
NAME RemoveCharacter
PROTOTYPE '(STRING PassedCharacter, *CSTRING PassedString)'
PARAMETERS '(STRING PassedCharacter, *CSTRING PassedString)'
[COMMON]
DESCRIPTION 'Remove A Character From A Passed String'
FROM ABC Source
MODIFIED '2017/06/09' '22:57:21'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
StringPosition              short               !String Position
StringLength                short               !String Length
StringHolder                string(255)         !String Holder
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 StringHolder = PassedString
 StringLength = len(clip(left( StringHolder )))
 StringPosition = 1
 loop
    if StringHolder[StringPosition] = PassedCharacter then
       if StringPosition = 1 then
          StringHolder = StringHolder[2 : StringLength]
          StringLength = len(clip(left( StringHolder )))
          StringPosition = 0
       elsif StringPosition = StringLength then
             StringHolder = StringHolder[1 : (StringPosition - 1)]
             StringLength = len(clip(left( StringHolder )))
             StringPosition = 0
       else
          StringHolder = StringHolder[1 : (StringPosition - 1)] & StringHolder[(StringPosition + 1) : StringLength]
          StringLength = len(clip(left( StringHolder )))
          StringPosition = 0
       .
    .
    StringPosition += 1
    if StringPosition > StringLength then
       break
    .
 .
 PassedString = StringHolder
! RETURN Level:Fatal
[END]
[END]
[CALLS]
FullName
[PROCEDURE]
NAME SplitFullName
PROTOTYPE '(*CSTRING szFullName, *CSTRING szFirstName, *CSTRING szMiddleName, *CSTRING szLastName)'
PARAMETERS '(*CSTRING szFullName, *CSTRING szFirstName, *CSTRING szMiddleName, *CSTRING szLastName)'
[COMMON]
DESCRIPTION 'Split Fullname into Component Names'
FROM ABC Source
MODIFIED '2017/06/09' '22:58:01'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  I = 1
  J = LEN(CLIP(szFullName))
  K = INSTRING(' ',szFullname,1,I)
  LOOP WHILE K <> 0
     TokenQ.Token = szFullName[I : K-1]
     IF RECORDS(TokenQ) = 0
        CASE UPPER(TokenQ.Token)
        OF   'DE'       |
        OROF 'LA'       |
        OROF 'LE'       |
        OROF 'MAC'      |
        OROF 'MC'       |
        OROF 'ST'       |
        OROF 'VAN'      |
        OROF 'VANDE'    |
        OROF 'VANDER'   |
        OROF 'VAN DER'  |
        OROF 'VON'
           K = INSTRING(' ',szFullname,1,K+1)
        ELSE
           ADD(TokenQ)
           I = K+1
           K = INSTRING(' ',szFullname,1,I)
        END
     ELSE
        ADD(TokenQ)
        I = K+1
        K = INSTRING(' ',szFullname,1,I)
     END
  END
  IF I < J
     TokenQ.Token = szFullName[I : J]
     ADD(TokenQ)
  END

  GET(TokenQ,1)
  IF ~ERRORCODE()
     szLastName = TokenQ.Token
     IF szLastName[LEN(szLastName)] = ','
        szLastName[LEN(szLastName)] = '<0>'
     END
  ELSE
     szLastName = ''
  END

  GET(TokenQ,2)
  IF ~ERRORCODE()
     szFirstName = TokenQ.Token
     IF szFirstName[LEN(szFirstName)] = ','
        szFirstName[LEN(szFirstName)] = '<0>'
     END
  ELSE
     szFirstName = ''
  END

  szMid = ''
  LOOP I = 3 TO RECORDS(TokenQ)
     GET(TokenQ,I)
     szMid = szMid & ' ' & TokenQ.Token
  END
  szMid = CLIP(LEFT(szMid))
  szMiddleName = szMid[1]

  RETURN
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
!This procedure takes a string in 'LASTNAME FIRSTNAME MIDDLENAME' format
!And returns the component parts.

TokenQ  QUEUE
Token     CSTRING(61)
        END
I       LONG,AUTO
J       LONG,AUTO
K       LONG,AUTO
szMid   CSTRING(256)
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:22'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME WAVControl
PROTOTYPE '(STRING ControlType, USHORT DeviceID, ULONG CallingWindow, *CSTRING WAVFileName, <<*ULONG PassedPosition>),USHORT'
PARAMETERS '(STRING ControlType, USHORT DeviceID, ULONG CallingWindow, *CSTRING WAVFileName, <<*ULONG PassedPosition>) !,USHORT'
[COMMON]
DESCRIPTION 'Control WAV File'
FROM ABC Source
MODIFIED '2017/06/19' '15:05:46'
[DATA]
[SCREENCONTROLS]
! PROMPT('Return Value:'),USE(?ReturnValue:Prompt)
! ENTRY(@n6),USE(ReturnValue)
[REPORTCONTROLS]
! STRING(@n6),USE(ReturnValue)
ReturnValue              USHORT !Return Value
!!> GUID('41fc97c0-e7f7-4094-bb58-ebe112b429a0'),PROMPT('Return Value:'),HEADER('Return Value'),PICTURE(@n6)
[PROMPTS]
%ReturnValue FIELD  (ReturnValue)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MCIRequest                  cstring(128)        !MCI String Request
MCIReturnValue              cstring(128)        !MCI Return Value
MCIErrorString              cstring(128)        !MCI Error String
DeviceAlias                 cstring(21)         !MCI Alias
DeviceType                  cstring(21)         !MCI Device Type
WAVFileLength               ulong               !WAV File Length
OMIT('FREDOMIT')
AddressHolder               ulong               !Parameter Block Address Holder
DeviceAlias                 cstring(20)         !MCI Alias
DeviceType                  cstring(20)         !MCI Device Type
Result                      ushort              !Result from function call
SoundFileHandle             short               !Sound File Handle
O_RDWR                      equate(2)           !Create Parameter
! MCI command message identifiers
MCI_OPEN                         equate(803H)
MCI_CLOSE                        equate(804H)
MCI_ESCAPE                       equate(805H)
MCI_PLAY                         equate(806H)
MCI_SEEK                         equate(807H)
MCI_STOP                         equate(808H)
MCI_PAUSE                        equate(809H)
MCI_INFO                         equate(80AH)
MCI_GETDEVCAPS                   equate(80BH)
MCI_SPIN                         equate(80CH)
MCI_SET                          equate(80DH)
MCI_STEP                         equate(80EH)
MCI_RECORD                       equate(80FH)
MCI_SYSINFO                      equate(810H)
MCI_BREAK                        equate(811H)
MCI_SOUND                        equate(812H)
MCI_SAVE                         equate(813H)
MCI_STATUS                       equate(814H)
MCI_CUE                          equate(830H)
MCI_REALIZE                      equate(840H)
MCI_WINDOW                       equate(841H)
MCI_PUT                          equate(842H)
MCI_WHERE                        equate(843H)
MCI_FREEZE                       equate(844H)
MCI_UNFREEZE                     equate(845H)
MCI_LOAD                         equate(850H)
MCI_CUT                          equate(851H)
MCI_COPY                         equate(852H)
MCI_PASTE                        equate(853H)
MCI_UPDATE                       equate(854H)
MCI_RESUME                       equate(855H)
MCI_DELETE                       equate(856H)
! Flags for dwFlags parameter of MCI_OPEN command message
MCI_OPEN_SHAREABLE               equate(100H)
MCI_OPEN_ELEMENT                 equate(200H)
MCI_OPEN_ALIAS                   equate(400H)
MCI_OPEN_ELEMENT_ID              equate(800H)
MCI_OPEN_TYPE_ID                 equate(1000H)
MCI_OPEN_TYPE                    equate(2000H)
! Common flags for dwFlags parameter of MCI command messages
MCI_NOTIFY                  equate(1H)
MCI_WAIT                    equate(2H)
MCI_FROM                    equate(4H)
MCI_TO                      equate(8H)
MCI_TRACK                   equate(10H)
MCI_WAVE_OPEN_BUFFER        equate(10000h)
! Common flags for dwFlags parameter of MCI_SEEK messages
MCI_SEEK_TO_START           equate(100h)
MCI_SEEK_TO_END             equate(200h)
! Flags for dwFlags parameter of MCI_RECORD command message
MCI_RECORD_INSERT           equate(100H)
MCI_RECORD_OVERWRITE        equate(200H)
! Flags for dwFlags parameter of MCI_SAVE command message
MCI_SAVE_FILE               equate(100H)
!Flags for dwFlags parameter of MCI_STATUS command message
MCI_STATUS_ITEM             equate(100h)
MCI_STATUS_START            equate(200h)
!Flags for dwItem field of the MCI_STATUS_PARMS parameter block
MCI_STATUS_LENGTH           equate(1H)
MCI_STATUS_POSITION         equate(2H)
MCI_STATUS_NUMBER_OF_TRACKS equate(3H)
MCI_STATUS_MODE             equate(4H)
MCI_STATUS_MEDIA_PRESENT    equate(5H)
MCI_STATUS_TIME_FORMAT      equate(6H)
MCI_STATUS_READY            equate(7H)
MCI_STATUS_CURRENT_TRACK    equate(8H)
MCIWaveOpenParams          group, pre(mop)
Callback                      ulong
DeviceID                      ushort
Reserved0                     ushort
DeviceType                    ulong
ElementName                   ulong
Alias                         ulong
BufferSeconds                 ulong
                           .
MCIWavePlayParams          group, pre(mpp)
Callback                     ulong
PlayFrom                     ulong
PlayTo                       ulong
                           .
MCIWaveSeekParams          group, pre(msp)
Callback                     ulong
SeekTo                       ulong
                           .
!Parameter block for MCI_RECORD command message
MCIWaveRecordParams        group, pre(mrp)
Callback                     ulong
RecordFrom                   ulong
RecordTo                     ulong
                           .
!Parameter block for MCI_SAVE command message
MCIWaveSaveParams           group, pre(map)
Callback                      ulong
Filename                      ulong
                            .
!Parameter block for MCI_STATUS command message
MCIWaveStatusParams         group,pre(mst)
Callback                      ulong
FunctionReturn                ulong
Item                          ulong
Track                         ulong
                            .
!Generic parameter block for MCI command messages with no special parameters
MCIWaveGenericParams        group,pre(mgp)
Callback                      ulong
                            .
! FREDOMIT
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 ReturnValue = 0
 DeviceAlias = 'TRIMWAVE'
 DeviceType = 'waveaudio'
 clear( MCIErrorString )
 clear( MCIReturnValue )
 case upper(clip(left( ControlType )))
      of 'OPEN'
         MCIRequest = 'open ' & clip(left( WAVFileName ))
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
      of 'PLAY'
         if ~omitted(5)
            MCIRequest = 'play ' & clip(left( WAVFileName )) & ' from ' & PassedPosition
         else
            MCIRequest = 'play ' & clip(left( WAVFileName ))
         .
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
      of 'POSITION'
         MCIRequest = 'status ' & clip(left( WAVFileName )) & ' position'
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
         if ~omitted(5)
            PassedPosition = mciReturnValue
         .
      of 'SEEK'
         if ~omitted(5)
            MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to ' & PassedPosition
         else
            MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to 1'
         .
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
      of 'REWIND'
         MCIRequest = 'status ' & clip(left( WAVFileName )) & ' position'
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
         if mciReturnValue - 5000 <= 0 then
            mciReturnValue = 1
         else
            mciReturnValue = mciReturnValue - 5000
         .
         MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to ' & mciReturnValue
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
      of 'FAST FORWARD'
         MCIRequest = 'status ' & clip(left( WAVFileName )) & ' length'
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
         WAVFileLength = mciReturnValue
         MCIRequest = 'status ' & clip(left( WAVFileName )) & ' position'
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
         if mciReturnValue + 5000 >= WAVFileLength then
            mciReturnValue = WAVFileLength
         else
            mciReturnValue = mciReturnValue + 5000
         .
         MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to ' & mciReturnValue
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
      of 'TO TOP'
         MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to 1'
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
      of 'TO END'
         MCIRequest = 'seek ' & clip(left( WAVFileName )) & ' to end'
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
      of 'RECORD'
         MCIRequest = 'record ' & clip(left( WAVFileName )) & ' overwrite'
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
 OMIT('FREDOMIT')
         clear(MCIWaveRecordParams)
         mrp:CallBack = CallingWindow
         AddressHolder = address( MCIWaveRecordParams )
         Result = mciSendCommand( DeviceId, MCI_RECORD, MCI_NOTIFY, AddressHolder )
         if Result <> 0
            x# = MESSAGE('MCI unable to record WAV file.  '|
                 &'Errorcode ' & Result & '.  Press Ok to continue.',|
                 'MCI Record Error',Icon:Exclamation,Button:OK,Button:OK,0)
         .
         ReturnValue = DeviceId
! FREDOMIT
      of 'SAVE'
         MCIRequest = 'save ' & clip(left( WAVFileName ))
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
 OMIT('FREDOMIT')
         clear(MCIWaveSaveParams)
         map:CallBack = CallingWindow
         map:FileName = address(WAVFileName)
         AddressHolder = address( MCIWaveSaveParams )
         Result = mciSendCommand( DeviceId, MCI_SAVE, MCI_SAVE_FILE + MCI_WAIT, AddressHolder )
         if Result <> 0
            x# = MESSAGE('MCI unable to save WAV file.  '|
                 &'Errorcode ' & Result & '.  Press Ok to continue.',|
                 'MCI Save Error',Icon:Exclamation,Button:OK,Button:OK,0)
         .
         ReturnValue = DeviceId
! FREDOMIT
      of 'PAUSE'
         MCIRequest = 'pause ' & clip(left( WAVFileName ))
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
      of 'RESUME'
         MCIRequest = 'resume ' & clip(left( WAVFileName ))
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
      of 'CLOSE'
         MCIRequest = 'close ' & clip(left( WAVFileName ))
         mciErrorString = mciSendString( mciRequest, mciReturnValue, 128, CallingWindow )
      of 'STOP'
         MCIRequest = 'stop ' & clip(left( WAVFileName ))
         MCIErrorString = MCISendString( MCIRequest, MCIReturnValue, 128, CallingWindow )
 .
 if MCIErrorString <> '0' and clip(left(MCIErrorString)) <> ''
    if MCIErrorString = '263' or MCIErrorString = '265' or MCIErrorString = '282' or MCIErrorString = '302'
       ReturnValue = 1
    else
       ReturnValue = 0
       x# = MESSAGE('MCI Error: ' & MCIErrorString |
            & '.  Press Ok to continue.',|
            'MCI Error',Icon:Exclamation,Button:OK,Button:OK,0)
    .
 else
    case clip(left( MCIReturnValue ))
         of 'true'
            ReturnValue = 1
         of 'false'
            ReturnValue = 0
         of ''
         orof '0'
         orof '1'
         orof '2'
              ReturnValue = 1
         else
            ReturnValue = MCIReturnValue
    .
 .
 RETURN Level:Fatal
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:34'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME BodySurface
PROTOTYPE '(REAL PassedHeight, REAL PassedWeight),REAL'
PARAMETERS '(REAL PassedHeight, REAL PassedWeight) !,REAL'
[COMMON]
DESCRIPTION 'Calculate Body Surface'
FROM ABC Source
MODIFIED '2017/06/09' '22:49:53'
[DATA]
[SCREENCONTROLS]
! PROMPT('Return Value:'),USE(?ReturnValue:Prompt)
! ENTRY(@n10.2),USE(ReturnValue),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n10.2),USE(ReturnValue)
ReturnValue              REAL !Function Return Value
!!> GUID('ee0e9cca-efb6-4f10-ba59-97730ac715bd'),PROMPT('Return Value:'),HEADER('Return Value'),MESSAGE('Function Return Value'),PICTURE(@n10.2)
[PROMPTS]
%ReturnValue FIELD  (ReturnValue)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 ReturnValue = ((PassedHeight^.725)*(PassedWeight^.425))*.007184
! ReturnValue = ((PassedHeight^.3964)*(PassedWeight^.5378))*.024265
 RETURN Level:Fatal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:39'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME C3ResizeControls
PROTOTYPE '(SHORT AnchorCTL, SHORT Resize:CWidth, SHORT Resize:CHeight)'
PARAMETERS '(SHORT AnchorCTL, SHORT Resize:CWidth, SHORT Resize:CHeight)'
[COMMON]
DESCRIPTION 'Resize Controls On Window'
FROM ABC Source
MODIFIED '2017/06/09' '22:50:11'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DeltaX          SHORT,AUTO               ! Change in X coordinate
DeltaY          SHORT,AUTO               ! Change in Y coordinate
AnchorX         SHORT,AUTO               ! Coordinates of Anchor
AnchorY         SHORT,AUTO
AnchorWidth     SHORT,AUTO               ! Width and height of anchor
AnchorHeight    SHORT,AUTO
Ctl             SHORT,AUTO               ! Control being processed
CtlX            SHORT,AUTO               ! Coordinates of control
CtlY            SHORT,AUTO
CtlWidth        SHORT,AUTO               ! Width and height of control
CtlHeight       SHORT,AUTO
ccode           LONG,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 DeltaX = target{PROP:Width} - Resize:CWidth
 DeltaY = target{PROP:Height} - Resize:CHeight
 getposition(AnchorCtl,AnchorX,AnchorY,AnchorWidth,AnchorHeight)
 loop Ctl = firstfield() to lastfield()
     if Ctl{PROP:Type} = CREATE:Tab
        cycle
     end
     getposition(Ctl,CtlX,CtlY,CtlWidth,CtlHeight)
     if CtlX = AnchorX and CtlY = AnchorY
        case Ctl{PROP:Type}
        of   CREATE:List
        orof CREATE:Sheet
!             setposition(Ctl,CtlX,CtlY,CtlWidth+DeltaX,CtlHeight+DeltaY)
             ctl{PROP:Width} = CtlWidth+DeltaX
             ctl{PROP:Height} = CtlHeight+DeltaY
        end
     elsif CtlX >= AnchorX + AnchorWidth
!           setposition(Ctl,CtlX+DeltaX,CtlY,CtlWidth,CtlHeight)
           ctl{prop:xpos} = CtlX+DeltaX
     elsif CtlX >= AnchorX and CtlY >= AnchorY
           case Ctl{PROP:Type}
           of   CREATE:List
           orof CREATE:Sheet
!            setposition(Ctl,CtlX,CtlY,CtlWidth+DeltaX,CtlHeight+DeltaY)
             ctl{PROP:Width} = CtlWidth+DeltaX
             ctl{PROP:Height} = CtlHeight+DeltaY
           else
!            setposition(Ctl,CtlX+DeltaX,CtlY+DeltaY,CtlWidth,CtlHeight)
             ctl{prop:xpos} = CtlX+DeltaX
             ctl{prop:ypos} = CtlY+DeltaY
           end
     elsif Ctl{PROP:Type} = CREATE:Sheet
!           setposition(Ctl,CtlX,CtlY,CtlWidth+DeltaX,CtlHeight+DeltaY)
           ctl{PROP:Width} = CtlWidth+DeltaX
           ctl{PROP:Height} = CtlHeight+DeltaY
     end
end
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:10:53'
[EMBED]
EMBED %ModuleDataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
InputFileName               cstring(250)       !DOS File Name
InputFile                   FILE,DRIVER('DOS'),PRE(INF),NAME(InputFileName),CREATE,THREAD
Record                        RECORD
InputRecord                       byte
                              .
                            .
OutputFileName              cstring(250)       !DOS File Name
OutputFile                  FILE,DRIVER('DOS'),PRE(OUF),NAME(OutputFileName),CREATE,THREAD
Record                        RECORD
OutputRecord                      byte
                              .
                            .
[END]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME CopyFile
PROTOTYPE '(*CSTRING FromFileName, *CSTRING ToFileName)'
PARAMETERS '(*CSTRING FromFileName, *CSTRING ToFileName)'
[COMMON]
DESCRIPTION 'Copy File From One To Another'
FROM ABC Source
MODIFIED '2017/06/09' '22:17:00'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 InputFileName = FromFileName
 OutputFileName = ToFileName
 open( InputFile )
 if errorcode() then
    message('Error opening ' & clip(left( InputFileName )) & ' for copying', 'Copy file Error', ICON:Exclamation, BUTTON:Ok, BUTTON:Ok )
 else
    close( InputFile )
    copy( InputFile, ToFileName )
    if errorcode() then
       Message('Error copying ' & clip(left(FromFileName)) & ' to ' & clip(left(ToFileName)) & '.  Error was ' & clip(left(error())), |
               'Copy File Error Window', icon:Exclamation, button:Ok, Button:Ok )
    .
   OMIT('FREDOMIT')
    open( OutputFile )
    if errorcode() = NoFileErr then
       create( OutputFile )
       open( OutputFile )
       if errorcode() then
          message('Error opening ' & clip(left( OutputFileName )) & ' for copying', 'Copy file Error', ICON:Exclamation, BUTTON:Ok, BUTTON:Ok )
       else
          do FileCopyLoop
       .
    elsif errorcode()
          message('Error opening ' & clip(left( OutputFileName )) & ' for copying', 'Copy file Error', ICON:Exclamation, BUTTON:Ok, BUTTON:Ok )
    else
       do FileCopyLoop
    .
    close( InputFile )
   !FREDOMIT
 .
! RETURN Level:Fatal
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FileCopyLoop    routine
 empty( OutputFile )
 loop
    next( InputFile )
    if errorcode() then
       break
    .
    ouf:OutputRecord = inf:InputRecord
    add( OutputFile )
 .
 close( OutputFile )
 exit  !** Check EXIT allowed here **
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[END]
[MODULE]
[COMMON]
DESCRIPTION 'Generated Source Module'
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:11:05'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME _AddThread
PROTOTYPE '(LONG pThdNumber,STRING pThdName,<<LONG pThdMaxInstance>,<<LONG pThdParam1>,<<LONG pThdParam2>,<<LONG pThdParam3>,<<LONG pThdParam4>,<<STRING pThdBuffer>)'
PARAMETERS '(LONG pThdNumber,STRING pThdName,<<LONG pThdMaxInstance>,<<LONG pThdParam1>,<<LONG pThdParam2>,<<LONG pThdParam3>,<<LONG pThdParam4>,<<STRING pThdBuffer>)'
[COMMON]
DESCRIPTION 'Add Thread Queue Entry'
FROM ABC Source
MODIFIED '2017/06/09' '23:00:33'
[DATA]
[SCREENCONTROLS]
! PROMPT('Instance Count:'),USE(?InstanceCount:Prompt)
! ENTRY(@n-13),USE(InstanceCount),MSG('Current Number of Procedure Instances')
[REPORTCONTROLS]
! STRING(@n-13),USE(InstanceCount)
InstanceCount            LONG !Current Number of Procedure Instances
!!> GUID('25bf0c39-72b1-4c47-892c-4e8bd1078152'),PROMPT('Instance Count:'),HEADER('Instance Count'),MESSAGE('Current Number of Procedure Instances'),PICTURE(@n-13)
[SCREENCONTROLS]
! PROMPT('Max Instance:'),USE(?MaxInstance:Prompt)
! ENTRY(@n-13),USE(MaxInstance),MSG('Maximum Number of Instances Allowed')
[REPORTCONTROLS]
! STRING(@n-13),USE(MaxInstance)
MaxInstance              LONG !Maximum Number of Instances Allowed
!!> GUID('5fcac8bd-9839-4df7-bd46-bf5710ea8925'),PROMPT('Max Instance:'),HEADER('Max Instance'),MESSAGE('Maximum Number of Instances Allowed'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 pThdName = upper( pThdName )                   !Upper the thread name
 InstanceCount = instances(pThdName)
 if InstanceCount
    sort(ThreadQ,+tq:Name,-tq:Instance)
    tq:name = pThdName
    get(ThreadQ,+tq:Name)
    if errorcode()
       message('Error getting thread queue entry for ' & clip(pThdName),'Thread Manager Error',ICON:hand)
    else
       MaxInstance = tq:MaxInstance
       if InstanceCount < MaxInstance
          DO AddThreadRoutine
       else
         message('Error maximum thread queue entry for ' & clip(pThdName) & ' exceeded.','Thread Manager Error',ICON:hand)
       end
    end
 else
   if ~omitted(3)
      MaxInstance = pThdMaxInstance
   else
      MaxInstance = 1
   end
   DO AddThreadRoutine
 end
! RETURN Level:Fatal
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddThreadRoutine    ROUTINE
 InstanceCount = tq:Instance
 clear(THREADQ)
 tq:Number=pThdNumber
 tq:Name=pThdName
 tq:Instance = InstanceCount+1
 tq:MaxInstance = MaxInstance
 if ~omitted(4)
   tq:Param1=pThdParam1
 end
 if ~omitted(5)
   tq:Param2=pThdParam2
 end
 if ~omitted(6)
   tq:Param3=pThdParam3
 end
 if ~omitted(7)
   tq:Param4=pThdParam4
 end
 if ~omitted(8)
   tq:Buffer=pThdBuffer
 end
 add(THREADQ)
 exit  !** Check EXIT allowed here **
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME DeleteThread
[COMMON]
DESCRIPTION 'Delete Thread Queue Entry'
FROM ABC Source
MODIFIED '2017/06/09' '22:52:37'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 sort(THREADQ,tq:Number)
 tq:Number=thread()
 get(THREADQ,tq:Number)
 if ~errorcode()
   delete(THREADQ)
 else
   stop('WARNING: An attempt to delete an execution thread '&|
        'has failed. As a result, '&|
        'this program could be in an unstable state. If you have '&|
        'saved recently, you should exit and reload the program.')
 end
 if ~records(THREADQ) then free(THREADQ).  !(probably not needed...)
! RETURN Level:Fatal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME FindThread
PROTOTYPE '(STRING pThdName,<<LONG pThdInstance>,*GROUP pThdRecord,<<STRING pThdOrdinal>)'
PARAMETERS '(STRING pThdName,<<LONG pThdInstance>,*GROUP pThdRecord,<<STRING pThdOrdinal>)'
[COMMON]
DESCRIPTION 'Find Thread from Queue'
FROM ABC Source
MODIFIED '2017/06/09' '22:53:05'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG !Function Return Value
!!> GUID('e440eaef-c4aa-4bd8-b5ce-d020de1d1971'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 pThdName = upper( pThdName )
 clear(THREADQ)
 sort(THREADQ,+tq:Name,+tq:Instance)
 tq:Name=pThdName
 if omitted(2)
    if ~omitted(4)
       if upper(pThdOrdinal) = 'LAST'
          sort(THREADQ,+tq:Name,-tq:Instance)
       end
    end
    get(THREADQ,+tq:Name)
 else
    tq:Instance = pThdInstance
    get(THREADQ,+tq:Name,+tq:Instance)
 end
 if errorcode() or tq:Name <> pThdName
    clear(THREADQ)
 end
 pThdRecord = tq:Record
! RETURN Level:Fatal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME CloseThreads
[COMMON]
DESCRIPTION 'Close All Threads'
FROM ABC Source
MODIFIED '2017/06/09' '22:50:46'
[DATA]
[SCREENCONTROLS]
! PROMPT('i:'),USE(?i:Prompt)
! ENTRY(@n-6),USE(i),MSG('loop control')
[REPORTCONTROLS]
! STRING(@n-6),USE(i)
i                        SHORT !loop control
!!> GUID('b4e4cf79-caf3-41b9-9950-2e1bed9bed3c'),PROMPT('i:'),HEADER('i'),MESSAGE('loop control'),PICTURE(@n-6)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 sort(THREADQ,-tq:Number)
 loop i=1 to records(THREADQ)
   get(THREADQ,i)
   post(EVENT:CloseDown,,tq:Number)
   post(EVENT:CloseWindow,,tq:Number)
 end
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME Threads
PROTOTYPE '(),BYTE'
[COMMON]
DESCRIPTION 'Get Number of Threads'
FROM ABC Source
MODIFIED '2017/06/09' '22:59:04'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n3),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n3),USE(RetVal)
RetVal                   BYTE !Function Return Value
!!> GUID('87f0b29c-8609-4d1c-9f5c-0d9951462d1b'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n3)
[PROMPTS]
%ReturnValue FIELD  (RetVal)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 RetVal=records(THREADQ)
 RETURN RetVal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME Instances
PROTOTYPE '(STRING pThdName),LONG'
PARAMETERS '(STRING pThdName) !,LONG'
[COMMON]
DESCRIPTION 'Get Thread Instance Count'
FROM ABC Source
MODIFIED '2017/06/09' '22:55:13'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG !Function Return Value
!!> GUID('d118bfe8-41d3-45c4-a11e-55c05e29c605'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n-13)
[SCREENCONTROLS]
! PROMPT('Index Var:'),USE(?IndexVar:Prompt)
! ENTRY(@n-13),USE(IndexVar),MSG('Index Variable')
[REPORTCONTROLS]
! STRING(@n-13),USE(IndexVar)
IndexVar                 LONG !Index Variable
!!> GUID('81311b14-edf6-4fa0-8009-bbf89358af62'),PROMPT('Index Var:'),HEADER('Index Var'),MESSAGE('Index Variable'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  (RetVal)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 pThdName = upper( pThdName )
 RetVal = 0
 LOOP IndexVar = 1 TO RECORDS(ThreadQ)
   GET(ThreadQ,IndexVar)
   IF ERRORCODE()
      BREAK
   END
   IF tq:Name = pThdName
      RetVal += 1
   END
 END
 RETURN RetVal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME GetThread
PROTOTYPE '(LONG,*GROUP)'
PARAMETERS '(pThd,pThdRecord)'
[COMMON]
DESCRIPTION 'Get Thread from Queue'
FROM ABC Source
MODIFIED '2017/06/09' '22:54:21'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG !Function Return Value
!!> GUID('4f51f2c2-7923-4518-9c26-bdb091d07db8'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 clear(THREADQ)
 sort(THREADQ,tq:Number)
 tq:Number=pThd
 get(THREADQ,tq:Number)
 if errorcode()
    clear(THREADQ)
 end
 pThdRecord = tq:Record
! RETURN Level:Fatal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME SendThread
PROTOTYPE '(STRING pThdName, LONG pThdEvent)'
PARAMETERS '(STRING pThdName, LONG pThdEvent)'
[COMMON]
DESCRIPTION 'Send Thread An Event'
FROM ABC Source
MODIFIED '2017/06/09' '22:57:46'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG !Function Return Value
!!> GUID('9aaf05a2-6ef1-434e-b91e-468a016a7953'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ThreadQLoopCounter          short               !Thread Queue Loop Counter
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 pThdName = upper( pThdName )
 if records( ThreadQ ) then
    loop ThreadQLoopCounter = 1 to records( ThreadQ )
         get( ThreadQ, ThreadQLoopCounter )
         if upper(clip(left( pThdName ))) = 'ALL' then
            post( pThdEvent,,tq:Number )
         elsif upper(clip(left( pThdName ))) = upper(clip(left( tq:Name )))
            post( pThdEvent,,tq:Number )
         .
    .
 .
! RETURN Level:Fatal
[END]
[END]
[CALLS]
Instances
[PROCEDURE]
NAME PutThread
PROTOTYPE '(LONG pThd, *GROUP pThdRecord)'
PARAMETERS '(LONG pThd, *GROUP pThdRecord)'
[COMMON]
DESCRIPTION 'Get Thread from Queue'
FROM ABC Source
MODIFIED '2017/06/09' '22:57:07'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal),MSG('Function Return Value')
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG !Function Return Value
!!> GUID('48fdfe22-c7e1-4a93-947c-e4a92224a301'),PROMPT('Ret Val:'),HEADER('Ret Val'),MESSAGE('Function Return Value'),PICTURE(@n-13)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 clear(THREADQ)
 sort(THREADQ,tq:Number)
 tq:Number = pThd
 get(THREADQ,tq:Number)
 if ~errorcode()
   tq:Record = pThdRecord
   tq:Number = pThd
   put(THREADQ,tq:Number)
 end
! RETURN Level:Fatal
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[CALLS]
Instances
[END]
[MODULE]
[COMMON]
DESCRIPTION 'Generated Source Module'
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:11:11'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME PutRegistry
PROTOTYPE '(STRING pSectionName, STRING pTokenLabel, STRING pNewValue, <<STRING pFileName>, <<STRING pUserName>)'
PARAMETERS '(STRING pSectionName, STRING pTokenLabel, STRING pNewValue, <<STRING pFileName>, <<STRING pUserName>)'
[COMMON]
DESCRIPTION 'Put Registry Information'
FROM ABC Source
MODIFIED '2017/06/09' '22:56:53'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SAV::RECORD  like(REG:RECORD),auto
loc:UserName like(GlobalUserName),auto
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  if omitted(5)
    if GlobalUserName
      loc:UserName=GlobalUserName
    else
      loc:UserName='COMMON'
    end
  else
    loc:UserName=pUserName
  end
  loop
!    open(REGISTRY,READ_WRITE+DENY_NONE)
    open(REGISTRY,ReadWrite+DenyNone)
    case errorcode()
    of 0 orof 51 orof 52                           !OPENED or ALREADY OPEN
      break
    of 02                                          ! NOT FOUND
      create(REGISTRY)
      if errorcode()
        halt(clip(error())&' creating '&clip(name(REGISTRY)))
      end
      cycle
    else
      halt(clip(error())&' opening '&clip(name(REGISTRY)))
    end
  end
  reg:UserName=loc:UserName
  reg:SectionName=pSectionName
  reg:TokenLabel=pTokenLabel
  get(REGISTRY,REG:K1)
  if errorcode()
    reg:UserName   =loc:UserName
    reg:SectionName=pSectionName
    reg:TokenLabel =pTokenLabel
    reg:TokenValue =pNewValue
    add(REGISTRY)
  else
    reg:TokenValue=pNewValue
    do UPDATEFILE
  end
  close(REGISTRY)
!  RETURN Level:Fatal
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UPDATEFILE ROUTINE
 SAV::RECORD=REG:RECORD
 hold(REGISTRY,2)
 get(REGISTRY,pointer(REGISTRY))
 REG:RECORD=SAV::RECORD
 if ~errorcode()=43   !(record not yet held)
   put(REGISTRY)
   if errorcode()
     halt(clip(error())&' updating '&name(REGISTRY))
   end
 end
[END]
[END]
[PROCEDURE]
NAME GetRegistry
PROTOTYPE '(STRING pSectionName, STRING pTokenLabel, <<STRING pDefaultValue>, <<STRING pDummyParameter>, <<STRING pUserName>),STRING'
PARAMETERS '(STRING pSectionName, STRING pTokenLabel, <<STRING pDefaultValue>, <<STRING pDummyParameter>, <<STRING pUserName>) !,STRING'
[COMMON]
DESCRIPTION 'Get Registry Data'
FROM ABC Source
MODIFIED '2017/06/09' '22:54:06'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Str:'),USE(?RetStr:Prompt)
! TEXT,USE(RetStr),BOXED
[REPORTCONTROLS]
! TEXT,USE(RetStr),BOXED
RetStr                   STRING(1000)
!!> GUID('e91dd3b8-7c6c-428a-baf7-2156358c23b6'),PROMPT('Ret Str:'),HEADER('Ret Str'),PICTURE(@s255)
[PROMPTS]
%ReturnValue FIELD  (RetStr)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
loc:UserName like(GlobalUserName),auto
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  if omitted(5)
    if GlobalUserName
      loc:UserName=GlobalUserName
    else
      loc:UserName='COMMON'
    end
  else
    loc:UserName=pUserName
  end
  loop
!    open(REGISTRY,READ_ONLY+DENY_NONE)
    open(REGISTRY,ReadOnly+DenyNone)
    if errorcode()
      case errorcode()
      of 51 orof 52                                ! OPENED or ALREADY OPEN
        break
      of 02                                        ! NOT FOUND
        create(REGISTRY)
        if errorcode()
          halt(clip(error())&' creating '&clip(name(REGISTRY)))
        end
        cycle
      else
        halt(clip(error())&' opening '&clip(name(REGISTRY)))
        halt(0,'')
        break
      end
    else
      break
    end
  end
  reg:UserName=loc:UserName
  reg:SectionName=pSectionName
  reg:TokenLabel=pTokenLabel
  get(REGISTRY,REG:K1)
  if errorcode() or ~reg:TokenValue
    RetStr=pDefaultValue
  else
    RetStr=reg:TokenValue
  end
  close(REGISTRY)
  RetStr = (clip(left(RetStr)))
  RETURN Level:Fatal
[END]
[END]
[PROCEDURE]
NAME DeleteRegistry
PROTOTYPE '(STRING pSectionName, STRING pTokenLabel, STRING pNewValue, <<STRING pFileName>, <<STRING pUserName>)'
PARAMETERS '(STRING pSectionName, STRING pTokenLabel, STRING pNewValue, <<STRING pFileName>, <<STRING pUserName>)'
[COMMON]
DESCRIPTION 'Delete Registry Information'
FROM ABC Source
MODIFIED '2017/06/09' '22:52:21'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SAV::RECORD  like(REG:RECORD),auto
loc:UserName like(GlobalUserName),auto
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  if omitted(5)
    if GlobalUserName
      loc:UserName=GlobalUserName
    else
      loc:UserName='COMMON'
    end
  else
    loc:UserName=pUserName
  end
  loop
!    open(REGISTRY,READ_WRITE+DENY_NONE)
    open(REGISTRY,ReadWrite+DenyNone)
    case errorcode()
    of 0 orof 51 orof 52                           !OPENED or ALREADY OPEN
      break
    of 02                                          ! NOT FOUND
      create(REGISTRY)
      if errorcode()
        halt(clip(error())&' creating '&clip(name(REGISTRY)))
      end
      cycle
    else
      halt(clip(error())&' opening '&clip(name(REGISTRY)))
    end
  end
  reg:UserName=loc:UserName
  reg:SectionName=pSectionName
  reg:TokenLabel=pTokenLabel
  get(REGISTRY,REG:K1)
  if ~errorcode()
    reg:TokenValue=pNewValue
    do UPDATEFILE
  end
  close(REGISTRY)
!  RETURN Level:Fatal
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UPDATEFILE ROUTINE
 SAV::RECORD=REG:RECORD
 hold(REGISTRY,2)
 get(REGISTRY,pointer(REGISTRY))
 REG:RECORD=SAV::RECORD
 if ~errorcode()=43   !(record not yet held)
   delete(REGISTRY)
   if errorcode()
     halt(clip(error())&' updating '&name(REGISTRY))
   end
 end
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:11:30'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME NumberToText
PROTOTYPE '(*DECIMAL pAmount, BYTE pFlag, *CSTRING TextAmount, <<*CSTRING pFormat>)'
PARAMETERS '(*DECIMAL pAmount, BYTE pFlag, *CSTRING TextAmount, <<*CSTRING pFormat>)'
[COMMON]
DESCRIPTION 'Number To Text Converter'
FROM ABC Source
MODIFIED '2017/06/09' '22:56:14'
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
stringSlice     cstring(21)
intAmount       ulong   ! maximum amount of check to print is determined by ulong max val of 4,294,967,295
DecimalDigits   short   ! for non-currency numbers on the right of the decimal point
DecimalText     cstring(31)
tenths          cstring(4)  ! non-currency decimal string
hundredths      cstring(4)  ! non-currency decimal string
Thousandths     cstring(4)  ! non-currency decimal string
TenThousandths  cstring(4)  ! non-currency decimal string
Cents           byte
DollarText      cstring(31)
CentText        cstring(31)
DollarsAndCents decimal(19,2)
NonCurrencyAmount decimal(19,4)
tensTemp        cstring(4)
unit            cstring(4)
tens            cstring(4)
hundreds        cstring(4)
Thousands       cstring(4)
TenThousands    cstring(4)
HundredThousand cstring(4)
Million         cstring(4)
TenMillion      cstring(4)
HundredMillion  cstring(4)
Billion         cstring(4)
TenBillion      cstring(4)
HundredBillion  cstring(4)
count           short
Textlength      short
CaseValue       cstring(3)
ReturnedText    cstring(21)
loc:Format      cstring(8)
!------------------------------------------------------------------------
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 IF ~OMITTED(4)
    loc:format = pFormat
 ELSE
    loc:Format = 'Alpha'
 END

 IF loc:Format = 'Numeric'
    intAmount = 0
    Cents = 0
    DollarsAndCents = pAmount   ! the passed amount(a REAL) is assigned to a Decimal(13,2)
    intAmount = DollarsAndCents ! the integer amount is assigned here
    Cents = (DollarsAndCents-intAmount)*100  ! dollar amount is subtracted and cents assigned.
    IF Cents = 0
       CentText = 'NO/100'
    ELSE
       CentText = Cents & '/100'
    END
    TextAmount = FORMAT(intAmount,@N10.0)
    TextAmount = TextAmount & clip(DollarText) & ' DOLLARS AND ' & CLIP(CentText) !'This is the Amount in Text'
    Textlength = LEN(CLIP(LEFT(TextAmount)))
    IF Textlength < 80
       I# = 80 - Textlength
       TextAmount = ALL('*',I#) & CLIP(LEFT(TextAmount))
    END
 ELSE
    IF pFlag = TRUE  ! do currency
       intAmount = 0
       Cents = 0
       DollarsAndCents = pAmount   ! the passed amount(a REAL) is assigned to a Decimal(13,2)
       intAmount = DollarsAndCents ! the integer amount is assigned here
       Cents = (DollarsAndCents-intAmount)*100  ! dollar amount is subtracted and cents assigned.
       IF Cents = 0
          CentText = 'NO/100'
       ELSE
          CentText = Cents & '/100'
       END
       TextAmount = intAmount
       DO conversion
       TextAmount = TextAmount & CLIP(DollarText) & ' AND ' & CLIP(CentText) !'This is the Amount in Text'
    ELSE ! do non-currency
       intAmount = 0
       NonCurrencyAmount =  0
       DecimalDigits = 0
       DecimalText = ''
       NonCurrencyAmount = pAmount ! the REAL data is cast to decimal(19,4)
       intAmount = NonCurrencyAmount ! the integer amount is assigned here
       DecimalText = (NonCurrencyAmount-intAmount)!*10000  ! integer amount is subtracted and decimal assigned.
       TextAmount = intAmount
       DO conversion
       DO NonCurrencyDecimal
       IF (NonCurrencyAmount-intAmount)*10000 <> 0
          TextAmount = TextAmount & ' POINT' & CLIP(DecimalText)
       END
    END
 END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Conversion      routine
 count = 0
 unit = '0'
 tens = '0'
 hundreds = '0'
 Thousands = '0'
 TenThousands = '0'
 HundredThousand = '0'
 Million = '0'
 TenMillion = '0'
 HundredMillion = '0'
 Billion = '0'
 TenBillion = '0'
 HundredBillion = '0'
 Textlength = len(TextAmount)
 loop Textlength times
    count += 1
    execute count
      unit = TextAmount[Textlength]
      tens = TextAmount[(Textlength-count)+1]
      hundreds = TextAmount[(Textlength-count)+1]
      Thousands = TextAmount[(Textlength-count)+1]
      TenThousands = TextAmount[(Textlength-count)+1]
      HundredThousand = TextAmount[(Textlength-count)+1]
      Million = TextAmount[(Textlength-count)+1]
      TenMillion = TextAmount[(Textlength-count)+1]
      HundredMillion = TextAmount[(Textlength-count)+1]
      Billion = TextAmount[(Textlength-count)+1]    ! max value is 4 plus Billion
   !   TenBillion = TextAmount[(Textlength-count)+1]
   !   HundredBillion = TextAmount[(Textlength-count)+1]
    end
 end
 TextAmount = ''
 if intAmount <> 0
    Do Billions
    Do Millions
    Do Thousands
    Do Hundreds
 else
    TextAmount = 'ZERO'
 end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NonCurrencyDecimal        Routine
 count = 0
 Textlength = 0
 Tenths = '0'
 Hundredths = '0'
 Thousandths = '0'
 TenThousandths = '0'
 CaseValue = ''
 Textlength = len(clip(DecimalText))
 Textlength -= 2
! message('Textlength: ' & Textlength)
 loop Textlength times  ! works left to right from the decimal
    count += 1
    execute count
      Tenths = DecimalText[count+2]   ! add 2 to count in order to skip the '0.' of the number
      Hundredths = DecimalText[count+2]
      Thousandths = DecimalText[count+2]
      TenThousandths = DecimalText[count+2]
    end
 end
 DecimalText = ''
 if Tenths <> '' and Textlength >= 1
    CaseValue = clip(tenths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if Hundredths <> '' and Textlength >= 2
    CaseValue = clip(hundredths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if Thousandths <> '' and Textlength >= 3
    CaseValue = clip(Thousandths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
 if TenThousandths <> '' and Textlength >= 4
    CaseValue = clip(TenThousandths)
    Do TextRoutine
    CaseValue = ''
    DecimalText = clip(DecimalText) & ' '  & clip(ReturnedText)
 end
!----------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Billions        Routine
 if HundredBillion <> '0'
    CaseValue = clip(HundredBillion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenBillion <> '0'
    if TenBillion = '1'
       CaseValue = clip(TenBillion) & clip(Billion)
       Billion = '0'
    end
    if TenBillion <> '1' and TenBillion <> '0'
       CaseValue = clip(TenBillion) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Billion <> '0'
    CaseValue = clip(Billion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add Billion to text
  if HundredBillion <> '0' or TenBillion <> '0' or Billion <> '0'
     TextAmount = clip(TextAmount) & ' BILLION '
  end
!------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Millions        Routine
 if HundredMillion <> '0'
    CaseValue = clip(HundredMillion)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenMillion <> '0'
    if TenMillion = '1'
       CaseValue = clip(TenMillion) & clip(Million)
       Million = '0'
    end
    if TenMillion <> '1' and TenMillion <> '0'
       CaseValue = clip(TenMillion) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Million <> '0'
    CaseValue = clip(Million)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add million to text
  if HundredMillion <> '0' or TenMillion <> '0' or Million <> '0'
     TextAmount = clip(TextAmount) & ' MILLION '
  end
!------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Thousands        Routine
 if HundredThousand <> '0'
    CaseValue = clip(HundredThousand)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if TenThousands <> '0'
    if TenThousands = '1'
       CaseValue = clip(TenThousands) & clip(Thousands)
       Thousands = '0'
    end
    if TenThousands <> '1' and TenThousands <> '0'
       CaseValue = clip(TenThousands) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if Thousands <> '0'
    CaseValue = clip(Thousands)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
! Add Thousand to text
 if HundredThousand <> '0' or TenThousands <> '0' or Thousands <> '0'
    TextAmount = clip(TextAmount) & ' THOUSAND '
 end
!-------------------------------------------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Hundreds        Routine
 if hundreds <> '0'
    CaseValue = clip(hundreds)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText) & ' HUNDRED '
 end
 if tens <> '0'
    if tens = '1'
       CaseValue = clip(tens) & clip(unit)
       unit = '0'.
    if tens <> '1' and tens <> '0'
       CaseValue = clip(tens) & '0'
    end
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
 if unit <> '0'
    CaseValue = clip(Unit)
    Do TextRoutine
    CaseValue = ''
    TextAmount = clip(TextAmount) & ' '  & clip(ReturnedText)
 end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
TextRoutine         Routine
 ReturnedText = ''
 Case CaseValue
    of  '0'
        ReturnedText = 'ZERO'
    of  '1'
        ReturnedText = 'ONE'
    of  '2'
        ReturnedText = 'TWO'
    of  '3'
        ReturnedText = 'THREE'
    of  '4'
        ReturnedText = 'FOUR'
    of  '5'
        ReturnedText = 'FIVE'
    of  '6'
        ReturnedText = 'SIX'
    of  '7'
        ReturnedText = 'SEVEN'
    of  '8'
        ReturnedText = 'EIGHT'
    of  '9'
        ReturnedText = 'NINE'
    of  '10'
        ReturnedText = 'TEN'
    of  '11'
        ReturnedText = 'ELEVEN'
    of  '12'
        ReturnedText = 'TWELVE'
    of  '13'
        ReturnedText = 'THIRTEEN'
    of  '14'
        ReturnedText = 'FOURTEEN'
    of  '15'
        ReturnedText = 'FIFTEEN'
    of  '16'
        ReturnedText = 'SIXTEEN'
    of  '17'
        ReturnedText = 'SEVENTEEN'
    of  '18'
        ReturnedText = 'EIGHTEEN'
    of  '19'
        ReturnedText = 'NINETEEN'
    of  '20'
        ReturnedText = 'TWENTY'
    of  '30'
        ReturnedText = 'THIRTY'
    of  '40'
        ReturnedText = 'FORTY'
    of  '50'
        ReturnedText = 'FIFTY'
    of  '60'
        ReturnedText = 'SIXTY'
    of  '70'
        ReturnedText = 'SEVENTY'
    of  '80'
        ReturnedText = 'EIGHTY'
    of  '90'
        ReturnedText = 'NINETY'
 end
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:07'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME EnumPrinters
PROTOTYPE '(*QUEUE pQueue, *CSTRING pPrinterName),LONG'
PARAMETERS '(*QUEUE pQueue, *CSTRING pPrinterName) !,LONG'
[COMMON]
DESCRIPTION 'Enumerate Printers'
FROM ABC Source
MODIFIED '2017/06/09' '23:02:11'
[DATA]
[SCREENCONTROLS]
! PROMPT('cc:'),USE(?cc:Prompt)
! ENTRY(@n-13),USE(cc),MSG('completion code')
[REPORTCONTROLS]
! STRING(@n-13),USE(cc)
cc                       LONG !completion code
!!> GUID('76c8725c-5120-449d-b067-67aed20956b9'),PROMPT('cc:'),HEADER('cc'),MESSAGE('completion code'),PICTURE(@n-13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(cdwName)
[REPORTCONTROLS]
! STRING(@n13),USE(cdwName)
cdwName                  ULONG
!!> GUID('ddd58962-bccc-41df-b37b-c7ddb79eb7fe'),INITIAL('81'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(dwSubKey)
[REPORTCONTROLS]
! STRING(@n13),USE(dwSubKey)
dwSubKey                 ULONG
!!> GUID('5edda929-e149-4004-af3b-ee9cb2386a8e'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(hKeyPrinters)
[REPORTCONTROLS]
! STRING(@n13),USE(hKeyPrinters)
hKeyPrinters             ULONG
!!> GUID('d0ca0c0c-6a56-493c-81a2-3e209e957e66'),PICTURE(@n13)
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-13),USE(RetVal)
[REPORTCONTROLS]
! STRING(@n-13),USE(RetVal)
RetVal                   LONG
!!> GUID('f2c4f68f-d46b-455c-97d8-f633fa6a472b'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n-13)
[SCREENCONTROLS]
! ENTRY(@s80),USE(szName)
[REPORTCONTROLS]
! STRING(@s80),USE(szName)
szName                   CSTRING(81)
!!> GUID('7699a37f-0b34-45f0-bfa8-da2dfb672b81'),PICTURE(@s80)
[SCREENCONTROLS]
! TEXT,USE(szSubKey),BOXED
[REPORTCONTROLS]
! TEXT,USE(szSubKey),BOXED
szSubKey                 CSTRING(256)
!!> GUID('1c6128a4-1526-404f-946e-88eb25865c9c'),PICTURE(@s255)
[PROMPTS]
%ReturnValue FIELD  (RetVal)
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 omit('_EndOmit_')
!Well known registry keys
HKEY_CLASSES_ROOT      EQUATE(080000000h)
HKEY_CURRENT_USER      EQUATE(080000001h)
HKEY_LOCAL_MACHINE     EQUATE(080000002h)
HKEY_USERS             EQUATE(080000003h)
HKEY_PERFORMANCE_DATA  EQUATE(080000004h)
HKEY_CURRENT_CONFIG    EQUATE(080000005h)
HKEY_DYN_DATA          EQUATE(080000006h)
!Security Access Mask values
KEY_QUERY_VALUE        EQUATE(00001h)
KEY_SET_VALUE          EQUATE(00002h)
KEY_CREATE_SUB_KEY     EQUATE(00004h)
KEY_ENUMERATE_SUB_KEYS EQUATE(00008h)
KEY_NOTIFY             EQUATE(00010h)
KEY_CREATE_LINK        EQUATE(00020h)
! _EndOmit_
!some error codes
!ERROR_MORE_ITEMS       EQUATE(234)
ERROR_NO_MORE_ITEMS    EQUATE(259)
ERROR_SUCCESS          EQUATE(0)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 retval = ERROR_SUCCESS
 szSubKey = 'System\CurrentControlSet\control\Print\Printers'
 cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_ENUMERATE_SUB_KEYS,hKeyPrinters)
 if cc = ERROR_SUCCESS
   dwSubKey = 0
   loop
     cc = RegEnumKeyEx(hKeyPrinters,dwSubKey,szName,cdwName,0,0,0,0)
     case cc
       of ERROR_NO_MORE_ITEMS
          break
       of ERROR_MORE_ITEMS
     orof ERROR_SUCCESS
          pPrinterName = szName
          add(pQueue)
     else
          retval = cc
          break
     end
     dwSubKey += 1
   end
   cc = RegCloseKey(hKeyPrinters)
 end
 return(RetVal)
[END]
[END]
[END]
[MODULE]
[COMMON]
DESCRIPTION 'Generated Source Module'
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:15'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME StdDev
PROTOTYPE '(*QUEUE pQueue, *DECIMAL pValue, *DECIMAL pStdDev)'
PARAMETERS '(*QUEUE pQueue, *DECIMAL pValue, *DECIMAL pStdDev)'
[COMMON]
DESCRIPTION 'Standard Deviation'
FROM ABC Source
MODIFIED '2017/06/09' '22:58:52'
[DATA]
[SCREENCONTROLS]
! PROMPT('I:'),USE(?I:Prompt)
! ENTRY(@n-13),USE(I)
[REPORTCONTROLS]
! STRING(@n-13),USE(I)
I                        LONG
!!> GUID('340bc38c-0120-41d1-a345-200d70792676'),PROMPT('I:'),HEADER('I'),PICTURE(@n-13)
[SCREENCONTROLS]
! PROMPT('Count:'),USE(?Count:Prompt)
! ENTRY(@n-13),USE(Count)
[REPORTCONTROLS]
! STRING(@n-13),USE(Count)
Count                    LONG
!!> GUID('3b670ba0-7bf6-44fe-9204-fafdc5f1953d'),PROMPT('Count:'),HEADER('Count'),PICTURE(@n-13)
[SCREENCONTROLS]
! PROMPT('Total:'),USE(?Total:Prompt)
! ENTRY(@n10.2),USE(Total)
[REPORTCONTROLS]
! STRING(@n10.2),USE(Total)
Total                    REAL
!!> GUID('f8acf1ad-730f-4aa0-8982-466b0b5e171e'),PROMPT('Total:'),HEADER('Total'),PICTURE(@n10.2)
[SCREENCONTROLS]
! PROMPT('Mean:'),USE(?Mean:Prompt)
! ENTRY(@n10.2),USE(Mean)
[REPORTCONTROLS]
! STRING(@n10.2),USE(Mean)
Mean                     REAL
!!> GUID('5b8d8612-b940-4261-83ad-cb3d68e08612'),PROMPT('Mean:'),HEADER('Mean'),PICTURE(@n10.2)
[SCREENCONTROLS]
! PROMPT('Variance:'),USE(?Variance:Prompt)
! ENTRY(@n10.2),USE(Variance)
[REPORTCONTROLS]
! STRING(@n10.2),USE(Variance)
Variance                 REAL
!!> GUID('412449b0-ff4f-469f-9278-7d0d0535e6f2'),PROMPT('Variance:'),HEADER('Variance'),PICTURE(@n10.2)
[PROMPTS]
%ReturnValue FIELD  ()
%DeleteThreadQueueEntry LONG  (0)
%DoNotUsePUSHPOP LONG  (0)
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 Total = 0
 Variance = 0
 Count = RECORDS(pQueue)
 LOOP I = 1 TO Count
  GET(pQueue,I)
  Total += pValue
 END
 Mean = Total / Count
 LOOP I = 1 TO Count
  GET(pQueue,I)
  Variance += (Mean - pValue) * (Mean - pValue)
 END
 pStdDev = SQRT(Variance)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME GetDiskFreeSpace
PROTOTYPE '(*CSTRING szDirectoryName, *DECIMAL nFreeBytesAvail, *DECIMAL nTotalNumberOfBytes, *DECIMAL nTotalNumberOfFreeBytes),BYTE'
PARAMETERS '(*CSTRING szDirectoryName, *DECIMAL nFreeBytesAvail, *DECIMAL nTotalNumberOfBytes, *DECIMAL nTotalNumberOfFreeBytes)'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:53:53'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
! Created to support 64 bit integers in Clarion
ULARGE_INTEGER          GROUP,TYPE
LowBit                    ULONG
HighBit                   ULONG
                        END
MY_LONGSHIFT            EQUATE(4294967295)  !2^32

FreeBytesAvail          LIKE(ULARGE_INTEGER)
TotalNumberOfBytes      LIKE(ULARGE_INTEGER)
TotalNumberOfFreeBytes  LIKE(ULARGE_INTEGER)

dwSectPerClust          LONG
dwBytesPerSect          LONG
dwFreeClusters          LONG
dwTotalClusters         LONG

retVal                  BYTE(0)

szModuleName            CSTRING('kernel32.dll')
szProcName              CSTRING('GetDiskFreeSpaceExA')
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF GetProcAddress(GetModuleHandle(szModuleName),szProcName)
     RetVal = GetDiskFreeSpaceEx(szDirectoryName, FreeBytesAvail, TotalNumberOfBytes, TotalNumberOfFreeBytes)
     IF RetVal
        nFreeBytesAvail = (FreeBytesAvail.HighBit * MY_LONGSHIFT) + FreeBytesAvail.LowBit
        nTotalNumberOfBytes = (TotalNumberOfBytes.HighBit * MY_LONGSHIFT) + TotalNumberOfBytes.LowBit
        nTotalNumberOfFreeBytes = (TotalNumberOfFreeBytes.HighBit * MY_LONGSHIFT) + TotalNumberOfFreeBytes.LowBit
     END
  ELSE
     RetVal = GetDiskFreeSpace(szDirectoryName, dwSectPerClust, dwBytesPerSect, dwFreeClusters, dwTotalClusters)
     IF RetVal
        nFreeBytesAvail = dwFreeClusters * dwSectPerClust * dwBytesPerSect
        nTotalNumberOfBytes = dwTotalClusters * dwSectPerClust * dwBytesPerSect
        nTotalNumberOfFreeBytes = nFreeBytesAvail
     END
  END
  RETURN RetVal
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:28'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME Calculator
[COMMON]
DESCRIPTION 'Calculator'
FROM ABC Source
MODIFIED '2017/06/09' '22:50:29'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Number     STRING(20)           !The current number displayed
Operand    REAL                 !The first operand for +,-,*,/,^ operations
Memory     REAL                 !The value contained in memory
Operation  REAL                 !The field number of the operation key
NewNumber  BYTE                 !True following = or %
Decimal    BYTE                 !True after pressing decimal point key
Digit      BYTE                 !Numeric digit represented by number key
Calculator WINDOW('Calculator'),AT(80,7,110,146),ICON('WINPYR.ICO'),SYSTEM,GRAY,DOUBLE,AUTO
       BUTTON('&0'),AT(29,127,14,12),FONT('Arial',12,,),KEY(KeyPad0),USE(?Zero)
       BUTTON('&1'),AT(29,111,14,12),FONT('Arial',12,,),KEY(KeyPad1),USE(?One)
       BUTTON('&2'),AT(47,111,14,12),FONT('Arial',12,,),KEY(KeyPad2),USE(?Two)
       BUTTON('&3'),AT(65,111,14,12),FONT('Arial',12,,),KEY(KeyPad3),USE(?Three)
       BUTTON('&4'),AT(29,97,14,12),FONT('Arial',12,,),KEY(KeyPad4),USE(?Four)
       BUTTON('&5'),AT(47,97,14,12),FONT('Arial',12,,),KEY(KeyPad5),USE(?Five)
       BUTTON('&6'),AT(65,97,14,12),FONT('Arial',12,,),KEY(KeyPad6),USE(?Six)
       BUTTON('&7'),AT(29,83,14,12),FONT('Arial',12,,),KEY(KeyPad7),USE(?Seven)
       BUTTON('&8'),AT(47,83,14,12),FONT('Arial',12,,),KEY(KeyPad8),USE(?Eight)
       BUTTON('&9'),AT(65,83,14,12),FONT('Arial',12,,),KEY(KeyPad9),USE(?Nine)
       BUTTON('.'),AT(47,127,14,12),FONT('Arial',12,,),KEY(DecimalKey),USE(?Decimal)
       BUTTON('CE'),AT(10,127,14,12),FONT('Arial',10,,),TIP('Clear Entry'),USE(?Clear)
       BUTTON('p'),AT(10,97,14,12),FONT('Symbol',12,,),TIP('Pi'),USE(?Pi)
       BUTTON('+/-'),AT(10,111,14,12),FONT('Arial',10,,),TIP('Reverse Sign'),USE(?Sign)
       BUTTON('x<178>'),AT(47,68,14,12),FONT('Arial',10,,),TIP('Squared'),USE(?Square)
       BUTTON('Ö'),AT(29,68,14,12),FONT('Symbol',12,,),TIP('Square Root'),USE(?Root)
       BUTTON('1/x'),AT(84,68,14,12),FONT('Arial',10,,),TIP('Reciprical'),USE(?Reciprical)
       BUTTON('10X'),AT(10,68,14,12),FONT('Ariel',10,,),TIP('Multiply by Ten'),USE(?TenTimes)
       BUTTON('%'),AT(10,83,14,12),FONT('Arial',12,,),TIP('Percent'),USE(?Percent)
       BUTTON('CM'),AT(29,53,14,12),FONT('Arial',11,,),TIP('Clear Memory'),USE(?MemClear)
       BUTTON(' C'),AT(10,53,14,12),FONT('Arial',11,,),TIP('Clear All'),USE(?ClearAll)
       BUTTON('RM'),AT(47,53,14,12),FONT('Arial',10,,),TIP('Recall Memory'),USE(?MemRecall)
       BUTTON(' M -'),AT(65,53,14,12),FONT('Arial',10,,),TIP('Subtract from Memory'),USE(?MemMinus)
       BUTTON(' M+'),AT(84,53,14,12),FONT('Arial',10,,),TIP('Add to Memory'),USE(?MemPlus)
       BUTTON('+'),AT(84,127,14,12),FONT('Arial',12,,),TIP('Add'),KEY(PlusKey),USE(?Add)
       BUTTON('-'),AT(84,111,14,12),FONT('Arial',12,,),TIP('Subtract'),KEY(MinusKey),USE(?Subtract)
       BUTTON('x'),AT(84,97,14,12),FONT('Arial',12,,),TIP('Multiple'),KEY(AstKey),USE(?Multiply)
       BUTTON('/'),AT(84,83,14,12),FONT('Arial',12,,),TIP('Divide'),KEY(SlashKey),USE(?Divide)
       BUTTON('Exp'),AT(65,68,14,12),FONT('Arial',8,,),TIP('Exponential'),USE(?Power)
       BUTTON('='),AT(65,127,14,12),FONT('Arial',12,,),TIP('Equal'),KEY(EnterKey),USE(?Equal)
       STRING('Memory:'),AT(4,36,30,10),LEFT
       STRING(@S20),AT(32,36,65,10),FONT(,8,,),USE(Memory),RIGHT
       ENTRY(@s20),AT(9,12,90,16),USE(Number),RIGHT(3),INS
     END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  OPEN(Calculator)                      !Open the calculator window
  NewNumber = True                      !Start with a new number
  Decimal = False                       !No decimal point has been entered
  Operation = ?Equal                    !No outstanding operation
!-----------------------------------------------------------------------------
!
!     ACCEPT...END is a control structure that processes the events
!     posted by the open window.  These events may be related to control
!     fields (e.g. a button was pressed or a text field was entered).
!     or they may be related to the window (e.g. a non-modal window is
!     about to lose focus or the window is about be be closed by the
!     system menu).  When an ACCEPT loop cycles, these functions supply
!     information about the event that is to be processed:
!
!     EVENT()    returns the event number that occurred.  EQUATES.CLW
!                contains labels for these events.
!     FIELD()    returns the field number that currently has focus.
!                Field numbers are referenced with field equate labels.
!     SELECTED() returns the field number that is to receive focus
!                during a "new field selected" event.  For any other
!                event, SELECTED() returns 0.
!     ACCEPTED() returns the field number for any control field event.
!                For other events, ACCEPTED() returns 0.
!
!-----------------------------------------------------------------------------
  ACCEPT                                !Enable windows and wait for an event
    DISPLAY
    If NewNumber
      First# = 0
    End
    IF ACCEPTED()                         ! user has caused accepted event
      CASE ACCEPTED()                     ! Jump to the accepted field
      OF ?Zero TO ?Nine                   ! For a numeric key
        Digit = ACCEPTED() - ?Zero        !  The digit is the field number
        IF NewNumber                      !  For the first digit
          If Decimal
            Number = '.' & Digit
            NewNumber = False             !   Turn NewNumber flag off
            First# = 1
          Else
            Number = Digit                !   Set the number to the digit
            NewNumber = False             !   Turn NewNumber flag off
            Decimal = False               !   Turn decimal point flag off
          End
        ELSE                              !   For any other digit
          IF Decimal                      !    For a fractional digit
            If First# = 0
              Number = CLIP(Number) & '.' & Digit !     Concatenate the digit
              First# = 1
            ELSE
              Number = CLIP(Number) & Digit !     Concatenate the digit
            End
          ELSE                            !    For an integer digit
            Number = Number * 10 + Digit  !     Multipy by 10 and add the digit
          END                             !    End the IF
        END                               !   End the IF
        CYCLE                             !   Continue number entry
      OF ?Decimal                         ! For the decimal point key
        Decimal = True                    !  Turn decimal point flag on
        CYCLE                             !  Continue number entry
      OF ?Pi                              ! For the Pi key
        Number = 3.141592654              !  Set number to Pi
        NewNumber = TRUE                  !  Start new number
        Decimal = False
        CYCLE                             !  Continue
      OF ?Clear                           ! For the ClearEntry/Clear key
        IF NewNumber THEN                 !  completed number entry
          Operation = ?Equal              !   so Clear current calculation
        END                               !  End IF
        Number = 0                        !  Clear number
        NewNumber = 0                     !  Start new number
        Decimal = False
      END                                 ! End CASE
      IF Operation <> ?Equal              ! Complete outstanding operations
        IF ACCEPTED() = ?Percent          !  For the percent key
          Number = Number * Operand / 100 ! Calculate % value
          IF  (Operation <> ?Add )     |  !  Check not adding
          AND (Operation <> ?Subtract )   !  or subtractiong percentage
            Operation = ?Equal            !   Finished operation
          END                             !  End IF
        END                               ! End IF
        CASE Operation                    !  Jump to saved operation key
        OF ?Add                           ! For Add key
          Number += Operand               !   Add number to operand
        OF ?Subtract                      !  For Subtract key
          Number = Operand - Number       !   Subtract number from operand
        OF ?Multiply                      !  For Multiply key
          Number *= Operand               !   Multiply operand by number
        OF ?Divide                        !  For Divide key
          IF Number <> 0 THEN             !  Check for divide by zero
            Number = Operand / Number     !   Divide operand by number
          END                             !  End IF
        OF ?Power                         !  For Raise to a Power key
          Number = Operand ^ Number       !   Raise operand to number power
        END                               !  End CASE
        Decimal = False
        Operation = ?Equal                !  Operation done
      END;                                ! End IF
      CASE ACCEPTED()                     ! Jump to the accepted field
      OF ?Sign                            ! For the Change Sign key
        Number *= -1                      !  Multiply by -1
      OF ?Square                          ! For the Square key
        Number *= Number                  !  Multilpy by itself
      OF ?Root                            ! For the Square Root key
        Number = SQRT(Number)             !  Find the square root
      OF ?TenTimes                        ! For the 10X key
        Number *= 10                      !  Multiply by 10
      OF ?Reciprical                      ! For the Reciprical key
        IF Number <> 0 THEN               ! Check for divide by zero
          Number = 1/Number               !  Find the reciprical
        END                               ! End IF
      OF ?ClearAll                        ! For clear all key
        Number = 0                        !  Set number to zero
        Memory = 0                        !  Set memory to zero
      OF ?MemClear                        ! For clear memory key
        Memory = 0                        !  Set memory to zero
      OF ?MemRecall                       ! For the Recall Memory key
        Number = Memory                   !  Set number to memory
      OF ?MemMinus                        ! For subtract from memory key
        Memory -= Number                  !  Subtract number from memory
      OF ?MemPlus                         ! For the Add to Memory key
        Memory += Number                  !  Add number to memory
      OF ?Add TO ?Power                   ! For two operand operation keys
        Operation = ACCEPTED()            !  Save the operator
        Operand = Number                  !  Save the first operand
      END                                 ! End CASE
      SELECT(?Zero)                       ! Set focus to the Zero key
      NewNumber = TRUE                    ! ready for next number
      Decimal = False
    END                                   !End CASE
  END                                   !End ACCEPT
  CLOSE(Calculator)                     !Close the calculater window
[END]
[END]
[PROCEDURE]
NAME DayofWeek
PROTOTYPE '(LONG pDate),STRING'
PARAMETERS '(LONG pDate) !,STRING'
[COMMON]
DESCRIPTION 'Return the day of the week'
FROM ABC Source
MODIFIED '2017/06/09' '22:52:10'
[DATA]
[SCREENCONTROLS]
! PROMPT('Return Value:'),USE(?ReturnValue:Prompt)
! ENTRY(@s20),USE(ReturnValue)
[REPORTCONTROLS]
! STRING(@s20),USE(ReturnValue)
ReturnValue              STRING(20)
!!> GUID('7d41e2ae-da55-4e7d-9787-b0504af32bf3'),PROMPT('Return Value:'),HEADER('Return Value'),PICTURE(@s20)
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 ReturnValue = ''

 IF pDate
    CASE pDate % 7
    OF 1
       ReturnValue = 'Monday'
    OF 2
       ReturnValue = 'Tuesday'
    OF 3
       ReturnValue = 'Wednesday'
    OF 4
       ReturnValue = 'Thursday'
    OF 5
       ReturnValue = 'Friday'
    OF 6
       ReturnValue = 'Saturday'
    ELSE
       ReturnValue = 'Sunday'
    END
 END

 RETURN ReturnValue
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME srcCalculateHolidays
PROTOTYPE '(HOLIDAY:QUEUETYPE HYQ, LONG pYear, STRING pProvince, STRING pCountry)'
PARAMETERS '(HOLIDAY:QUEUETYPE HYQ, LONG pYear, STRING pProvince, STRING pCountry)'
[COMMON]
DESCRIPTION 'SEE EXTENDED DESCRIPTION'
LONG 'Call this procedure as follows:<0DH,0AH,0DH,0AH>srcCalculateHolidays(HYQ,'
LONG 'Year,Province,Country)<0DH,0AH,0DH,0AH>Where :<0DH,0AH>HYQ - is a queue of the t'
LONG 'ype listed below<0DH,0AH>Year - is a long containing the year you w'
LONG 'ant holidays for in the format yyyy  (or unsigned) <0DH,0AH>Provinc'
LONG 'e - is the 2 character province code (if country is USA, the'
LONG 'n this field is irrelevant)<0DH,0AH>Country - country for which you'
LONG ' want the holidays (CAN or USA) - if USA, only federal holid'
LONG 'ays are calculated<0DH,0AH,0DH,0AH,0DH,0AH>Queue Type:<0DH,0AH,0DH,0AH>Holiday:QueueType    '
LONG 'QUEUE,TYPE<0DH,0AH>sName {28}STRING(60)<0DH,0AH>lDa'
LONG 'te {31}LONG<0DH,0AH> {21}'
LONG ' {15}END<0DH,0AH,0DH,0AH>Procedure Prototype<0DH,0AH>(Holiday:QueueTyp'
LONG 'e,long,string,string)'
FROM ABC Source
MODIFIED '2017/06/09' '22:58:23'
[DATA]
[SCREENCONTROLS]
! ENTRY(@n-14),USE(l:date)
[REPORTCONTROLS]
! STRING(@n-14),USE(l:date)
l:date                   LONG
!!> GUID('9a59e764-b927-4caa-b8b0-cb79c68bb386'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('l : Name:'),USE(?l:Name:Prompt)
! ENTRY(@s60),USE(l:Name)
[REPORTCONTROLS]
! STRING(@s60),USE(l:Name)
l:Name                   STRING(60)
!!> GUID('836ba5d7-b657-4d71-a637-58d82eceaadd'),PROMPT('l : Name:'),HEADER('l : Name'),PICTURE(@s60)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(Year)
[REPORTCONTROLS]
! STRING(@n-14),USE(Year)
Year                     LONG
!!> GUID('bd307f92-490c-4e62-9b2b-7dc13e222926'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(Q_ptr)
[REPORTCONTROLS]
! STRING(@n-14),USE(Q_ptr)
Q_ptr                    LONG
!!> GUID('284e7ac0-c00e-4800-ad20-2947fa2cb17e'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(r:yr)
[REPORTCONTROLS]
! STRING(@n-14),USE(r:yr)
r:yr                     LONG
!!> GUID('d7c0c103-3449-41e2-bc92-3ee5318bc221'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:a)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:a)
r:a                      REAL
!!> GUID('6c3a3ad5-acd9-4c6b-a53c-d5f24b344f0d'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:b)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:b)
r:b                      SHORT
!!> GUID('66cc84bc-30f5-443c-ac0a-a274f3c5bf13'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:c)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:c)
r:c                      REAL
!!> GUID('b4422398-7746-4dec-8246-3846e8fa30b0'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:d)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:d)
r:d                      SHORT
!!> GUID('89b83c5f-930a-4cbc-aa8b-c7750a8645d9'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:e)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:e)
r:e                      REAL
!!> GUID('db7fd513-f53a-44af-a8ba-a7fd49cf83c0'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:f)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:f)
r:f                      SHORT
!!> GUID('647c7066-71ec-4e3b-8c0b-661cce54d5e1'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:g)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:g)
r:g                      SHORT
!!> GUID('6552739f-76c5-40bf-bb83-9bf145443c01'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:h)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:h)
r:h                      REAL
!!> GUID('dad5b2c8-a125-48f1-b484-2f50aba52a3a'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:i)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:i)
r:i                      SHORT
!!> GUID('c5ff23d0-1ffd-4da4-ac6a-25b6fe60642a'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:k)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:k)
r:k                      REAL
!!> GUID('2c220433-163b-4af9-99fd-d05fff405ba6'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n10.2),USE(r:l)
[REPORTCONTROLS]
! STRING(@n10.2),USE(r:l)
r:l                      REAL
!!> GUID('d1856ba8-c15f-4195-b26e-d613db727338'),PICTURE(@n10.2)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(r:m)
[REPORTCONTROLS]
! STRING(@n-7),USE(r:m)
r:m                      SHORT
!!> GUID('c85a1624-a083-492b-b793-b4f7ffae3010'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(r:n)
[REPORTCONTROLS]
! STRING(@n-14),USE(r:n)
r:n                      LONG
!!> GUID('32188ac4-98e6-498d-9c0c-1a1de1f0735e'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(r:p)
[REPORTCONTROLS]
! STRING(@n-14),USE(r:p)
r:p                      LONG
!!> GUID('516e9ca0-820e-42e8-8c6c-a5cb90ff2bda'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(l:lYear)
[REPORTCONTROLS]
! STRING(@n-14),USE(l:lYear)
l:lYear                  LONG
!!> GUID('024f42ec-4b57-44e9-bdd7-ad3b2acb0186'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s2),USE(l:sProvince)
[REPORTCONTROLS]
! STRING(@s2),USE(l:sProvince)
l:sProvince              STRING(2)
!!> GUID('54ab4f31-e46e-4984-a212-3c392480b655'),PICTURE(@s2)
[SCREENCONTROLS]
! ENTRY(@s3),USE(l:sCountry)
[REPORTCONTROLS]
! STRING(@s3),USE(l:sCountry)
l:sCountry               STRING(3)
!!> GUID('7eeb279e-7710-4f6a-91d2-bd6ed6a5482f'),PICTURE(@s3)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:Thanksgiving)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:Thanksgiving)
loc:Thanksgiving         LONG
!!> GUID('da533393-0bec-4ed7-8966-f7c3954cd6a3'),PICTURE(@n-14)
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 l:lYear            = pYear
 r:yr               = pYear
 l:sProvince        = pProvince
 l:sCountry         = pCountry
 loc:Thanksgiving   = 0
 clear(l:Name)

 if ~l:sCountry
    l:sCountry = 'CAN'
 end
 if l:sCountry = 'CAN'
    if ~l:sProvince
       l:sProvince = 'ON'
    end
 end
 if ~l:lYear
    l:lYear = year(today())
 end

 free(HYQ)

 case clip(upper(l:sCountry))
 of 'CAN'
    do Canada
 of 'USA'
    do USA
 end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddToQ     routine
 clear(HYQ)
 HYQ:lDate  = l:date
 get(HYQ,+HYQ:lDate)
 if errorcode()
    HYQ:sName = l:Name
    HYQ:lDate = l:date
    add(HYQ,+HYQ:lDate)
 end
 clear(l:Name)
!------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FederalHolidaysCAN       routine
 do Easter
 do NewYearsDay
 do LabourDay
 do RemembranceDay
 do XmasDay
 do BoxingDay

!Victoria Day - May 24th weekend
!--------------------
 if clip(upper(l:sProvince)) <> 'NT'
    l:date = date(5,24,r:yr)
    loop
       if l:date % 7 = 1                   !if a Monday
          l:Name = 'VICTORIA DAY'
          do AddToQ
          break
       end
       l:date -= 1
    end
 end

!Canada Day
!--------------------
 l:date = date(7,1,r:yr)

 omit('***')
 if l:date % 7 = 6                      !if July 1st is a Saturday
    l:date += 2                         !Monday becomes a holiday
 end
 !***

 l:Name = 'CANADA DAY'
 do AddToQ

!Calculate August Civic Holiday - 1st Monday
!------------------
 if clip(upper(l:sProvince)) <> 'QC'
    l:date = date(8,1,r:yr)
    loop
       if l:date % 7 = 1                   !if a Monday

          case clip(upper(l:sProvince))
          of 'BC'
             l:Name = 'BRITISH COLUMBIA DAY'
          of 'NB'
             l:Name = 'NEW BRUNSWICK DAY'
          of 'SK'
             l:Name = 'SASKATCHEWAN DAY'
          else
             l:Name = 'AUGUST 1ST CIVIC HOLIDAY'
          end
          do AddToQ

          break
       end
       l:date += 1
    end
 end

!Calculate Thanksgiving Monday
!------------------------------
 l:date = date(10,1,r:yr)
 loop
    if l:date % 7 = 1
       l:date += 7
       l:Name = 'THANKSGIVING MONDAY'
       do AddToQ

       break
    end
    l:date += 1
 end

!Fixed Public Holidays

!January 1st - New Year's Day                       - see Note 1
!The Monday on or preceding 24 May Victoria Day
!July 1st - Canada Day                              - see Note 1
!1st Monday in August Civic or Provincial Holidays  - see Note 2
!1st Monday in September Labour Day
!2nd Monday in October Thanksgiving Day
!November 11th - Remembrance Day                    - see Note 3
!December 25th - Christmas Day                      - see Note 1
!December 26th - Boxing Day                         - see Note 1

!Note 1
!When these days fall on a Sunday, the next working day is considered a holiday.
!If Canada Day falls on a Saturday, the Monday following is a holiday.

!Note 2
!See below, under "provincial holidays" below the moveable holidays.
!This is the date taken unless another civil or provincial holiday exists on
!a different date, in which case the local holiday is used.

!There are numerous references, mainly in provincial government documents,
!to closures during the period from Christmas Eve to New Year's Day inclusive.
!Visitors should not expect to find offices open during this period.

!Note 3
!Officially Government offices and banks only,
!though in practice many other businesses may close.

!ONTARIO HOLIDAYS
!Statutory holidays are as the Federal ones.
!There are civic holidays on the 1st Monday in August (Simcoe Day)) and on 11 November.
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FederalHolidaysUSA         routine
!New Year's Day                         - January 1st
!Inauguration Day                       - 20 January of each 4th year starting from 1965
!Martin Luther King Jr Day              - 3rd Monday in January
!Presidents' Day/Washington's Birthday  - 3rd Monday in February
!Memorial Day                           - Last Monday in May
!Flag Day                               - 14 June
!Independence Day                       - 4 July
!Labor Day                              - 1st Monday in September
!Columbus Day                           - 2nd Monday in October
!Veterans' Day                          - 11 November
!Thanksgiving                           - 4th Thursday in November
!Christmas Day                          - 25 December

 do NewYearsDay
 do LabourDay
 do RemembranceDay
 do XmasDay
 do BoxingDay

 if (l:lYear - date(1,1,1965)) % 4 = 0   !Inauguration Day
    l:date = date(1,20,r:yr)

    omit('***')
    if l:date % 7 = 6           !if it falls on a Saturday
       l:date -= 1              ! move it to Friday
    end
    if l:date % 7 = 0           !if it falls on a Sunday
       l:date += 1
    end                         ! move it to Monday
    !***

    l:Name = 'INAUGURATION DAY'
    do AddToQ
 end
!------------
 l:date = date(1,1,r:yr)               !Martin Luther King Jr Day
 loop
    if l:date % 7 = 1                  !if a Monday
       l:date += 14                    !add 2 weeks

       l:Name = 'MARTIN LUTHER KING JR. DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!------------
 l:date = date(2,1,r:yr)               !Presidents' Day/Washington's Birthday
 loop
    if l:date % 7 = 1                  !if a Monday
       l:date += 14                    !add 2 weeks

       l:Name = 'PRESIDENTS'' DAY / WASHINGTON''S BIRTHDAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!------------
 l:date = date(5,31,r:yr)               !Memorial Day
 loop
    if l:date % 7 = 1                   !if a Monday

       l:Name = 'MEMORIAL DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!------------
 l:date = date(6,14,r:yr)                !Flag Day

 omit('***')
 if l:date % 7 = 6           !if it falls on a Saturday
    l:date -= 1              ! move it to Friday
 end
 if l:date % 7 = 0           !if it falls on a Sunday
    l:date += 1
 end                         ! move it to Monday'
 !***

 l:Name = 'FLAG DAY'
 do AddToQ
!------------
 l:date = date(7,4,r:yr)                !Independence Day

 omit('***')
 if l:date % 7 = 6           !if it falls on a Saturday
    l:date -= 1              ! move it to Friday
 end
 if l:date % 7 = 0           !if it falls on a Sunday
    l:date += 1
 end                         ! move it to Monday
 !***

 l:Name = 'INDEPENDENCE DAY'
 do AddToQ
!------------
 l:date = date(10,1,r:yr)               !Columbus Day
 loop
    if l:date % 7 = 1                  !if a Monday
       l:date += 7                    !add 1 week

       l:Name = 'COLUMBUS DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-------------
 l:date = date(11,1,r:yr)               !Thanksgiving Day
 loop
    if l:date % 7 = 4                   !if a Thursday
       l:date += 21                      !add 3 weeks

       l:Name = 'THANKSGIVING DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!------------------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
BoxingDay       routine
 l:date = date(12,26,r:yr)

 omit('***')
 if l:date % 7 = 6                      !if Dec 26 is a Saturday
    l:date += 2                         !Monday becomes a holiday
 end
 if l:date % 7 = 0                      !if Dec 26 is a Sunday
    l:date += 1                         !Monday becomes a holiday
 end
 !***

 l:Name = 'BOXING DAY'
 do AddToQ
!----------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ColumbusDay     routine
 l:date = date(10,1,r:yr)           !Columbus Day
 loop
    if l:date % 7 = 1               !if a Monday
       l:date += 7                  !add a week

       l:Name = 'COLUMBUS DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!--------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ConfederateMemorialDay      routine
 l:date = date(4,30,r:yr)               !Confederate Memorial Day
 loop
    if l:date % 7 = 1                  !if a Monday

       l:Name = 'CONFEDERATE MEMORIAL DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!---------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Easter      routine
 r:a    = r:yr % 19
 r:b    = r:yr / 100
 r:c    = r:yr % 100
 r:d    = r:b  / 4
 r:e    = r:b  % 4
 r:f    = (r:b + 8) / 25
 r:g    = (r:b - r:f + 1) / 3
 r:h    = ((19 * r:a) + r:b - r:d - r:g + 15) % 30
 r:i    = r:c / 4
 r:k    = r:c % 4
 r:l    = (32 + (2 * r:e) + (2 * r:i) - r:h - r:k) % 7
 r:m    = (r:a + (11 * r:h) + (22 * r:l)) / 451
 r:n    = (r:h + r:l - (7 * r:m) + 114) / 31
 r:p    = (r:h + r:l - (7 * r:m) + 114) % 31
 r:p   += 1

 l:date   = date(r:n,r:p-2,r:yr)
 l:Name = 'GOOD FRIDAY'
 do AddToQ

 l:date   = date(r:n,r:p,r:yr)
 l:Name = 'EASTER SUNDAY'
 do AddToQ

 l:date   = date(r:n,r:p+1,r:yr)
 l:Name = 'EASTER MONDAY'
 do AddToQ
!-------------------------------

!The following is an algorithm by which the date of Easter may be calculated.
!
!   Divide                      by       Quotient     Remainder
!
!the year x                     19          -             a
!the year x                    100          b             c
!b                               4          d             e
!b + 8                          25          f             -
!b - f + 1                       3          g             -
!19*a + b - d - g + 15          30          -             h
!c                               4          i             k
!32 + 2*e + 2*i - h - k          7          -             L
!a + 11*h + 22*L               451          m             -
!h + L - 7*m + 114              31          n             p
!
!Then n is the number of the month (3 = March; 4 = April) and p + 1 is the day of that
!month upon which Easter Sunday falls. The symbol * means the product of the two numbers.

!For those interested, the following table lists the date of Easter Sunday up to the year 2010.

!      March 31, 2002        April 20, 2003       April 11, 2004
!      March 27, 2005        April 16, 2006       April 08, 2007
!      March 23, 2008        April 12, 2009       April 04, 2010

!                1997    1998    1999    2000    2001    2002    2003    2004
!Good Friday    28 Mar  10 Apr  2 Apr   21 Apr  13 Apr  29 Mar  18 Apr  9 Apr
!Easter         30 Mar  12 Apr  4 Apr   23 Apr  15 Apr  31 Mar  20 Apr  11 Apr
!Easter Monday  31 Mar  13 Apr  5 Apr   24 Apr  16 Apr  1 Apr   21 Apr  12 Apr
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LabourDay       routine
 l:date = date(9,1,r:yr)
 loop
    if l:date % 7 = 1

       case clip(upper(l:sCountry))
       of 'CAN'
          l:Name = 'LABOUR DAY'
       of 'USA'
          l:Name = 'LABOR DAY'
       end

       do AddToQ

       break
    end
    l:date += 1
 end
!-------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LincolnsBirthday        routine
 l:date = date(2,12,r:yr)            !Lincoln's Birthday
 if l:date % 7 = 6                   !if a Saturday
    l:date -= 1                      !set to Friday
 end
 if l:date % 7 = 0                   !if a Sunday
    l:date += 1                      !set to Monday
 end

 l:Name = 'LINCOLN''s BIRTHDAY'
 do AddToQ
!--------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MayElectionDay      routine
 l:date = date(5,2,r:yr)              !Tuesday on or after 2 May Primary Election Day
 if l:date % 2 = 0                     !if an even year
    loop
       if l:date % 7 = 2                  !if a Tuesday

          l:Name = 'MAY PRIMARY ELECTION DAY'
          do AddToQ

          break
       end
       l:date += 1
    end
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NativeDay       routine
 l:date = date(10,1,r:yr)              !Tuesday on or after 2 May Primary Election Day
 loop
    if l:date % 7 = 1                  !if a Monday
       l:date += 1                     !add a week

       l:Name = 'NATIVE AMERICAN DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NewYearsDay     routine
 l:date = date(1,1,r:yr)

 omit('***')
 if l:date % 7 = 0                      !if Jan 1 is a Sunday
    l:date += 1                         !Monday becomes a holiday
 end
 !***

 l:Name = 'NEW YEAR''S DAY'
 do AddToQ
!--------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NovElectionDay      routine
 l:date = date(11,2,r:yr)              !November Election Day
 if l:date % 2 = 0                     !if an even year
    loop
       if l:date % 7 = 2                  !if a Tuesday

          l:Name = 'NOVEMBER ELECTION DAY'
          do AddToQ

          break
       end
       l:date += 1
    end
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
PatriotsDay     routine
 l:date = date(4,1,r:yr)           !Patriot's Day
 loop
    if l:date % 7 = 1               !if a Monday
       l:date += 14                 !add 2 weeks

       l:Name = 'PATRIOT''s DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-----------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
RemembranceDay      routine
 l:Date    = date(11,11,r:yr)

 omit('***')
 if l:date % 7 = 6                   !if it falls on a Saturday
    l:date -= 1                      ! move it to Friday
 end
 if l:date % 7 = 0                   !if it falls on a Sunday
    l:date += 1
 end                                 ! move it to Monday
 !***

 case clip(upper(l:sCountry))
 of 'CAN'
    l:Name = 'REMEMBRANCE DAY HOLIDAY'
 of 'USA'
    l:Name = 'VETERAN''S DAY HOLIDAY'
 end

 do AddToQ
!-----------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SecondThanksgiving      routine
 l:Date   = loc:Thanksgiving + 1
 l:Name = 'SECOND DAY OF THANKSGIVING'
 do AddToQ
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
XmasDay     routine
 l:date = date(12,25,r:yr)

 omit('***')
 if l:date % 7 = 6                   !if it falls on a Saturday
    l:date -= 1                      ! move it to Friday
 end
 if l:date % 7 = 0                   !if it falls on a Sunday
    l:date += 1
 end                                 ! move it to Monday
 !***

 l:Name = 'CHRISTMAS HOLIDAY'
 do AddToQ
!----------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
XmasEveDay      routine
 l:date = date(12,24,r:yr)               !Christmas Eve Day
 l:Name = 'CHRISTMAS EVE DAY'
 do AddToQ
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Canada      routine
 do FederalHolidaysCAN

 case clip(upper(l:sProvince))
 of 'AB'
    do AB
 of 'BC'
    !do BC
    !BC      routine         !BRITISH COLUMBIA
    !The Government of British Columbia lists the Canadian public holidays
    !given above as statutory holidays except Easter Sunday, Easter Monday
    !and Boxing Day which are not holidays. They add British Columbia Day
    !which is the 1st Monday in August, co-inciding with the general date
    !for provincial and civic holidays. Remembrance Day (11 November) is a statutory holiday for all.

 of 'MB'
    !do MB
    !MB     routine          !MANITOBA
    !Same as federal

 of 'NB'
    !do NB
    !NB      routine         !NEW BRUNSWICK
    !The Government of New Brunswick lists New Year's Day, Good Friday, Canada Day,
    !New Brunswick Day (the 1st Monday in August, co-inciding with the general date
    !for provincial and civic holidays), Labour Day and Christmas Day as paid holidays.

 of 'NF'
    do NF
 of 'NT'
    do NT
 of 'NS'
    do NS
 of 'NU'
    do NU
 of 'ON'
    !do ON
    !ON      routine         !ONTARIO
    !Statutory holidays are as the Federal ones.
    !There are civic holidays on the 1st Monday in August (Simcoe Day)) and on 11 November.

 of 'PE'
    !do PE
    !PE       routine        !PRINCE EDWARD ISLAND
    !Statutory holidays are as the Federal ones. The 1st Monday in August is not an official
    !holiday but is often given by employers

 of 'QC'
    do QC
 of 'SK'
    !do SK
    !SK       routine        !SASKATCHEWAN
    !Saskatchewan day is the 1st Monday in August, in line with the Civic holiday.

 of 'YT'
    do YT
 end
!****************************************************************************
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AB      routine         !ALBERTA
!The same as the federal holidays plus Alberta Family Day
!on the 3rd Monday in February (government and most offices
!close but many stores stay open) and an optional civic holiday on the 1st Monday in August

 l:date = date(2,1,r:yr)        !Alberta Family Day
 loop
    if l:date % 7 = 1           !if a Monday

       l:date += 14
       l:Name = 'ALBERTA FAMILY DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!****************************************************************************
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NF      routine         !NEWFOUNDLAND AND LABRADOR
!The Provincial holiday is Cabot 500 Day (Discovery Day) on June 24.

!In St John's and Harbour Grace, the Regatta Days are also holidays.
!St. John's falls on the first Wednesday in August, weather permitting,
!but the Harbour Grace regatta date is unknown.
!Remembrance Day - Nov 11 - Civic Holiday

 l:Date   = date(6,24,r:yr)
 l:Name = 'CABOT 500 DAY'
 do AddToQ
!----------
 l:date = date(8,1,r:yr)        !Regatta Day
 loop
    if l:date % 7 = 3           !if a Wednesday

       l:Name = 'ST. JOHN''S REGATTA DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NT      routine         !NORTHWEST TERRITORIES
!The Government of Nunavutthe Northwest Territories Labour Standards Acts
!and Amendments list the following:-

!Victoria Day is not listed.
!A Civic Holiday is granted on the 1st Monday in August.
!A day is to be fixed by the Governor for observance of the birthday of the reigning sovereign.
!This was Friday 9 July in 1999 and, since the usual date is the 2nd Saturday in July, it is presumed,
!though withouth official confirmation so far, that the date will be the Friday before the 2nd Saturday in June.
!Remembrance Day (11 November) is a general holiday (i.e. for all, not just government workers).

 l:date = date(6,1,r:yr)        !REIGNING SOVEREIGN'S BIRTHDAY
 loop
    if l:date % 7 = 6           !if a Saturday

       l:date += 6
       l:Name = 'REIGNING SOVEREIGN''S BIRTHDAY'
       do AddToQ

       break
    end
    l:date += 1
 end

!****************************************************************************
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NU      routine         !NUNAVUT
!The Government of Nunavut lists exactly the same laws as those of the Northwest Territories

 do NT   !do Nortwest Territories calcs
!****************************************************************************
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NS      routine         !NOVA SCOTIA
!The Government of Nova Scotia lists the same official holidays as the Canadian Government except
!the Provincial holiday and adds

!24 December Christmas Eve (1/2 Day)

!They do not list a provincial holiday but state that "an additional holiday will be taken on a day that,
!in the opinion of the Department of Human Resources is recognized as a Provincial or Civil Holiday in an
!area in which the employee is employed (for example, in Halifax and Dartmouth, Halifax and Dartmouth Natal Day).
!If there is no such recognized holiday in the area, the holiday will be taken on the first Monday in August".
!Both the Halifax and Dartmouth Natal Days fall on the 1st Monday in August.

 l:date = date(12,24,r:yr)         !Xmas Eve Day
 l:Name = 'CHRISTMAS EVE DAY'
 do AddToQ
!--------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
QC       routine        !QUEBEC
!The government of Quebec lists the same official holidays as the Canadian Government and
!adds the second day of the New Year (January 2) and Boxing Day (26 December).
!The provincial holiday however, is not in August, but 24 June Quebec National Day or St Jean Baptiste Day

 l:date = date(1,2,r:yr)            !Day After New Year's Day
 l:Name = 'JANUARY 2nd'
 do AddToQ
!------------
 l:date = date(6,24,r:yr)            !Quebec National Day
 l:Name = 'QUEBEC NATIONAL DAY'
 do AddToQ
!--------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
YT       routine        !YUKON
!In addition to Federal holidays, there are Provincial holidays (replacing the 1st Monday in August)
!Heritage Day  - Friday before the last Sunday in February
!Discovery Day - Monday nearest 17 August
 data
r:mod      byte
 code
 l:date = date(2,28,r:yr)
 if l:lYear % 4 = 0      !if a leap year
    l:date += 1
 end

 loop                                   !Heritage Day
    if l:date % 7 = 0                   !if a Sunday
       l:date -= 2                      ! subtract 2 days

       l:Name = 'HERITAGE DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!---------------
 l:date = date(8,17,r:yr)

 r:mod = l:date % 7                  !Discovery Day
 case r:mod                          !set l:date to closest Monday to Aug 17
 of 0                     !Sun
    l:date += 1
 of 1                     !Mon
 of 2                     !Tue
    l:date -= 1
 of 3                     !Wed
    l:date -= 2
 of 4                     !Thur
    l:date -= 3
 of 5                     !Fri
    l:date += 3
 of 6                     !Sat
    l:date += 2
 end

 l:Name = 'DISCOVERY DAY'
 do AddToQ
!----------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
USA     routine
 do FederalHolidaysUSA

 case clip(upper(l:sProvince))
 of 'AL'    !Alabama
    do Alabama
 of 'AK'
    do Alaska
 of 'AZ'
    do Arizona
 of 'AR'
    do XmasEveDay           !24 December Christmas Eve Day
 of 'CA'
    do California
 of 'CO'                    !Colorado - Same as Federal
 of 'CT'
    do LincolnsBirthday     !12 February Lincoln's Birthday
 of 'DE'
    do Delaware
 of 'DC'                    !District Of Columbia - Same as Federal
 of 'FL'
    do Florida
 of 'GA'
    do Georgia
 of 'HI'
    do Hawaii
 of 'ID'                    !Idaho - Same as Federal
 of 'IN'                    !Indiana
    do LincolnsBirthday     !12 February Lincoln Day
    do MayElectionDay       !Tuesday on or after 2 May Primary Election Day
    do NovElectionDay       !Tuesday on or after 2 November Election Day
    do XmasEveDay           !24 December Christmas Eve

 of 'IL'
    do Illinois
 of 'IA'                    !Iowa
    do SecondThanksgiving   !The Friday after Thanksgiving 2nd Day of Thanksgiving
    do LincolnsBirthday     !12 February Lincoln's Birthday

 of 'KS'                    !Kansas
    do LincolnsBirthday     !12 February Lincoln's Birthday

 of 'KY'                    !Kentucky
    do XmasEveDay           !24 December Christmas Eve

 of 'LA'                    !Louisiana
    do NovElectionDay       !Tuesday on or after 2 November Election Day

 of 'ME'                    !Maine
    do PatriotsDay          !3rd Monday in April Patriot's Day

 of 'MD'
    do Maryland
 of 'MA'
    do Massachusetts
 of 'MI'                    !Michigan
    do LincolnsBirthday     !12 February Lincoln's Birthday
    do XmasEveDay           !24 December Christmas Eve

 of 'MN'                    !Minnesota
    do SecondThanksgiving   !Friday after Thanksgiving Holiday

 of 'MS'                    !Mississippi
    do ConfederateMemorialDay  !Last Monday in April Confederate Memorial Day

 of 'MO'
    do Missouri
 of 'MT'                    !Montana
    do NovElectionDay       !Tuesday on or after 2 November Election Day

 of 'NE'
    do Nebraska
 of 'NH'                    !NewHampshire
    do NovElectionDay       !Tuesday on or after 2 November Election Day

 of 'NJ'
    do NewJersey
 of 'NM'                    !NewMexico
    do SecondThanksgiving   !Day after Thanksgiving Holiday for State Employees in lieu of President's Day

 of 'NY'                    !New York
    do LincolnsBirthday     !12 February Lincoln's Birthday1
    do NovElectionDay       !Tuesday on or after 2 November Election Day

 of 'NC'                    !NorthCarolina
    do XmasEveDay           !24 December Christmas Eve
    do BoxingDay            !26 December Boxing Day

 of 'ND'                    !North Dakota - Same as Federal
 of 'OH'                    !Ohio - Same as Federal
 of 'OK'                    !Oklahoma - Same as Federal
 of 'OR'                    !Oregon - Same as Federal
 of 'PA'                    !Pennsylvania
    do LincolnsBirthday     !12 February Lincoln's Birthday

 of 'SC'                    !South Carolina
    do ColumbusDay          !Columbus Day
    do NovElectionDay       !Tuesday on or after 2 November Election Day
    do BoxingDay            !26 December Boxing Day

 of 'SD'                    !South Dakota
    do NativeDay            !2nd Monday in October Native American Day


 of 'TN'                    !Tennessee
    do ColumbusDay          !Columbus Day
    do NovElectionDay       !Tuesday on or after 2 November Election Day

 of 'TX'                    !Texas
    do Texas

 of 'UT'                    !Utah
    do Utah

 of 'VT'                    !Vermont
    do Vermont

 of 'VA'                    !Virginia
    do Virginia

 of 'WA'                    !Washington
    do LincolnsBirthday     !12 February Lincoln's Birthday
    do ColumbusDay          !Columbus Day

 of 'WV'                    !WestVirginia
    do WestVirginia

 of 'WI'                    !Wisconsin - Same as Federal
 of 'WY'                    !Wyoming
    do NativeDay
 end
!--------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Alabama     routine
!Last Monday in April Confederate Memorial Day
!1st Monday in June Jefferson Davis's Birthday

 do ConfederateMemorialDay

 l:date = date(6,1,r:yr)               !Jefferson Davis's Birthday
 loop
    if l:date % 7 = 1                  !if a Monday

       l:Name = 'JEFFERSON DAVIS''s BIRTHDAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Alaska     routine
!Last Monday in March Seward's Day
!18 October Alaska Day

 l:date = date(3,31,r:yr)               !Seward's Day
 loop
    if l:date % 7 = 1                  !if a Monday

       l:Name = 'SEWARD''s DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!-----------------
 l:date = date(10,18,r:yr)           !Alaska Day
 if l:date % 7 = 6                   !if a Saturday
    l:date -= 1                      !set to Friday
 end
 if l:date % 7 = 0                   !if a Sunday
    l:date += 1                      !set to Monday
 end

 l:Name = 'ALASKA DAY'
 do AddToQ
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Arizona     routine
!The following are listed in the Arizona Code as holidays but invariably fall on a Sunday
!and are not moved to another day. They therefore only affect those who might normally work on a Sunday:
!2nd Sunday in May Mothers' Day
!3rd Sunday in June Fathers' Day
!1st Sunday in August American Family Day
!Sunday on or before 17 September Constitution Commemoration Day

 l:date = date(5,1,r:yr)               !Mothers' Day
 loop
    if l:date % 7 = 0                  !if a Sunday
       l:date += 7                     !add a week

       l:Name = 'MOTHERS'' DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!---------
 l:date = date(6,1,r:yr)               !Fathers' Day
 loop
    if l:date % 7 = 0                  !if a Sunday
       l:date += 14                     !add 2 weeks

       l:Name = 'FATHERS'' DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!----------
 l:date = date(8,1,r:yr)               !American Family Day
 loop
    if l:date % 7 = 0                  !if a Sunday

       l:Name = 'AMERICAN FAMILY DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!---------
 l:date = date(9,17,r:yr)               !Constitution Commemoration Day
 loop
    if l:date % 7 = 0                  !if a Sunday

       l:Name = 'CONSTITUTION COMMEMORATION DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
California     routine
!12 February Lincoln's Birthday
!31 March César Chávez Day1
!9 September Admission Day
!Friday after Thanksgiving Holiday

 do LincolnsBirthday
 do SecondThanksgiving

 l:date = date(3,31,r:yr)            !César Chávez Day
 if l:date % 7 = 6                   !if a Saturday
    l:date -= 1                      !set to Friday
 end
 if l:date % 7 = 0                   !if a Sunday
    l:date += 1                      !set to Monday
 end

 l:Name = 'CéSAR CHáVEZ DAY'
 do AddToQ
!------------
 l:date = date(9,9,r:yr)            !Admission Day
 if l:date % 7 = 6                   !if a Saturday
    l:date -= 1                      !set to Friday
 end
 if l:date % 7 = 0                   !if a Sunday
    l:date += 1                      !set to Monday
 end

 l:Name = 'ADMISSION DAY'
 do AddToQ
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Delaware        routine
!Tuesday on or after 2 November Election Day (even years only)
!Friday after Thanksgiving 2nd Day of Thanksgiving

!Holidays given above are according to the State Code,
!but several reliable sources add the following, which are not in the code:
!Last Monday in May Memorial Day (already added in Federal holidays)
!24 December Christmas Eve

 do SecondThanksgiving
 do XmasEveDay
 do NovElectionDay
!---------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Florida     routine
!Friday after Thanksgiving 2nd Day of Thanksgiving
!24 December Christmas Eve

!Apart from the above, the following are listed as legal holidays:-
!19 January Birthday of Robert E Lee
!12 February Lincoln's Birthday
!15 February Birthday of Susan B Anthony
!2 April Pascua Florida Day
!26 April Confederate Memorial Day
!3 June Birthday of Jefferson Davis
!14 June Flag Day  (done in Federal holidays)
!2nd Monday in October Farmers' Day
!Tuesday on or after 2 November Election Day (in even years only)
!and the following alternative date is given:-
!15 January Birthday of Dr Martin Luther King Jr.

 do SecondThanksgiving
 do XmasEveDay
 do LincolnsBirthday
 do NovElectionDay

 l:date = date(1,19,r:yr)           !Robert E Lee's Birthday
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'ROBERT E LEE''s BIRTHDAY'
 do AddToQ
!--------------
 l:date = date(2,15,r:yr)           !Susan B Anthony's Birthday
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'SUSAN B ANTHONY''s BIRTHDAY'
 do AddToQ
!-----------------
 l:date = date(4,2,r:yr)           !Pascua Florida Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'PASCUA FLORIDA DAY'
 do AddToQ
!-----------------
 l:date = date(4,26,r:yr)           !Confederate Memorial Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'CONFEDERATE MEMORIAL DAY'
 do AddToQ
!--------------
 l:date = date(6,3,r:yr)            !Jefferson Davis's Birthday
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'JEFFERSON DAVIS''s BIRTHDAY'
 do AddToQ
!-------------------
 l:date = date(10,1,r:yr)            !2nd Monday in October Farmers' Day

 loop
    if l:date % 7 = 1               !if a Monday
       l:date += 7                  !add a week

       l:Name = 'FARMERS'' DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-------------------
 l:date = date(1,15,r:yr)           !15 January Birthday of Dr Martin Luther King Jr.
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1
 end

 l:Name = 'MARTIN LUTHER KING JR''s BIRTHDAY'
 do AddToQ
!-------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Georgia         routine
!Last Monday in April Confederate Memorial Day
!Friday after Thanksgiving Thanksgiving Holiday
!24 December Christmas Eve

 do SecondThanksgiving
 do XmasEveDay

 l:date = date(4,30,r:yr)           !Confederate Memorial Day

 loop
    if l:date % 7 = 1               !if a Monday
       l:date += 7                  !add a week

       l:Name = 'CONFEDERATE MEMORIAL DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!-------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Hawaii      routine
!26 March Prince Jonah Kuhio Kalanianaole Day
!11 June King Kamehameha Day
!3rd Friday in August Admission Day
!Tuesday on or after 2 November Election Day

 do NovElectionDay

 l:date = date(3,26,r:yr)           !Prince Jonah Kuhio Kalanianaole Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'PRINCE JONAH KUHIO KALANIANAOLE DAY'
 do AddToQ
!--------------
 l:date = date(6,11,r:yr)           !11 June King Kamehameha Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'KING KAMEHAMEHA DAY'
 do AddToQ
!--------------
 l:date = date(8,1,r:yr)           !Admission Day
 loop
    if l:date % 7 = 5               !if a Friday
       l:date += 14                  !add 2 weeks

       l:Name = 'ADMISSION DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-----------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Illinois        routine
!12 February Lincoln's Birthday
!1st Monday in March Casimir Pulaski's Birthday
!Tuesday on or after 2 November Election Day1

 do NovElectionDay
 do LincolnsBirthday

 l:date = date(3,1,r:yr)           !Casimir Pulaski's Birthday
 loop
    if l:date % 7 = 1               !if a Monday

       l:Name = 'CASIMIR PULASKI''s BIRTHDAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-----------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Maryland        routine
!12 February Lincoln's Birthday
!25 March Maryland Day
!12 September Defenders Day
!Tuesday on or after 2 November Election Day
!Friday after Thanksgiving Thanksgiving Holiday

 do LincolnsBirthday
 do NovElectionDay
 do SecondThanksgiving

 l:date = date(3,25,r:yr)           !Maryland Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'MARYLAND DAY'
 do AddToQ
!--------------
 l:date = date(9,12,r:yr)           !Defenders Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'DEFENDERS'' DAY'
 do AddToQ
!------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Massachusetts       routine
!17 March Evacuation Day in Suffolk county only
!3rd Monday in April Patriots Day
!17 June Bunker Hill Day in Suffolk county only

 do PatriotsDay

 l:date = date(3,17,r:yr)           !Evacuation Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'EVACUATION DAY'
 do AddToQ
!--------------
 l:date = date(6,17,r:yr)           !Bunker Hill Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'BUNKER HILL DAY'
 do AddToQ
!------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Missouri        routine
!12 February Lincoln's Birthday
!8 May Truman Day

 do LincolnsBirthday

 l:date = date(5,8,r:yr)           !Truman Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'TRUMAN DAY'
 do AddToQ
!------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Nebraska        routine
!Last Friday in April Arbor Day
!Friday following Thanksgiving 2nd Day (State and local govt. offices closed)

 do SecondThanksgiving

 l:date = date(4,30,r:yr)           !Arbor Day
 loop
    if l:date % 7 = 5               !if a Friday

       l:Name = 'ARBOR DAY'
       do AddToQ

       break
    end
    l:date -= 1
 end
!--------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Nevada      routine
!31 October Nevada Day
!Friday after Thanksgiving Family Day

 do SecondThanksgiving

 l:date = date(10,31,r:yr)           !Nevada Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'NEVADA DAY'
 do AddToQ
!------------------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
NewJersey       routine
!12 February Lincoln's Birthday

!Tuesday on or after 2 November Election Day
!   In both odd and even years - New Jersey has State elections in odd years
!   and Federal elections are of course in even years.
!   Both types of election are a holiday.

 do LincolnsBirthday

 l:date = date(11,2,r:yr)              !November Election Day - regardless of year
 loop
    if l:date % 7 = 2                  !if a Tuesday

       l:Name = 'NOVEMBER ELECTION DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!-------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
RhodeIsland         routine
!4 May Rhode Island Independence Day
!2nd Monday in August Victory Day
!Tuesday on or after 2 November Election Day

 do NovElectionDay

 l:date = date(5,4,r:yr)           !Rhode Island Independence Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'RHODE ISLAND INDEPENDENCE DAY'
 do AddToQ
!------------------------
 l:date = date(8,1,r:yr)            !Victory Day
 loop
    if l:date % 7 = 1               !if a Monday
       l:date += 7                  !add a week

       l:Name = 'VICTORY DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!--------------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Texas       routine
!19 January Confederate Heroes' Day
!2 March Texas Independence Day
!21 April San Jacinto Day
!19 June Emancipation Day in Texas
!27 August Lyndon Baines Johnson Day
!The Day after Thanksgiving Thanksgiving 2nd Day
!24 December Christmas Eve
!26 December Boxing Day
!31 March César Chávez Day

 do SecondThanksgiving
 do XmasEveDay
 do BoxingDay

 l:date = date(1,19,r:yr)           !Confederate Heroes' Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'CONFEDERATE HEROES'' DAY'
 do AddToQ
!-----------
 l:date = date(3,2,r:yr)           !Texas Independence Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'TEXAS INDEPENDENCE DAY'
 do AddToQ
!-----------
 l:date = date(4,21,r:yr)           !San Jacinto Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'SAN JACINTO DAY'
 do AddToQ
!-----------
 l:date = date(6,19,r:yr)           !Emancipation Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'EMANCIPATION DAY'
 do AddToQ
!-----------
 l:date = date(8,27,r:yr)           !Lyndon Baines Johnson Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'LYNDON BAINES JOHNSON DAY'
 do AddToQ
!-----------
 l:date = date(3,31,r:yr)           !César Chávez Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'CéSAR CHáVEZ DAY'
 do AddToQ
!-----------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Utah        routine
!24 July Pioneer Day

 l:date = date(7,24,r:yr)           !Pioneer Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'PIONEER DAY'
 do AddToQ
!-----------

[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Vermont     routine
!12 February Lincoln's Birthday
!1st Tuesday in March Town Meeting Day
!16 August Bennington Battle Day

 do LincolnsBirthday

 l:date = date(3,1,r:yr)            !Town Meeting Day
 loop
    if l:date % 7 = 2               !if a Tuesday

       l:Name = 'TOWN MEETING DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!--------------

 l:date = date(8,16,r:yr)           !Bennington Battle Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'BENNINGTON BATTLE DAY'
 do AddToQ
!-----------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Virginia        routine
!3rd Monday in January Lee-Jackson-King Day
!20th January Inauguration Day

 l:date = date(1,1,r:yr)            !Lee-Jackson-King Day
 loop
    if l:date % 7 = 1               !if a Monday

       l:Name = 'LEE-JACKSON-KING DAY'
       do AddToQ

       break
    end
    l:date += 1
 end
!--------------

 l:date = date(1,20,r:yr)           !Inauguration Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'INAUGURATION DAY'
 do AddToQ
!-----------
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
WestVirginia        routine
!12 February Lincoln's Birthday
!20 June West Virginia Day
!24 December Christmas Eve
!31 December New Year's Eve

 do LincolnsBirthday
 do XmasEveDay

 l:date = date(6,20,r:yr)           !West Virginia Day
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'WEST VIRGINIA DAY'
 do AddToQ
!-----------

 l:date = date(12,31,r:yr)           !New Year's Eve
 if l:date % 7 = 6                  !if a Saturday
    l:date -= 1                     !set to Friday
 end
 if l:date % 7 = 0                  !if a Sunday
    l:date += 1                     !set to Monday
 end

 l:Name = 'NEW YEAR''s EVE'
 do AddToQ
!-----------
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME Calendar
PROTOTYPE '(*? PassedDate),BYTE,PROC'
PARAMETERS '(*? PassedDate) !,BYTE,PROC'
GLOBAL
[COMMON]
DESCRIPTION 'Calendar'
FROM ABC Window
MODIFIED '2017/06/09' '22:20:00'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('d873de2f-65ba-4549-9257-0dced9b6da60'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l Calendar Date:'),USE(?lCalendarDate:Prompt)
! ENTRY(@n-14),USE(lCalendarDate),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lCalendarDate),RIGHT(1)
lCalendarDate            LONG
!!> GUID('07bd0434-2842-45a8-b645-edb41ca2d45e'),PROMPT('l Calendar Date:'),HEADER('l Calendar Date'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n3),USE(RetVal)
[REPORTCONTROLS]
! STRING(@n3),USE(RetVal)
RetVal                   BYTE
!!> GUID('6fa63392-ed5f-4b96-ad05-9259d6da2681'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (RetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('No Special Action')
WHEN  ('?Calendar') ('No Special Action')
WHEN  ('?CalendarFrame') ('No Special Action')
WHEN  ('?Cancel') ('No Special Action')
WHEN  ('?Select') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel') ('')
WHEN  ('?Select') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel') ('')
WHEN  ('?Select') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 2
WHEN  ('?Cancel') ()
WHEN  ('?Select') ()

%ButtonThread DEPEND %Control LONG TIMES 2
WHEN  ('?Cancel') (0)
WHEN  ('?Select') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('25000')
WHEN  ('?Calendar') ('25000')
WHEN  ('?CalendarFrame') ('25000')
WHEN  ('?Cancel') ('25000')
WHEN  ('?Select') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel') ('')
WHEN  ('?Select') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?Cancel') ()
WHEN  ('?Select') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 2
WHEN  ('?Cancel') (0)
WHEN  ('?Select') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('None')
WHEN  ('?Calendar') ('None')
WHEN  ('?CalendarFrame') ('None')
WHEN  ('?Cancel') ('None')
WHEN  ('?Select') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel') ('')
WHEN  ('?Select') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?Cancel') ()
WHEN  ('?Select') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 5
WHEN  ('') (1)
WHEN  ('?Calendar') (1)
WHEN  ('?CalendarFrame') (1)
WHEN  ('?Cancel') (1)
WHEN  ('?Select') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?Calendar')TIMES 0
WHEN  ('?CalendarFrame')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?Select')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?Calendar')TIMES 0
WHEN  ('?CalendarFrame')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?Select')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?Calendar')TIMES 0
WHEN  ('?CalendarFrame')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?Select')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?Calendar')TIMES 0
WHEN  ('?CalendarFrame')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?Select')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?CalendarFrame') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Off')
WHEN  ('?Calendar') ('Off')
WHEN  ('?CalendarFrame') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('')
WHEN  ('?Calendar') ('')
WHEN  ('?CalendarFrame') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 3
WHEN  ('') (0)
WHEN  ('?Calendar') (0)
WHEN  ('?CalendarFrame') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 3
WHEN  ('') (-1)
WHEN  ('?Calendar') (-1)
WHEN  ('?CalendarFrame') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 3
WHEN  ('') (0)
WHEN  ('?Calendar') (0)
WHEN  ('?CalendarFrame') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 3
WHEN  ('') (-1)
WHEN  ('?Calendar') (-1)
WHEN  ('?CalendarFrame') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 3
WHEN  ('') (0)
WHEN  ('?Calendar') (0)
WHEN  ('?CalendarFrame') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Select')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?Cancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GlobalResponse = RequestCancelled
[GROUP]
PRIORITY 5100
INSTANCE 2
[END]
[END]
WHEN '?Select'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
PassedDate = lCalendarDate
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
GlobalResponse = RequestCompleted
[GROUP]
PRIORITY 5200
INSTANCE 1
[END]
[END]
WHEN '?Clear '
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
PassedDate = 0
GlobalResponse = RequestCompleted
POST(Event:CloseWindow)
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
lCalendarDate = PassedDate
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'CloseWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RetVal = GlobalResponse
[END]
WHEN 'OpenWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
Calendar:6.SetDateRange(DATE(01,01,1801),DATE(12,31,9999))
Calendar:6.SetBackGrColor(0)
!uxTheme.SetWindowTheme(Calendar:6.GethWnd(),szNull,szNull)
!uxTheme.EnableTheming(FALSE)
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 90
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
!uxTheme              CuxTheme
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
szNull   CSTRING('')
[END]
[END]
[END]
[END]
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 3
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (0)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (1)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[INSTANCE]
INSTANCE 1
[ADDITION]
NAME KCR KCR_SubClassClientWindow
[INSTANCE]
INSTANCE 5
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassClientWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Client Window Extension')
[ADDITION]
NAME KCR KCR_Calendar
[INSTANCE]
INSTANCE 6
PARENT 5
[PROMPTS]
%TplName DEFAULT  ('KCR_Calendar (Devuna)')
%TplDescription DEFAULT  ('Add Calendar to Procedure')
%Calendar DEFAULT  ('?Calendar')
%DateField DEFAULT  ('lCalendarDate')
%ChangeNotificationEvent DEFAULT  ('EVENT:USER')
[WINDOW]
Window  WINDOW('Select Date...'),AT(,,120,106),FONT('Segoe UI Semilight',11),DOUBLE,CENTER, |
          ICON('Calendar.ico'),GRAY,IMM,HLP('Calendar')
          BUTTON('&Select'),AT(10,88,49,14),USE(?Select),LEFT,ICON('OK.ICO'),#ORIG(?Button1), |
            #ORDINAL(1)
          BUTTON('Cancel'),AT(62,88,49,14),USE(?Cancel),LEFT,ICON('CANCEL.ICO'),#ORIG(?Button2), |
            #ORDINAL(2)
          SHEET,AT(2,2,116,82),USE(?CalendarFrame),#ORIG(?Box1),#ORDINAL(3)
          END
          BOX,AT(3,3,114,80),USE(?Calendar),COLOR(COLOR:Black),FILL(009E6D39h),LINEWIDTH(1), |
            #ORIG(?Box2),#ORDINAL(4)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:36'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME OpportunisticLockingDisabled
PROTOTYPE '(),BYTE'
[COMMON]
DESCRIPTION 'Returns TRUE if OpLocks are disabled'
FROM ABC Source
CATEGORY 'Utility'
MODIFIED '2017/06/09' '22:56:28'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
bResult                     BYTE(TRUE)
osvi                        LIKE(OSVERSIONINFO)

VER_PLATFORM_WIN32_WINDOWS  EQUATE(1)
VER_PLATFORM_WIN32_NT       EQUATE(2)

!---------------------------
!Windows Versions
!---------------------------
!Windows NT 3.51        3.0
!Windows 95             4.0
!Windows NT 4.0         4.0
!Windows 98             4.10
!Windows ME             4.90
!Windows 2000           5.0
!Windows XP             5.1
!Windows Server 2003    5.2
!Windows Server 2003 R2 5.2
!Windows Vista          6.0
!Windows Server 2008    6.0
!Windows Server 2008 R2 6.1
!Windows 7              6.1
!---------------------------
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  osvi.dwOSVersionInfoSize = size(osvi)
  IF GetVersionEx(osvi)
     CASE osvi.dwMajorVersion
     OF 3
        !Windows NT 3.51
        DO CheckEnableOpLockForceClose
        DO CheckEnableOpLocks
     OF 4
        CASE osvi.dwMinorVersion
        OF 0
           CASE osvi.dwPlatformId
           OF VER_PLATFORM_WIN32_WINDOWS
              !Windows 95
              DO CheckDiscardCacheOnOpen
           OF VER_PLATFORM_WIN32_NT
              !Windows NT 4.0
              DO CheckEnableOplockForceClose
              DO CheckEnableOplocks
           END
        OF 10
           !Windows 98
           DO CheckDiscardCacheOnOpen
        OF 90
           !Windows ME
           DO CheckDiscardCacheOnOpen
        END
     OF 5
        CASE osvi.dwMinorVersion
        OF 0
           !Windows 2000
           DO CheckEnableOplockForceClose
           DO CheckEnableOplocks
        OF 1
           !Windows XP
           DO CheckEnableOpLockForceClose
           DO CheckEnableOpLocks
        OF 2
           !Windows Server 2003 Family
           DO CheckEnableOpLockForceClose
           DO CheckEnableOpLocks
        END
     OF 6
        CASE osvi.dwMinorVersion
        OF 0
           !Windows Vista, Windows Server 2008
           DO CheckEnableOpLockForceClose
           DO CheckEnableOpLocks
           !DO CheckSmb2
        OF 1
           !Windows 7, Windows Server 2008 R2
           DO CheckEnableOpLockForceClose
           DO CheckEnableOpLocks
           !DO CheckSmb2
        END
     END
  ELSE
     !error getting os version
  END
  RETURN(bResult)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckDiscardCacheOnOpen ROUTINE
  DATA
szSubKey    CSTRING(256)
cc          ULONG
hkResult    ULONG
szValueName CSTRING(33)
cbData      ULONG(0)
dwType      ULONG
bValue      BYTE(0)

  CODE
  szSubKey = 'SYSTEM\CurrentControlSet\Services\VxD\VREDIR'
  cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hkResult)
  IF ~cc
     szValueName = 'DiscardCacheOnOpen'
     cbData = 1
     cc = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(bValue),cbData)
     IF ~cc
        IF bValue = 0
           bResult = FALSE
        END
     ELSE
        bResult = FALSE
     END
     RegCloseKey(hkResult)
  ELSE  !not found default is 0
     bResult = FALSE
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckEnableOpLockForceClose ROUTINE
  DATA
szSubKey    CSTRING(256)
cc          ULONG
hkResult    ULONG
szValueName CSTRING(33)
cbData      ULONG(0)
dwType      ULONG
dwValue     ULONG(0)

  CODE
  szSubKey = 'SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'
  cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hkResult)
  IF ~cc
     szValueName = 'EnableOpLockForceClose'
     cbData = 4
     cc = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(dwValue),cbData)
     IF ~cc
        IF dwValue = 0
           bResult = FALSE
        END
     ELSE
        bResult = FALSE
     END
     RegCloseKey(hkResult)
  ELSE  !not found default is 0
     bResult = FALSE
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckEnableOpLocks ROUTINE
  DATA
szSubKey    CSTRING(256)
cc          ULONG
hkResult    ULONG
szValueName CSTRING(33)
cbData      ULONG(0)
dwType      ULONG
dwValue     ULONG(0)

  CODE
  szSubKey = 'SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'
  cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hkResult)
  IF ~cc
     szValueName = 'EnableOpLocks'
     cbData = 4
     cc = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(dwValue),cbData)
     IF ~cc
        IF dwValue = 1
           bResult = FALSE
        END
     ELSE
        IF osvi.dwMajorVersion = 5
           DO CheckOplocksDisabled
        ELSE
           bResult = FALSE
        END
     END
     RegCloseKey(hkResult)
  ELSE  !not found default is 0
     bResult = FALSE
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckOplocksDisabled ROUTINE
  DATA
szSubKey    CSTRING(256)
cc          ULONG
hkResult    ULONG
szValueName CSTRING(33)
cbData      ULONG(0)
dwType      ULONG
dwValue     ULONG(0)

  CODE
  szSubKey = 'SYSTEM\CurrentControlSet\Services\MRXSmb\Parameters'
  cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hkResult)
  IF ~cc
     szValueName = 'OplocksDisabled'
     cbData = 4
     cc = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(dwValue),cbData)
     IF ~cc
        IF dwValue = 0
           bResult = FALSE
        END
     ELSE
        bResult = FALSE
     END
     RegCloseKey(hkResult)
  ELSE  !not found default is 0
     bResult = FALSE
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckSmb2   ROUTINE
  DATA
szSubKey    CSTRING(256)
cc          ULONG
hkResult    ULONG
hkNewKey    ULONG
szValueName CSTRING(33)
szQueryValue CSTRING(33)
cbData      ULONG(0)
dwType      ULONG
dwValue     ULONG(0)
dwCreateDispostion   DWORD
  CODE
  szSubKey = 'SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'
  cc = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,BOR(KEY_QUERY_VALUE,KEY_SET_VALUE),hkResult)
  IF ~cc
     !MESSAGE('Open Key')
     szValueName = 'Smb2'
     cbData = 4
     cc = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(dwValue),cbData)
     IF ~cc
     !   MESSAGE('Query Value succeeded')
        IF dwValue = 1        !0=disabled    1 = enabled
           bResult = FALSE
        END
     ELSE   !parameter not there? maybe we should create it.
        dwValue = 0
        cc = RegSetValueEx(hkResult,szValueName,0,REG_DWORD,dwValue,4)
        IF ~cc
           ! Success
        ELSE
           ! Failed
           bResult = FALSE
        END
     END
     RegCloseKey(hkResult)
  ELSE  !not found default is 0
     !MESSAGE('Open Key Failed')
     bResult = FALSE
  END
  EXIT
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:50'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME vbdate
PROTOTYPE '(LONG cwDate),LONG'
PARAMETERS '(LONG cwDate)'
[COMMON]
DESCRIPTION 'convert clarion date to vbdate'
FROM ABC Source
MODIFIED '2017/06/09' '22:59:15'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN(cwDate - 36161)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME vbtime
PROTOTYPE '(LONG cwTime),LONG'
PARAMETERS '(LONG cwTime)'
[COMMON]
DESCRIPTION 'convert clarion time to vbtime'
FROM ABC Source
MODIFIED '2017/06/09' '22:59:27'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN((cwTime-1) / 6000)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME cwdate
PROTOTYPE '(LONG vbdate),LONG'
PARAMETERS '(LONG vbdate)'
[COMMON]
DESCRIPTION 'convert vbdate to clarion date'
FROM ABC Source
MODIFIED '2017/06/09' '22:51:25'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN(vbDate + 36161)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME cwtime
PROTOTYPE '(LONG vbtime),LONG'
PARAMETERS '(LONG vbtime)'
[COMMON]
DESCRIPTION 'convert vbtime to clarion time'
FROM ABC Source
MODIFIED '2017/06/19' '16:19:30'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN((vbTime * 6000)+1)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME GetCtrlRect
PROTOTYPE '(window OleWin, long feq, *RECT rc)'
PARAMETERS '(window OleWin, long feq, *RECT rc)'
[COMMON]
DESCRIPTION 'get control rectangle'
FROM ABC Source
MODIFIED '2017/06/09' '22:53:38'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    GetWindowRect(feq{Prop:Handle}, rc)

    pt.x = rc.left
    pt.y = rc.top
    ScreenToClient(OleWin{Prop:Handle},pt)
    rc.left = pt.x
    rc.top = pt.y

    pt.x = rc.right
    pt.y = rc.bottom
    ScreenToClient(OleWin{Prop:Handle},pt)
    rc.right = pt.x
    rc.bottom = pt.y

    RETURN
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
pt                   LIKE(POINT),AUTO                      !
[END]
[END]
[PROCEDURE]
NAME RGB
PROTOTYPE '(LONG r, LONG g, LONG b),LONG'
PARAMETERS '(LONG r, LONG g, LONG b)'
[COMMON]
DESCRIPTION 'convert r,g,b to color'
FROM ABC Source
MODIFIED '2017/06/09' '23:00:51'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN(BOR(r,BOR(BSHIFT(g,8),BSHIFT(b,16))))
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME IsHoliday
PROTOTYPE '(LONG pDate,*CSTRING szHolidayName),BOOL'
PARAMETERS '(LONG pDate,*CSTRING szHolidayName)'
[COMMON]
DESCRIPTION 'TRUE if passed date is a holiday'
FROM ABC Source
MODIFIED '2017/06/09' '23:11:18'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ReturnValue     BYTE(FALSE)
hyq             QUEUE(Holiday:QueueType),PRE(hyq),STATIC
                END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    IF RECORDS(hyq)
       GET(hyq,1)
       IF YEAR(hyq.lDate) <> YEAR(pDate)
          FREE(hyq)
       END
    END

    IF ~RECORDS(hyq)
       !Fill HolidayQueue
       srcCalculateHolidays(hyq,YEAR(pDate),'ON','CAN')
       SORT(hyq,+hyq.lDate)
    END

    hyq.lDate = pDate
    GET(hyq,+hyq.lDate)

    IF ~ERRORCODE()
       szHolidayName = CLIP(hyq.sName)
       ReturnValue = TRUE
    END

    RETURN ReturnValue
[END]
[END]
[CALLS]
srcCalculateHolidays
[PROCEDURE]
NAME DateTimeToMinutes
PROTOTYPE '(LONG pDate, LONG pTime),ULONG'
PARAMETERS '(long pDate, long pTime)'
[COMMON]
DESCRIPTION 'Convert date and time to minutes'
FROM ABC Source
MODIFIED '2017/06/19' '16:20:16'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    ASSERT(pDate < 2982617)
    RETURN((pDate*24*60)+(pTime/6000))
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:12:56'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME Word:SpellCheck
PROTOTYPE '(*CSTRING p_TextToCheck, BYTE p_Quiet=0)'
PARAMETERS '(*CSTRING p_TextToCheck, BYTE p_Quiet)'
[COMMON]
DESCRIPTION 'Spell Check using word'
FROM ABC Source
MODIFIED '2017/06/19' '16:17:31'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
WordOle         LONG
saveClipboard   &CSTRING
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    IF CLIP(p_TextToCheck) <> ''                                      !make sure something to check
       WordOle = CREATE(0,CREATE:Ole)                                    !create an ole control
       IF WordOle <> 0
          SETCURSOR(CURSOR:WAIT)                                            !display hourglass cursor
          WordOle{PROP:Create} = 'Word.Document'                            !in place activation of word
          IF WordOle{PROP:Ole} = FALSE AND WordOle{PROP:Object} = ''        !if instantiation fails
             DESTROY(WordOle)                                                  !destroy the control
             MESSAGE('Could not locate MS Word on your computer. Request Cancelled!','Notification...', ICON:Exclamation,BUTTON:Cancel)   !message user
          ELSE                                                              !intantiated ok
             WordOle{'Application.Visible'} = False                            !Hide WORD From User
             WordOle{'Application.Documents.Add'}                              !add a document
             saveClipboard &= NEW CSTRING(LEN(CLIPBOARD())+1)                  !allocate storage to save current clipboard contents
             saveClipboard = CLIPBOARD()                                       !save current clipboard contents
             SETCLIPBOARD(p_TextToCheck)                                       !set the clipboard contents
             WordOle{'Application.Selection.Paste'}                            !Paste Text Into WORD
             WordOle{'Application.ActiveDocument.CheckGrammar'}                !Activate The Spell Checker
             WordOle{'Application.Visible'} = False                            !Hide WORD From User
             WordOle{'Application.ActiveDocument.Select'}                      !Select The Corrected Text
             WordOle{'Application.Selection.Cut'}                              !Cut The Text To Clipboard
             p_TextToCheck = CLIPBOARD()                                       !Assign Text to string
             SETCLIPBOARD(saveClipboard)                                       !Restore clipboard contents
             DISPOSE(saveClipboard)                                            !release storage
             saveClipboard &= NULL                                             !clear reference
             WordOle{'Application.ActiveDocument.Close(0)'}                    !Close & DO NOT Save Changes
             WordOle{'Application.Quit'}                                       !Quit
             WordOle{PROP:DeActivate}                                          !deactivate ole
             DESTROY(WordOle)                                                  !destroy the control
             IF ~p_Quiet                                                       !verbose mode
                MESSAGE('The spelling and grammer check is complete','Microsoft Office Word', ICON:Exclamation,BUTTON:OK)   !message user
             END
          END
          SETCURSOR()                                                          !reset the cursor
       ELSE
          ASSERT(WordOle <> 0)                                           !something is wrong
       END
    END
    RETURN
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:13:06'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME srcURLHandler
PROTOTYPE '(UNSIGNED wHandle, STRING URL),UNSIGNED,PROC'
PARAMETERS '(UNSIGNED wHandle, STRING URL)'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:58:37'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    URLBuffer = CLIP(URL)
    EmptyString=''
    ShellExecute(whandle, 0, URLBuffer, 0, EmptyString, 1)

    GetWindowText(wHandle,szCurrentText,SIZE(szCurrentText))
    hCurrWnd = GetWindow(wHandle,GW_HWNDFIRST)
    LOOP WHILE hCurrWnd <> 0
      IF GetWindowText(hCurrWnd,szWindowText,SIZE(szWindowText))
         IF (szWindowText <> szCurrentText) AND IsWindowVisible(hCurrWnd) AND ~hTopWnd
            hTopWnd = hCurrWnd
            BREAK
         END
      END
      hCurrWnd = GetWindow(hCurrWnd,GW_HWNDNEXT)
    END

    RETURN hTopWnd
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
GW_HWNDFIRST         EQUATE(0)
GW_HWNDNEXT          EQUATE(2)
URLBuffer            CSTRING(256)
EmptyString          CSTRING(254)
hCurrWnd             UNSIGNED
hTopWnd              UNSIGNED(0)
szCurrentText        CSTRING(256)
szWindowText         CSTRING(256)
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/06/09' '22:13:14'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[END]
[END]
[PROCEDURE]
NAME newGUID
PROTOTYPE '(),STRING'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:55:58'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
Uuid        LIKE(GUID)
lResult     LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CLEAR(Uuid,-1)
 lResult = kcr_UuidCreate(Uuid)
 IF lResult = RPC_S_OK
 END
 RETURN Uuid

[END]
[END]
[PROCEDURE]
NAME GUIDToString
PROTOTYPE '(*GUID Uuid),STRING'
PARAMETERS '(*GUID Uuid)'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:54:50'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
lResult     LONG
lpszUuid    LONG
szUuid      &CSTRING
sUuid       STRING(36)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    lResult = kcr_UuidToString(Uuid,lpszUuid)
    IF lResult = RPC_S_OK
       szUuid &= (lpszUuid)
       sUuid = szUuid
       lResult = kcr_RpcStringFree(lpszUuid)
       IF lResult <> RPC_S_OK
          MESSAGE('kcr_RpcStringFree returned ' & lResult)
       END
    ELSE
       MESSAGE('kcr_UuidToString returned ' & lResult)
    END
    RETURN sUuid
[END]
[END]
[PROCEDURE]
NAME GUIDFromString
PROTOTYPE '(*CSTRING szString),STRING'
PARAMETERS '(*CSTRING szString)'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:54:34'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
lResult     LONG
lpszUuid    LONG
Uuid        LIKE(GUID)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  lResult = kcr_UuidFromString(szString,Uuid)
  IF lResult = RPC_S_OK
  END
  RETURN Uuid


[END]
[END]
[PROCEDURE]
NAME GUIDTOString2
PROTOTYPE '(*GROUP Uuid),STRING'
PARAMETERS '(*GROUP Uuid)'
[COMMON]
FROM ABC Source
MODIFIED '2017/06/09' '22:55:01'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-CyberTools (https://github.com/Devuna/Devuna-CyberTools)
!
!    Devuna-CyberTools is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-CyberTools is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with this file.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!EndRegion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
thisGUID    LIKE(GUID)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    thisGUID = Uuid
    RETURN GUIDToString(thisGUID)
[END]
[END]
[END]
